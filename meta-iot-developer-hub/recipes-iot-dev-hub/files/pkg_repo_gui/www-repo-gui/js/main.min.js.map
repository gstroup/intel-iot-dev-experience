{"version":3,"sources":["app.js","config.sensor.js","directive/hub.dashboard.linegraph.js","directive/hub.dashboard.radialgraph.js","directive/hub.dashboard.sensor.js","directive/hub.loading.js","directive/hub.networksettings.js","directive/hub.showOemOnLoad.js","directive/ps.mouse.over.js","directive/shakethat.js","state/state.error.js","state/state.hub.dashboard.cloudcmd.js","state/state.hub.dashboard.documentation.js","state/state.hub.dashboard.js","state/state.hub.dashboard.othertools.js","state/state.hub.dashboard.packages.js","state/state.hub.dashboard.sensors.js","state/state.hub.dashboard.tools.js","state/state.hub.js","state/state.hub.license.js","state/state.hub.networkcheck.js","state/state.hub.networkconnected.js","state/state.hub.networksettings.js","state/state.hub.nonetwork.js","state/state.hub.test.js","state/state.tutorial.js","state/state.welcome.js","state/state.welcome.login.js","service/workerProcessRestService.js","state/state.welcome.privacy.js","service/httpRequestsService.js","service/utilityFunctionsService.js","state/state.hub/gatewayOperations.js","state/state.hub/osUpdate.js","state/state.hub/packages.js","state/state.hub/proxy.js","state/state.hub/pro_upgrade.js","state/state.hub/repositories.js"],"names":["getCookie","cname","name","ca","document","cookie","split","i","length","c","charAt","substring","indexOf","acceptedPrivacy","authenticate","$q","$rootScope","$state","$timeout","bypass_auth","loggedin","when","go","reject","setupNoConnection","start","response_target_error_start_time","Date","setDate","getDate","start_trigger_no_connection","started_periodic_checking","setupPeriodicChecking","setResponseErrorTime","has_error","currentTime","diffTime","getTime","checkResponseErrorReport","diffTimeInSeconds","config_sensor","broker","host","wssPort","wsPort","topic","reconnectTimeout","reconnectInterval","charts","title","chartType","units","min","max","targetLow","targetHigh","points","gui_version","log_messages","log_message_json","license_duration_days","network_check_interval_milliseconds","rest_check_interval_milliseconds_s","rest_check_interval_milliseconds","rest_check_interval_milliseconds_m","rest_check_interval_milliseconds_l","rest_check_interval_milliseconds_ll","reboot_request_timeout_milliseconds","toggle_security_timeout_milliseconds","html_content_timeout_milliseconds","linger_info_timeout_milliseconds","restart_welcome_latency_milliseconds","factory_reset_welcome_latency_milliseconds","length_of_line_graph_history","simulate_network_failure","network_index","min_password_length","no_local_config_hosts","requested_url","window","location","hash","substr","modal_light_dismiss_enabled","https_port","quark_name_string","authorization","nc_count","username","ha1","cnonce","realm","nonce","opaque","qop","periodicCheckNetworkFunc","do_validate_session","oem_branding_logo_file","oem_branding_eulas","oem_branding_eulas_datetime","oem_branding_cookies_names","iotgatewayhub","angular","module","config","$stateProvider","$urlRouterProvider","$httpProvider","accepted_privacy","otherwise","interceptors","push","factory","client","connect","get","run","$location","$window","$uibModal","httpRequestsService","resolveFromUrl","url","states","len","redirectState","path","$on","event","abortAllRequests","no_connection_template","modalInstance","open","template","animation","size","backdrop","controller","$scope","clickRefresh","dismiss","reload","directive","restrict","templateUrl","replace","scope","latestData","scaleSteps","scaleStepWidth","scaleStartValue","pointsToShow","connected","link","$elem","attrs","setOptions","overrideScale","undefined","options","showScale","showTooltips","maintainAspectRatio","scaleOverride","parseInt","parseFloat","scaleFontColor","emptyDataMessage","scaleShowGridLines","scaleGridLineColor","scaleGridLineWidth","scaleShowHorizontalLines","scaleShowVerticalLines","scaleType","useUtc","scaleTimeFormat","bezierCurve","bezierCurveTension","pointDot","pointDotRadius","pointDotStrokeWidth","pointHitDetectionRadius","datasetStroke","datasetStrokeWidth","datasetFill","legendTemplate","trimHistory","scatterChart","datasets","removePoint","dataHistory","data","shift","label","strokeColor","x","y","chartCanvasFind","find","canvasContext","getContext","Chart","Scatter","addPoint","series","$watchGroup","destroy","$watch","update","upperRange","lowerRange","createDataPair","dataPair","segmentShowStroke","segmentStrokeColor","segmentStrokeWidth","percentageInnerCutout","animationSteps","animationEasing","animateRotate","animateScale","doughnutColors","labels","elem","$http","loadMessage","showMessage","resolve","init","defaults","saveText","cancelText","insideModal","hideTestSettings","maintainContextAfterSave","$","extend","isSaving","showSaveResult","networkSettingsTest","running","status","result","success","isVisible","saveResult","message","tmpSettings","single_url","settings","proxy","single_port","http_url","http_port","https_url","ftp_url","ftp_port","socks_url","socks_port","no_proxy","onSaveSuccess","onSaveFail","$emit","nextAction","response","doneSuccessCallback","applyProxySettings","testProxySettingsCallback","testSettings","testProxySettings","element","bind","hideOEMBranding","e","stopPropagation","preventDefault","perfectScrollbar","$animate","require","submit","submitted","form","on","$apply","$valid","addClass","removeClass","state","viewSensorSetupTutorial","href","parameter","viewSensorCloudTutorial","viewHelixTutorial","viewSaveDeployTutorial","state_chosen","isQuark","abstract","timerExpired","chartMatch","isSensorPanelExpanded","sensors_charted","charts_flat_list","dashboardToggle","carouselPrevious","carouselNext","setDashboard","onConnectionLost","responseObject","errorCode","onMessageArrived","sensorMatch","entry","JSON","parse","payloadString","_id","id","sensorMatches","grep","mostRecentValue","datum","priority","mostRecentUnits","mostRecentSource","dataSource","mostRecentTimestamp","chartMatches","parentSensorTitle","value","sourcePriority","stepWidth","timeToLive","ttl","timerExpiredPromise","cancel","err","mqttInit","loop","reconnect","_host","hostname","_useSSL","_port","protocol","Math","random","_reconnectInterval","_reconnectTimeout","_topic","mqtt_client","Paho","MQTT","Client","useSSL","timeout","cleanSession","onSuccess","subscribe","qos","onFailure","initMqtt","setTimeout","gettingPackages","setPackages","sortType","params","packageUrl","packageName","$stateParams","utilityFunctionsService","doManageSensors","_cookie","launchQuickTools","openManageSensorsDialogModal","noreshow","closeModal","setCookie","viewTutorial","viewVideo","confirmRestartOS","restarting_os","restarted_os","error_message","restartOS","rebootGateway","configureNetwork","getProxySettings","isInsideModal","checkMECDetails","skipSettings","networkSettingsModal","onClickUpgrade","suppressReminder","mec","enabled","openOSUpgradeModal1b","openOSUpgradeModal2","onClickSaveOSImage","suppress","pro","openOSImageModal0","confirmOSUpgrade","openChangePassModal0","password","newpassword","confirmnewpassword","changePassword","_username","_password","_newpassword","_confirmnewpassword","method","stringify","headers","Content-type","then","openConfirmChangePasswordModal","error","showFactoryReset","title_message","description_message","bar_before_message","bar_after_message","show_close_button","doFactoryReset","stopCheckingNetwork","startCheckingNetwork","confirmFactoryReset","cancelFactoryReset","$sce","workerProcessRestService","security_enabled","oem_logo_file","dashboard","usb_devices","available","installed","package_updates","updates","sensors","sensor_map","upgrades","humidity","temperature","updating_package","updated_package","update_package_failed","update_package_fail_message","installing_package","uninstalling_package","package_activity","starting_package","stopping_package","enabling_package","installed_package","deleting_repository","noderedurl","trustAsResourceUrl","luciurl","httpurl","httpsurl","cloudcmdurl","foundOSUpdate","foundOSUpdate_Packages","OSUpdate_Packages","package_refresh","gotPackagesList","gotPackagesList_Error","isDashboard","hasUpdates","hasOSUpdate","updatePackageStatuses","_i","_len","packages","_package","_service","service","_all_services_running","_all_services_enabled","_num_services","_j","_service_sub","service_statuses","SUB","_service_state","State","package_statuses","autorun","setArrays","_set_services","filter","upgrade_version","curated","setServices","_toolname","navigator","userAgent","toLowerCase","win","focus","setupPreventModalClosing","initHubTasks","initSetPackages","initCheckMECDetails","_mec","type","initScanUSBDevices","scanning_usb","initCheckProStatus","initSetDevice","device","model","uptime","days","hours","minutes","milliseconds","upSince","deviceUpSince","expandHub_proxy","expandHub_services","expandHub_save_image","expandHub_security","expandHub_repositories","expandHub_packages","expandHub_pro_upgrade","expandHub_openOSUpdate","expandHub_gatewayOperations","$watchCollection","blockUI","hide","listener","targetScope","reason","closed","show","accepted_license","findUnacceptedCookieIndex","temp_index","all_accepted","checkEulaCookies","doApply","eula_index","eulaLoaded","current_eula_html_file","current_eula_cookie_name","agree","proceedToNetworkCheck","skipConfigureNetwork","authentication","broadcastFailure","bMessage","$broadcast","handleAuthenticated","credentials","checkAuth","_method","_uri","showLogin","continueWelcomeLogin","setOEMBrandingCookiesNames","temp_datetime","temp_cookiename","concat","checkOEMBrandingCookies","temp_accepted","getOEMBranding","logo_file","eula_files","eula_files_datetime","showGo","barMessage","serverErrorMessage","keyPressed","$event","keyCode","login","internalAuthentication","firstTime","do_auth","init_in_progress","showAuthenticationError","showServerError","continueToLogin","customTimeout","newPromise","defer","toBeAbortedPromises","promise","forEach","eachPromise","isAbortedByUs","removeRequest","target_index","count","splice","request","responseError","rejection","to_report","isNumber","n","isNaN","isFinite","pad","width","z","Array","join","parse_digest","_header","ws","token","quotedString","tokenizer","RegExp","tokens","match","unq","cvalue","exdays","d","setTime","expires","toUTCString","checkNetwork","_successCallback","_errorCallback","cache","createWorkID","randomNum","toString","checkPeriodicCheckingResponseError","report","return_message","informGeneralError","titleMessage","descMessage","barBeforeMessage","hasError","informGeneralChecking","httpMethod","httpURL","noParameter","httpJSON","httpBody","realSuccessCallback","checkPeriod","periodicChecking","http_call","workID","is_checking","in_progress","temp_error_message","work_type","performGeneralExecution","passedSuccessCallback","passedErrorCallback","performGeneralExecutionOnlySubmit","_success","_error","timeout_value","_","isFunction","scanUSBDevices","logout","enterOSCredential","do_enter_credential","do_confirm_update","cancelOSUpdate","informOSUpdate_CancelWarning","continueChecking","checkOSUpdate","_credentials","content_body","tempURL","informOSUpdateError","confirmOSUpdate","checkOSUpdate_Packages","errorMessage","package_update","confirmOSUpdatePackages","informOSUpdateNotAvailable","doOSUpdate","showOSUpdate","doOSUpdate_Packages","showOSUpdatePackages","performUpdateSequence","informOSUpdateRestart","p_list","show_bar","show_last_error","show_last_normal","show_close","show_warning_html","_error_message","informOSUpdateDone","basicInstallPackage","_name","_trust","successCallback","errorCallback","_untrusted_query","encodeURIComponent","basicUninstallPackage","basicUpdatePackage","basicUpdateAllPackages","basicSelfUpgrade","changePackageState","blockSetArr","PACKAGE_STATE","INSTALLED","UNINSTALLED","remove","UPDATED","version","UPDATE_FAILED","update_message","PACKAGE_ACTIVITY_TYPE","INSTALL","UNINSTALL","UPDATE","UPDATE_ALL","SELF_UPDATE","opt","args","$s","currentScope","_type","installing_any_package","selfUpgrading","installing_all_package_updates","checkForPackageActivity","showPackageInfo","_details","attrname","openPackageInfoModal","installPackage","openInstallPackageErrorModal","confirmUntrusted","uninstallPackage","launchPackage","_url","updatePackage","updateFailed","_version","openUpdateDevHubPackageModal","p_info","openUpdateUntrustedPackageModal","updateDevHub","updatePackagesIndividually","updateNextPackage","packagesToUpdate","selfUpgradeAvailable","updatePackages","_p","_pl","_packg","tempPackage","devHubPackage","openUpdateUntrustedPackagesModal","package_list","Number","service_error","displayed","checkbox","hasupgrade","closePackageInfo","toggleServiceState","_enable","_action","_services","service_error_message","doUpdate","_displayed","_message","modalInstance2","trustToUpdate","confirmUpdatePackages","doUpdatePackages","doSelfUpdate","startTrustedInstall","untrusted","openInstallUntrustedPackageModal","trustToInstall","_title","openServiceActivityPackageErrorModal","openAddPackagesModal","query","closeAddPackages","goNextState","has_network","_https_conn","https_conn","_ok","clearInterval","setInterval","_fail","pro_status","repo_list","repositories","resultHandler","tempUrl","failCallback","_http_url","_http_port","_https_url","_https_port","_ftp_url","_ftp_port","_socks_url","_socks_port","_no_proxy","checkProStatus","callback","onSuppress","shouldSuppress","onNotNow","continueOSUpgrade","openOSUpgradeModal3","in_pro_upgrade","before_bar_message","button_title","timeHours","responseData","rebooting","rebooted","openCreateRepositoryModal","list","openCreateRepositoryModal_2","hideCancel","updated_repositories","updating_repositories","removeRepository","_repo","findRepository","source","updateRepos","deleting_any_repository","adding_repository","response_message","error_message_add","response_message_add","reponse_message","addRepo","_repository_name","newRepository","_repository_url","_repository_username","_repository_password","_existing","deleteRepo","_repository","_index","closeOSImageModal","continueOSImage1","openOSImageModal1","selected_device","setSelectedDevice","_device","continueOSImage2","openOSImageModal2","_usb_device","closeOSImageModal2","continueOSImage3","openOSImageModal3","hasMEC","update_params","new_admin_password","confirm_admin_password","new_mec_admin_password","confirm_mec_admin_password","enable_mec_whitelist","closeOSImageModal3","continueOSImage4","openOSImageModal4","_update_params","closeOSImageModal4","continueOSImage5","openOSImageModal5","closeSaveImage","savedImage","_new_admin_password","_new_mec_admin_password","saveImage","Device","openOSImageModal6","openOSImageModal6e","continueOSImage6","continueOSImage7","openOSImageModal7","html_page","openSaveDeployTutorial","openDocumentation","confirmToggleSecurity","toggled_security","toggleSecurity","toggling_security","serviceControl","_service_q","checkServiceStatuses","Object","keys","services","_service_calls","all","results","_len2","_result","_object","_num_serv","_k","_service_name","_service_status"],"mappings":"AAkEA,QAAAA,WAAAC,OAGA,IAAA,GAFAC,MAAAD,MAAA,IACAE,GAAAC,SAAAC,OAAAC,MAAA,KACAC,EAAA,EAAAA,EAAAJ,GAAAK,OAAAD,IAAA,CAEA,IADA,GAAAE,GAAAN,GAAAI,GACA,KAAAE,EAAAC,OAAA,IACAD,EAAAA,EAAAE,UAAA,EAEA,IAAA,IAAAF,EAAAG,QAAAV,MACA,MAAAO,GAAAE,UAAAT,KAAAM,OAAAC,EAAAD,QAGA,MAAA,GAEA,QAAAK,mBACA,MAAAb,WAAA,WAEA,QAAAc,cAAAC,GAAAC,WAAAC,OAAAC,UACA,MAAAC,cACA,EAEAH,WAAAI,SAEAL,GAAAM,QAGAH,SAAA,WAIAD,OAAAK,GAAA,mBAEAP,GAAAQ,UAOA,QAAAC,mBAAAC,OACAA,OAEAC,iCAAA,GAAAC,MACAD,iCAAAE,QAAAF,iCAAAG,UAAA,IACAC,6BAAA,EACAC,2BAAA,IAEAD,6BAAA,EACAC,2BAAA,GAGA,QAAAC,uBAAAP,OACAM,0BAAAN,MAEA,QAAAQ,sBAAAC,WACA,GAAAA,UAAA,CACA,GAAAC,aAAA,GAAAR,MACAS,SAAAD,YAAAE,UAAAX,iCAAAW,SACA,GAAAD,WAEAV,iCAAA,GAAAC,WAKAD,kCAAA,GAAAC,MACAD,iCAAAE,QAAAF,iCAAAG,UAAA,IAGA,QAAAS,4BACA,GAAAH,aAAA,GAAAR,MACAS,SAAAD,YAAAE,UAAAX,iCAAAW,UACAE,kBAAAH,SAAA,GACA,OAAAL,2BAEAQ,mBAAA,KAOA,ECpJAC,eACAC,QACAC,KAAA,KACAC,QAAA,KACAC,OAAA,KACAC,MAAA,WACAC,iBAAA,IACAC,kBAAA,GAEAC,SAEAC,MAAA,cACAC,UAAA,OACAC,MAAA,IACAC,IAAA,IACAC,IAAA,MACAC,UAAA,KACAC,WAAA,KACAC,OAAA,OAGAP,MAAA,WACAC,UAAA,QACAC,MAAA,IACAC,IAAA,IACAC,IAAA,MACAC,UAAA,KACAC,WAAA,KACAC,OAAA,MAIA,IAAAC,aAAA,UD/BAtC,aAAA,EAEAuC,cAAA,EAEAC,kBAAA,EAEAC,sBAAA,KAEAC,oCAAA,IAEAC,mCAAA,IAEAC,iCAAA,IAEAC,mCAAA,IAEAC,mCAAA,IAEAC,oCAAA,IAEAC,oCAAA,IAEAC,qCAAA,KACAC,kCAAA,IAEAC,iCAAA,IAEAC,qCAAA,KAEAC,2CAAA,IAEAC,6BAAA,GACAC,0BAAA,EACAC,cAAA,EACAC,oBAAA,EACAC,uBAAA,UAEAC,cAAAC,OAAAC,SAAAC,KAAAC,OAAA,GACAC,4BAAA,SAEAC,WAAA,OACAC,kBAAA,QACAvD,6BAAA,EACAC,2BAAA,EACAL,iCAAA,GAAAC,MACA2D,eACAC,SAAA,EACAC,SAAA,GACAC,IAAA,GACAC,OAAA,GACAC,MAAA,GACAC,MAAA,GACAC,OAAA,GACAC,IAAA,IAEAC,yBAAA,KACAC,qBAAA,EACAC,uBAAA,GACAC,sBACAC,+BACAC,8BA6FAC,cAAAC,QAAAC,OAAA,iBACA,YACA,eACA,qBACA,WACA,oBACA,UACAC,QACA,iBACA,qBACA,gBACA,SAAAC,eAAAC,mBAAAC,eACA,GAAAC,kBAAA/F,iBACA+F,kBACAF,mBAAAG,UAAA,kBAEAH,mBAAAG,UAAA,oBAKAF,cAAAG,aAAAC,KAAA,8BAEAC,QAAA,cAAA,WACA,GAAAC,UACAA,QAAAC,QAAA,YAGA,IAAAF,WAIA,OAHAA,SAAAG,IAAA,WACA,MAAAF,SAEAD,WACAI,IAAA,SAAApG,WAAAC,OAAAoG,UAAAC,QAAAC,UAAAC,qBAEA,QAAAC,gBAAAC,KAEA,IAAA,GADAC,QAAA1G,OAAAkG,MACA5G,EAAA,EAAAqH,IAAAD,OAAAnH,OAAAoH,IAAArH,EAAAA,IACA,GAAAoH,OAAApH,IAAAoH,OAAApH,GAAAmH,MAAAA,IAEA,MAAAC,QAAApH,GAAAL,KAIA,GAAA0G,kBAAA/F,iBACA+F,kBACA9B,eAAAA,cAAAlE,QAAA,aAAA,KACAI,WAAA6G,cAAAJ,eAAA3C,gBAGAuC,UAAAS,KAAA,oBAEA9G,WAAA+G,IAAA,uBAAA,SAAAC,OACAnH,mBAEAwG,UAAAS,KAAA,sBAGA9G,WAAA+G,IAAA,wBAAA,SAAAC,OAGAR,oBAAAS,kBACA,IAAAC,wBAAA,6pBACAC,cAAAZ,UAAAa,MACAC,SAAAH,uBACAI,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACAsD,WAAA,SAAAC,OAAApB,SACAoB,OAAAC,aAAA,WACAR,cAAAS,QAAA,UACAtB,QAAAtC,SAAA6D,gBAaAxC,eAAAyC,UAAA,wBAAA,WACA,OACAC,SAAA,IACAC,YAAA,oDAAAvF,YACAwF,SAAA,EACAC,OACAC,WAAA,IACAC,WAAA,IACAC,eAAA,IACAC,gBAAA,IACAC,aAAA,IExPApG,MAAA,IACAqG,UAAA,KAEAC,KAAA,SAAAf,OAAAgB,MAAAC,OAEAjB,OAAAc,WAAA,CACA,IAAAI,YAAA,WACA,GAAAC,eAAA,OAAAnB,OAAAU,YAAAU,SAAApB,OAAAU,YAAA,OAAAV,OAAAW,gBAAAS,SAAApB,OAAAW,gBAAA,OAAAX,OAAAY,iBAAAQ,SAAApB,OAAAY,eACAZ,QAAAqB,SACAzB,WAAA,EACA0B,WAAA,EACAC,cAAA,EACAC,qBAAA,EACAC,cAAAN,cACAT,WAAAgB,SAAA1B,OAAAU,YACAC,eAAAgB,WAAA3B,OAAAW,gBACAC,gBAAAe,WAAA3B,OAAAY,iBACAgB,eAAA,UACAC,iBAAA,IACAC,oBAAA,EACAC,mBAAA,kBACAC,mBAAA,EACAC,0BAAA,EACAC,wBAAA,EACAC,UAAA,OACAC,QAAA,EACAC,gBAAA,IACAC,aAAA,EACAC,mBAAA,GACAC,UAAA,EACAC,eAAA,EACAC,oBAAA,EACAC,wBAAA,EACAC,eAAA,EACAC,mBAAA,EACAC,aAAA,EACAC,eAAA,gBAGAC,YAAA,WACA,KAAAhD,OAAAiD,aAAAC,SAAA,GAAApI,OAAAhD,OAAAkI,OAAAa,cACAb,OAAAiD,aAAAC,SAAA,GAAAC,YAAA,GACAnD,OAAAoD,YAAA,GAAAC,KAAAC,QAOAtD,QAAAoD,cACAG,MAAA,GACAC,YAAA,UACAH,OACAI,EAAAzD,OAAAS,WAAAgD,EACAC,EAAA1D,OAAAS,WAAAiD,MAIAxC,YACA,IAAAyC,iBAAA3C,MAAA4C,KAAA,UAEAC,cAAAF,gBAAA,GAAAG,WAAA,KACA9D,QAAAiD,aAAA,GAAAc,OAAAF,eAAAG,QAAAhE,OAAAoD,YAAApD,OAAAqB,SACA,OAAArB,OAAAS,YAAAW,SAAApB,OAAAS,aACAT,OAAAiD,aAAAC,SAAA,GAAAe,SAAAjE,OAAAS,WAAAgD,EAAAzD,OAAAS,WAAAiD,GACA1D,OAAAoD,YAAA,GAAAC,KAAAhF,MACAoF,EAAAzD,OAAAS,WAAAgD,EACAC,EAAA1D,OAAAS,WAAAiD,KAGA1D,OAAAkE,QAAA,IACAlE,OAAAmE,aACA,iBACA,kBACA,cACA,WACAjD,aACAlB,OAAAiD,aAAAmB,UACApE,OAAAiD,aAAA,GAAAc,OAAAF,eAAAG,QAAAhE,OAAAoD,YAAApD,OAAAqB,WAEArB,OAAAqE,OAAA,aAAA,WACA,OAAArE,OAAAS,YAAAW,SAAApB,OAAAS,aACAT,OAAAiD,aAAAC,SAAA,GAAAe,SAAAjE,OAAAS,WAAAgD,EAAAzD,OAAAS,WAAAiD,GACA1D,OAAAoD,YAAA,GAAAC,KAAAhF,MACAoF,EAAAzD,OAAAS,WAAAgD,EACAC,EAAA1D,OAAAS,WAAAiD,KAGAV,cACAhD,OAAAiD,aAAAqB,WAEAtE,OAAAqE,OAAA,eAAA,WACArB,cACAhD,OAAAiD,aAAAqB,WAEAtE,OAAAqE,OAAA,YAAA,WACArE,OAAAc,UACAd,OAAAoD,YAAA,GAAAI,YAAA,UAEAxD,OAAAoD,YAAA,GAAAI,YAAA,UAEAxD,OAAAiD,aAAAmB,UACApE,OAAAiD,aAAA,GAAAc,OAAAF,eAAAG,QAAAhE,OAAAoD,YAAApD,OAAAqB,WAEAH,iBAKAvD,cAAAyC,UAAA,0BAAA,WACA,OACAC,SAAA,IACAC,YAAA,sDAAAvF,YACAwF,SAAA,EACAC,OACA6C,KAAA,IACA5I,MAAA,IACA8J,WAAA,IACAC,WAAA,IACA1D,UAAA,KAEAC,KAAA,SAAAf,OAAAgB,MAAAC,OAEA,QAAAwD,kBACAzE,OAAA0E,UACA1E,OAAAuE,WAAAvE,OAAAwE,WAAAxE,OAAAqD,KACArD,OAAAqD,MAGArD,OAAAqE,OAAA,OAAA,WACAI,mBAEAzE,OAAAqB,SACAE,cAAA,EACAoD,mBAAA,EACAC,mBAAA,UACAC,mBAAA,EACAC,sBAAA,GACAC,eAAA,GACAC,gBAAA,gBACAC,eAAA,EACAC,cAAA,GAEAlF,OAAAmF,gBACA,UACA,WAEAnF,OAAAoF,QACA,GACA,IAEApF,OAAAqE,OAAA,YAAA,WACArE,OAAAc,UACAd,OAAAmF,gBACA,UACA,WAGAnF,OAAAmF,gBACA,UACA,iBAQAxH,cAAAyC,UAAA,qBAAA,WACA,OACAC,SAAA,IACAC,YAAA,iDAAAvF,YACAgG,KAAA,SAAAf,OAAAqF,KAAApE,YCxKAtD,cAAAyC,UAAA,aAAA,WACA,OACAC,SAAA,IACAC,YAAA,wCAAAvF,YACAgF,WAAA,SAAAC,OAAAsF,OACAtF,OAAAuF,YAAA,YACAvF,OAAAwF,aAAA,MAOA7H,cAAAyC,UAAA,qBAAA,WACA,OACApB,IAAA,uBACAsB,YAAA,iDAAAvF,YACA0K,WACA1F,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,WAAAE,UAcA,QAAAkN,QACA9I,cAAAE,UACAvE,OAAAK,GAAA,mBAEA,IAAA+M,WACAC,SAAA,KACAC,WAAA,SACAC,aAAA,EACAC,kBAAA,EACAC,0BAAA,EAEAhG,QAAA6F,aACAF,SAAAE,WAAA7F,OAAA6F,YACAI,EAAAC,OAAAlG,OAAA2F,UACAQ,UAAA,EACAC,gBAAA,EACAC,qBACAC,SAAA,EACAC,OAAA,gBACAC,OAAA,GACAC,QAAA,KACAC,WAAA,GAEAC,YACAC,QAAA,GACAH,QAAA,KACAC,WAAA,KAvCA1G,OAAA6G,aACAC,WAAA9G,OAAA+G,SAAAC,MAAAF,WACAG,YAAAjH,OAAA+G,SAAAC,MAAAC,YACAC,SAAAlH,OAAA+G,SAAAC,MAAAE,SACAC,UAAAnH,OAAA+G,SAAAC,MAAAG,UACAC,UAAApH,OAAA+G,SAAAC,MAAAI,UACA1K,WAAAsD,OAAA+G,SAAAC,MAAAtK,WACA2K,QAAArH,OAAA+G,SAAAC,MAAAK,QACAC,SAAAtH,OAAA+G,SAAAC,MAAAM,SACAC,UAAAvH,OAAA+G,SAAAC,MAAAO,UACAC,WAAAxH,OAAA+G,SAAAC,MAAAQ,WACAC,SAAAzH,OAAA+G,SAAAC,MAAAS,UCjCA/B,OACA1F,OAAA0H,cAAA,SAAAlB,QACAxG,OAAAmG,UAAA,EACAnG,OAAA2G,WAAAD,WAAA,EACA1G,OAAA2G,WAAAF,SAAA,EACAzG,OAAA2G,WAAAC,QAAA,iBACApO,SAAA,WACAwH,OAAA2G,WAAAD,WAAA,GACA9K,mCCRAoE,OAAA2H,WAAA,SAAAnB,QACAxG,OAAA4H,MAAA,mBACA5H,OAAAmG,UAAA,EACAnG,OAAA2G,WAAAD,WAAA,EACA1G,OAAA2G,WAAAF,SAAA,EACAzG,OAAA2G,WAAAC,QAAAJ,OAAAI,QACApO,SAAA,WACAwH,OAAA2G,WAAAD,WAAA,GACA9K,mCAEAoE,OAAA6H,WAAA,WCPA,QAAApB,SAAAqB,UACA9H,OAAA4H,MAAA,mBACA5H,OAAAgG,yBACAhG,OAAA0H,cAAAI,UAEA9H,OAAA+H,oBAAAD,UATA9H,OAAA4H,MAAA,iBAAA5H,SACAA,OAAAmG,UAAA,EAEAnG,OAAA+G,SAAAC,MAAAhH,OAAA6G,YASA7G,OAAAgI,mBAAAvB,QAAAzG,OAAA2H,aAGA3H,OAAAiI,0BAAA,SAAAzB,QACAxG,OAAAqG,oBAAAG,OAAAA,OAAA,0BAAA,qBACAxG,OAAAqG,oBAAAI,UAAAD,OACAxG,OAAAqG,oBAAAC,SAAA,EACA9N,SAAA,WACAwH,OAAAqG,oBAAAK,WAAA,EACA1G,OAAAqG,oBAAAI,SAAA,GACA7K,mCAEAoE,OAAAkI,aAAA,WACAlI,OAAAqG,oBAAAK,WAAA,EACA1G,OAAAqG,oBAAAC,SAAA,EACAtG,OAAAqG,oBAAAG,OAAA,YACAxG,OAAAmI,kBAAA,WACAnI,OAAAiI,2BAAA,IACA,WACAjI,OAAAiI,2BAAA,UAOAtK,cAAAyC,UAAA,gBAAA,WACA,OACAC,SAAA,IACAU,KAAA,SAAAP,MAAA4H,QAAAnH,OACAmH,QAAAC,KAAA,OAAA,WACA7H,MAAA8H,iBAAA,QAMA3K,cAAAyC,UAAA,cAAA,WACA,OACAW,KAAA,SAAAP,MAAA4H,SACAA,QAAAC,KAAA,YAAA,SAAAE,GAEAA,EAAAC,kBACAD,EAAAE,iBACAL,QAAAM,iBAAA,gBAoBA/K,cAAAyC,UAAA,aACA,WACA,SAAAuI,UACA,OACAC,QAAA,QACApI,OACAqI,OAAA,IACAC,UAAA,KAEA/H,KAAA,SAAAP,MAAA4H,QAAAnH,MAAA8H,MAEAX,QAAAY,GAAA,SAAA,WAEAxI,MAAAyI,OAAA,WAEA,MAAAF,MAAAG,OACA1I,MAAAqI,UAEArI,MAAAsI,WAAA,MAEAH,UAAAQ,SAAAf,QAAA,QAAA,WACAO,SAAAS,YAAAhB,QAAA,qBAQAzK,cAAAG,OAAA,SAAAC,eAAAC,oBACAD,eAAAsL,MAAA,SACArK,IAAA,SACAsB,YAAA,mCAAAvF,YACAgF,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,kBAIAqF,cAAAG,OAAA,SAAAC,eAAAC,oBACAD,eAAAsL,MAAA,0BACArK,IAAA,YACAsB,YAAA,0CAAAvF,YACAgF,WAAA,SAAAnB,QAAAoB,OAAAzH,OAAAD,kBAIAqF,cAAAG,OAAA,SAAAC,eAAAC,oBACAD,eAAAsL,MAAA,+BACArK,IAAA,2BACAsB,YAAA,yDAAAvF,YACAgF,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YACA0H,OAAAsJ,wBAAA,WACA,GAAAtK,KAAAzG,OAAAgR,KAAA,wBAAAC,UAAA,aACAnN,QAAAqD,KAAAV,IAAA,WAEAgB,OAAAyJ,wBAAA,WACA,GAAAzK,KAAAzG,OAAAgR,KAAA,wBAAAC,UAAA,aCnIAnN,QAAAqD,KAAAV,IAAA,WAEAgB,OAAA0J,kBAAA,WACA,GAAA1K,KAAAzG,OAAAgR,KAAA,qBAAAC,UAAA,aACAnN,QAAAqD,KAAAV,IAAA,WAEAgB,OAAA2J,uBAAA,WAEA,GAAAC,cAAA,qBACA5J,QAAA6J,UACAD,aAAA,4BCVA,IAAA5K,KAAAzG,OAAAgR,KAAAK,cAAAJ,UAAA,aAEAnN,QAAAqD,KAAAV,IAAA,gBAKArB,cAAAG,OAAA,SAAAC,eAAAC,oBACAD,eAAAsL,MAAA,iBACArK,IAAA,GACA8K,YAAA,EACAxJ,YAAA,2CAAAvF,YACAgF,WAAA,SAAAnB,QAAAoB,OAAAzH,OAAAD,WAAAE,UCZAwH,OAAA+J,aAAA,SAAAC,YAEAA,WAAAlJ,WAAA,EACAd,OAAAiJ,UAEA3Q,WAAA2R,uBAAA,EAEAjK,OAAAkK,mBAEAlK,OAAAmK,oBAEAnK,OAAAoK,gBAAA,WACA9R,WAAA2R,uBAAA3R,WAAA2R,uBAEAjK,OAAAqK,iBAAA,aAGArK,OAAAsK,aAAA,aAGAtK,OAAAuK,eAEAvK,OAAAwK,iBAAA,SAAAC,gBACA,IAAAA,eAAAC,WAKA1K,OAAA2K,iBAAA,SAAA/D,SAKA,IACA,GAMAgE,aANAC,MAAAC,KAAAC,MAAAnE,QAAAoE,eACAC,IAAAJ,MAAAK,GAEAC,cAAAlF,EAAAmF,KAAApL,OAAAkK,gBAAA,SAAA3B,GACA,MAAAA,GAAA2C,IAAAD,KAGAE,eAAArT,OAAA,IAGA,GAAAqT,cAAArT,OC3CA8S,YAAAO,cAAA,IAGAP,aACAtQ,UACA4Q,GAAAD,IACA1Q,MAAAsQ,MAAAtQ,OCPAyF,OAAAkK,gBAAA7L,KAAAuM,cAEAA,YAAAS,gBAAAR,MAAAS,MAAA,GACAV,YAAAW,SAAA7J,SAAAmJ,MAAAU,UACAX,YAAAY,gBAAAX,MAAApQ,MACAmQ,YAAAa,iBAAAZ,MAAAa,WACAd,YAAAe,oBAAA,GAAA1S,MAAAyI,SAAAmJ,MAAAS,MAAA,KAEA,ICRAtB,YDQA4B,aAAA3F,EAAAmF,KAAAR,YAAAtQ,OAAA,SAAAiO,GACA,MAAAA,GAAAmD,YAAAb,MAAAa,YCRAE,cAAA9T,OAAA,IAEA,GAAA8T,aAAA9T,OACAkS,WAAA4B,aAAA,IAGA5B,cACAY,YAAAtQ,OAAA+D,KAAA2L,YACAhK,OAAAmK,iBAAA9L,KAAA2L,cAEAA,WAAA6B,kBAAAjB,YAAArQ,MACAyP,WAAAxP,UAAAqQ,MAAArQ,UACA,QAAAqQ,MAAArQ,UACAwP,WAAA8B,OACArI,EAAAoH,MAAAS,MAAA,GACA5H,EAAAmH,MAAAS,MAAA,IAGAtB,WAAA8B,MAAAjB,MAAAS,MAAA,GAEAtB,WAAAqB,gBAAAR,MAAAS,MAAA,GACAtB,WAAA+B,eAAArK,SAAAmJ,MAAAkB,gBACA/B,WAAA0B,WAAAb,MAAAa,WACA1B,WAAAtP,IAAAmQ,MAAAnQ,IACAsP,WAAArP,IAAAkQ,MAAAlQ,IACAqP,WAAAgC,WAAAnB,MAAAlQ,IAAAkQ,MAAAnQ,KAAA,EACAsP,WAAAnJ,aAAAa,SAAAmJ,MAAA/P,QACAkP,WAAAvP,MAAAoQ,MAAApQ,MACAuP,WAAAiC,WAAAtK,WAAAkJ,MAAAqB,KACAlC,WAAAlJ,WAAA,EACAkJ,WAAA2B,oBAAA,GAAA1S,MAAAyI,SAAAmJ,MAAAS,MAAA,KACAtB,WAAAmC,qBACA3T,SAAA4T,OAAApC,WAAAmC,qBCjCAnC,WAAAmC,oBAAA3T,SAAA,WACAwH,OAAA+J,aAAAC,aACA,IAAAA,WAAAiC,YACAjM,OAAAiJ,SACA,MAAAoD,QAGArM,OAAAsM,SAAA,WAeA,GAAAC,MAAA,EACAC,WAAA,EAGAC,MAAA,OAAA7N,QAAA9E,cAAAC,OAAAC,KAAA4E,QAAA9E,cAAAC,OAAAC,KAAAqC,OAAAC,SAAAoQ,QAEAvQ,wBAAA,IAAAA,sBAAAjE,QAAAmE,OAAAC,SAAAoQ,YACAD,MAAApQ,OAAAC,SAAAoQ,SAEA,IAAAC,UAAA,EACAC,MAAAhO,QAAA9E,cAAAC,OAAAG,MACA,YAAAmC,OAAAC,SAAAuQ,WACAD,MAAAhO,QAAA9E,cAAAC,OAAAE,QACA0S,SAAA,EAEA,IAAA1B,KAAA,UAAAvJ,SAAA,IAAAoL,KAAAC,SAAA,IACAC,mBAAApO,QAAA9E,cAAAC,OAAAM,kBACA4S,kBAAArO,QAAA9E,cAAAC,OAAAK,iBACA8S,OAAAtO,QAAA9E,cAAAC,OAAAI,KACA6F,QAAAmN,YAAA,GAAAvO,SAAAwO,KAAAC,KAAAC,OAAAb,MAAAG,MAAA3B,KACAjL,OAAAmN,YAAA3C,iBAAAxK,OAAAwK,iBACAxK,OAAAmN,YAAAxC,iBAAA3K,OAAA2K,iBAEA3K,OAAAmN,YAAA3O,SACA+O,OAAAZ,QACAa,QAAA,EACAC,cAAA,EACAC,UAAA,WAGA1N,OAAAmN,YAAAQ,UAAAT,QAAAU,IAAA,KAEAC,UAAA,SAAAjH,SACA,QAAAkH,YACA9N,OAAAsM,WAEA,GAAAE,UAAA,CAEA,KAAAQ,mBAAAT,MACAA,OACAwB,WAAAD,SAAAb,kBAEAT,YAAA,OAQAxM,OAAAsM,gBAIA3O,cAAAG,OAAA,SAAAC,eAAAC,oBACAD,eAAAsL,MAAA,yBACArK,IAAA,WACAsB,YAAA,yCAAAvF,YACAgF,WAAA,SAAAnB,QAAAoB,OAAAzH,OAAAD,gBAEA+Q,MAAA,uBACArK,IAAA,SACAsB,YAAA,uCAAAvF,YACAgF,WAAA,SAAAnB,QAAAoB,OAAAzH,OAAAD,gBAEA+Q,MAAA,sBACArK,IAAA,QACAsB,YAAA,sCAAAvF,YACAgF,WAAA,SAAAnB,QAAAoB,OAAAzH,OAAAD,kBAIAqF,cAAAG,OAAA,SAAAC,eAAAC,oBACAD,eAAAsL,MAAA,0BACArK,IAAA,sBACAsB,YAAA,oDAAAvF,YACAgF,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,WAAAuG,WACAmB,OAAAgO,iBAAA,EACAhO,OAAAiO,YAAA,GAAA,SAAA5K,MACArD,OAAAgO,iBAAA,GACA,SAAAlG,UACA9H,OAAAgO,iBAAA,IAEAhO,OAAAkO,SAAA,UAEA7E,MAAA,yBACArK,IAAA,WACAsB,YAAA,yCAAAvF,YACAoT,QACAC,WAAA,KACAC,YAAA,MAEAtO,WAAA,SAAAnB,QAAAoB,OAAAzH,OAAAD,WAAAgW,cAEAtO,OAAAoO,WAAAE,aAAAF,WACApO,OAAAqO,YAAAC,aAAAD,YACArO,OAAAoO,YACA7V,OAAAK,GAAA,+BAKA+E,cAAAG,OAAA,SAAAC,eAAAC,oBACAD,eAAAsL,MAAA,yBACArK,IAAA,qBACAsB,YAAA,mDAAAvF,YACAgF,WAAA,SAAAnB,QAAAoB,OAAAzH,OAAAD,WAAAuG,UAAA0P,yBACAvO,OAAAkO,SAAA,oBACAlO,OAAAwO,gBAAA,WACA,GAAAC,SAAAnX,UAAA,WAEAmX,SACAzO,OAAA0O,iBAAA,WAEA1O,OAAA2O,gCAGA3O,OAAA2O,6BAAA,WAEA,GAAAlP,eAAAZ,UAAAa,MACAY,YAAA,sDAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YACA0H,OAAA4O,UAAA,EACA5O,OAAA6O,WAAA,WACA7O,OAAA4O,UAEAL,wBAAAO,UAAA,YAAA,EAAA5T,uBAGAuE,cAAAS,QAAA,UACAF,OAAA0O,iBAAA,YAEA1O,OAAA+O,aAAA,WAIA/O,OAAA4O,UAEAL,wBAAAO,UAAA,YAAA,EAAA5T,sBAEA,IAAA8D,KAAAzG,OAAAgR,KAAA,wBAAAC,UAAA,aACAnN,QAAAqD,KAAAV,IAAA,WAEAgB,OAAAgP,UAAA,WACAhP,OAAA4O,UAEAL,wBAAAO,UAAA,YAAA,EAAA5T,sBAEA,IAAA8D,KAAA,wEACA3C,QAAAqD,KAAAV,IAAA,oBAQArB,cAAAG,OAAA,SAAAC,eAAAC,oBACAD,eAAAsL,MAAA,uBACArK,IAAA,mBACAsB,YAAA,iDAAAvF,YACAgF,WAAA,SAAAC,OAAAzH,OAAAD,WAAAuG,WAEAmB,OAAAiP,iBAAA,WACA,GAAAxP,eAAAZ,UAAAa,MC9LAY,YAAA,mDAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,WAAAE,UACAwH,OAAAkP,eAAA,EACAlP,OAAAmP,cAAA,EACAnP,OAAA4G,QAAA,GACA5G,OAAAoP,cAAA,GACApP,OAAAqP,UAAA,WACArP,OAAAkP,gBAGAlP,OAAAoP,cAAA,GACApP,OAAAkP,eAAA,EACAlP,OAAAmP,cAAA,EACAnP,OAAAsP,cAAA,SAAAxH,UAGA9H,OAAAkP,eAAA,EACAlP,OAAAmP,cAAA,ECrBAnP,OAAA4G,QAAA,2EACA,SAAAkB,UACA9H,OAAAoP,cAAA,iEAEAvT,wCAEAmE,OAAA6O,WAAA,WAEApP,cAAAS,QAAA,eAKAF,OAAAuP,iBAAA,WACAvP,OAAAwP,iBAAA,WACAxP,OAAA6F,WAAA,SACA7F,OAAAyP,eAAA,EACAzP,OAAA0P,kBACA1P,OAAA2P,aAAA,WACAC,qBAAA1P,WAEAF,OAAA+H,oBAAA,WACA6H,qBAAA1P,UAGA,IAAA0P,sBAAA/Q,UAAAa,MACAY,YAAA,2DAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAW,MAAAR,OACAF,SAAArD,6BC7BAuD,QAAA6O,WAAA,WAEAe,qBAAA1P,QAAA,cAIAF,OAAA6P,eAAA,WACA7P,OAAA8P,iBAAA,IAAAxY,UAAA,iBACA,OAAA0I,QAAA+P,IAAAC,YAGAhQ,QAAAiQ,2BAKAjQ,QAAAkQ,uBAEAlQ,OAAAmQ,mBAAA,WACA,GAAAC,UAAApQ,OAAA8P,iBAAA,IAAAxY,UAAA,iBACA,OAAA0I,QAAAqQ,KAAAD,aAQApQ,QAAAsQ,wBALAtQ,QAAAuQ,iBAAAvQ,OAAAsQ,oBAOAtQ,OAAAwQ,qBAAA,WAEA,GAAA/Q,eAAAZ,UAAAa,MACAY,YAAA,gDAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,OAEAtF,OAAAoP,cAAA,KACApP,OAAAsE,QACAxH,SAAA,KACA2T,SAAA,KACAC,YAAA,KACAC,mBAAA,MAEA3Q,OAAA6O,WAAA,WAEApP,cAAAS,QAAA,WAEAF,OAAA4Q,eAAA,WACA5Q,OAAAoP,cAAA,IAGA,IAAAyB,WAAA7Q,OAAAsE,OAAAxH,SACAgU,UAAA9Q,OAAAsE,OAAAmM,SACAM,aAAA/Q,OAAAsE,OAAAoM,YACAM,oBAAAhR,OAAAsE,OAAAqM,oBACAI,cAAAA,aAAAjZ,OAAA,EACAkI,OAAAoP,cAAA,uDACA2B,eAAAC,oBACAhR,OAAAoP,cAAA,kCAEA9J,OACA2L,OAAA,MClEAjS,IAAA,YACAqE,KAAAyH,KAAAoG,WACApU,SAAA+T,UACAJ,SAAAK,UACAJ,YAAAK,eAEAI,SAAAC,eAAA,sBACAC,KAAA,SAAAvJ,UACA,YAAAA,SAAAzE,KAAAkD,QAEAvG,OAAAsR,+BAAAT,WACApR,cAAAS,QAAA,WAGAF,OAAAoP,cAAA,UAAAtH,SAAAzE,KAAAkO,OAEA,SAAAzJ,UAEA9H,OAAAoP,cAAA,UAAAtH,gBAOA9H,OAAAsR,+BAAA,SAAAxU,UAEA,GAAA2C,eAAAZ,UAAAa,MACAY,YAAA,wDAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,QAEAA,OAAAlD,SAAAA,SACAkD,OAAA6O,WAAA,WAEApP,cAAAS,QAAA,eAKAF,OAAAwR,iBAAA,WACA,GAAA/R,eAAAZ,UAAAa,MACAY,YAAA,4DAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,WAAAE,UACAwH,OAAAyR,cAAA,yDACAzR,OAAA0R,oBAAA,+GACA1R,OAAA2R,mBAAA,0BACA3R,OAAA4R,kBAAA,mEACA5R,OAAAoP,cAAA,KACApP,OAAA6R,mBAAA,EACA7R,OAAA6O,WAAA,WACApP,cAAAS,QAAA,WAEAF,OAAA8R,eAAA,WAGA9R,OAAAoP,cAAA,KACApP,OAAA6R,mBAAA,EAGA7R,OAAA+R,sBACAzM,OACA2L,OAAA,OACAjS,IAAA,aACAqS,KAAA,SAAAvJ,UAEAtP,SAAA,WAEA8E,qBAAA,EACA/E,OAAAK,GAAA,kBACAkD,6CACA,SAAAgM,UAEA9H,OAAAgS,uBACAhS,OAAA4R,kBAAA,KACA5R,OAAAoP,cAAA,oBACApP,OAAA6R,mBAAA,EACA/Y,mBAAA,MAGAA,mBAAA,GACAkH,OAAA8R,qBAIA9R,OAAAiS,oBAAA,WAEA,GAAAxS,eAAAZ,UAAAa,MACAY,YAAA,sDAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,QACAA,OAAAkS,mBAAA,WAEAzS,cAAAS,QAAA,WAEAF,OAAA8R,eAAA,WACA9R,OAAAwR,mBACA/R,cAAAS,QAAA,oBAQAvC,cAAAG,OAAA,SAAAC,eAAAC,oBACAD,eAAAsL,MAAA,OACArK,IAAA,GACA8K,YAAA,EACAxJ,YAAA,iCAAAvF,YACA0K,SAAArN,aAAAA,cACA2H,WAAA,SAAAnB,QAAAoB,OAAAzH,OAAAoG,UAAArG,WAAAgN,MAAAzG,UAAAxG,GAAA8Z,KAAA3Z,SAAA4Z,yBAAA7D,yBAEAzV,mBAAA,GACAkH,OAAAqS,iBAAA,WAAAhW,OAAAC,SAAAuQ,SACAtP,wBACAyC,OAAAsS,cAAA/U,uBACAyC,OAAAsI,iBAAA,GAEAtI,OAAAsI,iBAAA,EAEAtI,OAAAuS,WAAA,EACAvS,OAAAwS,eACAxS,OAAAyS,aACAzS,OAAA0S,aACA1S,OAAA2S,mBACA3S,OAAA4S,QAAA,EACA5S,OAAA6S,WACA7S,OAAA8S,cACA9S,OAAA+S,SAAA,EACA/S,OAAA+P,KAAA,EACA/P,OAAA6J,SAAA,EACA7J,OAAAgT,SAAA,GACAhT,OAAAiT,YAAA,GACAjT,OAAAc,WAAA,EACAd,OAAAqQ,KAAA,EACArQ,OAAAtD,WAAAA,WACAsD,OAAAkT,oBACAlT,OAAAmT,mBACAnT,OAAAoT,yBACApT,OAAAqT,+BACArT,OAAAsT,sBACAtT,OAAAuT,wBACAvT,OAAAwT,kBAAA,EACAxT,OAAAyT,oBACAzT,OAAA0T,oBACA1T,OAAA2T,oBACA3T,OAAA4T,qBACA5T,OAAA6T,uBACA7T,OAAA8T,WAAA3B,KAAA4B,mBAAA1X,OAAAC,SAAAuQ,SAAA,KAAAxQ,OAAAC,SAAAoQ,SAAA,SACA1M,OAAAgU,QAAA7B,KAAA4B,mBAAA,WAAA1X,OAAAC,SAAAoQ,SAAA,QACA1M,OAAAiU,QAAA9B,KAAA4B,mBAAA,UAAA1X,OAAAC,SAAAoQ,UACA1M,OAAAkU,SAAA/B,KAAA4B,mBAAA,WAAA1X,OAAAC,SAAAoQ,SAAA,SACA1M,OAAAmU,YAAAhC,KAAA4B,mBAAA1X,OAAAC,SAAAuQ,SAAA,KAAAxQ,OAAAC,SAAAoQ,SAAA,SACA1M,OAAAoU,eAAA,EACApU,OAAAqU,wBAAA,EACArU,OAAAsU,qBACAtU,OAAAuU,gBAAA,EAEAvU,OAAAwU,iBAAA,EACAxU,OAAAyU,uBAAA,EACAzU,OAAAuK,aAAA,WACAvK,OAAAuS,WAAA,GAEAvS,OAAA0U,YAAA,WACA,MAAA1U,QAAAuS,WAEAvS,OAAA2U,WAAA,WACA,MAAA3U,QAAA4S,QAAA,GAEA5S,OAAA4U,YAAA,WAEA,OAAA,GAEA5U,OAAA6U,sBAAA,WAEA,IAAA7U,OAAAwT,iBAAA,CAEAxT,OAAAwT,kBAAA,CACA,KAAA,GAAAsB,IAAA,EAAAC,KAAA/U,OAAAgV,SAAAld,OAAAid,KAAAD,GAAAA,KAAA,CAEA,GAAAG,UAAAjV,OAAAgV,SAAAF,IAEAI,SAAAD,SAAAE,OACA,IAAAD,UAAAA,SAAA,GAAA,CAIA,IAAA,GAHAE,wBAAA,EACAC,uBAAA,EACAC,cAAAJ,SAAApd,OACAyd,GAAA,EAAAD,cAAAC,GAAAA,KAAA,CACA,GAAAC,cAAAxV,OAAAyV,iBAAAP,SAAAK,KAAAG,IACAC,eAAA3V,OAAAyV,iBAAAP,SAAAK,KAAAK,KAEA,aAAAJ,eAEAJ,uBAAA,GAEA,YAAAO,iBAEAN,uBAAA,GAKArV,OAAA6V,iBAAAZ,SAAAzd,OACA8O,QAAA8O,sBACAU,QAAAT,uBAEAJ,SAAA3O,QAAA8O,sBAEAH,SAAAa,QAAAT,uBAKArV,OAAAwT,kBAAA,IAEAxT,OAAA+V,UAAA,SAAAC,eAMAhW,OAAAgV,WACAhV,OAAAyS,UAAAzS,OAAAgV,SAAAiB,OAAA,SAAAhB,UACA,OAAAA,SAAAvC,YAGA1S,OAAA0S,UAAA1S,OAAAgV,SAAAiB,OAAA,SAAAhB,UACA,MAAAA,UAAAvC,YAGA1S,OAAA2S,gBAAA3S,OAAA0S,UAAAuD,OAAA,SAAAhB,UACA,MAAAA,UAAAiB,iBAAA,KAAAjB,SAAAiB,kBAIAlW,OAAA4S,QAAA5S,OAAA2S,gBAAA7a,OACAkI,OAAAmW,QAAAnW,OAAAyS,UAAAwD,OAAA,SAAAhB,UACA,MAAAA,UAAAkB,UAEAH,eACAhW,OAAAoW,gBAIApW,OAAA0O,iBAAA,SAAA2H,WACA,GAAA,YAAAA,UACA,GAAAC,UAAAC,UAAAC,cAAAte,QAAA,WAAA,GAAA,CAEA,GAAAue,KAAApa,OAAAqD,KAAAM,OAAA8T,WAAA,SACA2C,KAAAC,YAEAne,QAAAK,GAAA,yBACAN,WAAA2R,uBAAA,MAGA,IAAA,UAAAoM,UAGA9d,OAAAK,GAAA,uBACAN,WAAA2R,uBAAA,MACA,IAAA,SAAAoM,UAAA,CAGA,GAAAI,KAAApa,OAAAqD,KAAAM,OAAAgU,QAAA,SACAyC,KAAAC,YACA,IAAA,aAAAL,UACA,GAAA,WAAAha,OAAAC,SAAAuQ,SAAA,CACA,GAAA4J,KAAApa,OAAAqD,KAAAM,OAAAmU,YAAA,SACAsC,KAAAC,YAEA,IAAAJ,UAAAC,UAAAC,cAAAte,QAAA,WAAA,GAAA,CAEA,GAAAue,KAAApa,OAAAqD,KAAAM,OAAAmU,YAAA,SACAsC,KAAAC,YAEAne,QAAAK,GAAA,0BC9RAN,WAAA2R,uBAAA,GAKAjK,OAAA2W,yBAAA,aAKA3W,OAAA4W,aAAA,WAEA,QAAAC,mBAEAvR,OACA2L,OAAA,MACAjS,IAAA,0BAAA,GAAA/F,OAAAU,YACA0X,KAAA,SAAAvJ,UACA9H,OAAAgV,SAAAlN,SAAAzE,KAGArD,OAAA+V,WAAA,IACA,SAAAjO,aAIA,QAAAgP,uBAEAxR,OACA2L,OAAA,MACAjS,IAAA,qBAAA,GAAA/F,OAAAU,YACA0X,KAAA,SAAAvJ,UACA,GAAAiP,MAAAjP,SAAAzE,IACA,aAAA0T,KAAAxQ,SACAvG,OAAA+P,KACAiH,KAAAD,KAAAC,KAAAD,KAAAC,KAAA,GACAtE,UAAAqE,KAAArE,UAAAqE,KAAArE,UAAA,GACA1C,QAAA+G,KAAA/G,QAAA+G,KAAA/G,QAAA,KAMA6G,mBACA,SAAA/O,UAGA+O,oBAGA,QAAAI,sBACAjX,OAAAkX,cAAA,EAEA5R,OACA2L,OAAA,MACAjS,IAAA,qBAAA,GAAA/F,OAAAU,YACA0X,KAAA,SAAAvJ,UACA9H,OAAAwS,YAAA1K,SAAAzE,KACArD,OAAAkX,cAAA,EAEAJ,uBACA,SAAAhP,UAEA9H,OAAAkX,cAAA,EACAJ,wBAGA,QAAAK,sBACA7R,OACA2L,OAAA,MACAjS,IAAA,qBAAA,GAAA/F,OAAAU,YACA0X,KAAA,SAAAvJ,UACA,OAAAA,SAAAzE,KAAAmD,SAEAxG,OAAAqQ,IAAA,SAAAvI,SAAAzE,KAAAmD,QAGAyQ,sBACA,SAAAnP,UAGAmP,uBAGA,QAAAG,iBAEA9R,OACA2L,OAAA,MACAjS,IAAA,qBAAA,GAAA/F,OAAAU,YACA0X,KAAA,SAAAvJ,UACA9H,OAAAqX,OAAAvP,SAAAzE,KAEArD,OAAAqX,OAAAC,MAAApf,QAAAyE,oBAAA,GACAqD,OAAA6J,SAAA,EAEA7J,OAAA6J,SAAA,CAGA,IAAA0N,QAAAvX,OAAAqX,OAAAE,OAAA3f,MAAA,KAEA4f,KAAAD,OAAA,GAAA/a,OAAA,EAAA+a,OAAA,GAAAzf,OAAA,GACA2f,MAAAF,OAAA,GAAA/a,OAAA,EAAA+a,OAAA,GAAAzf,OAAA,GACA4f,QAAAH,OAAA,GAAA/a,OAAA,EAAA+a,OAAA,GAAAzf,OAAA,GACA6f,aAAA,GAAAH,KAAA,GAAA,GAAA,IAAA,GAAAC,MAAA,GAAA,IAAA,GAAAC,QAAA,IACAE,QAAA,GAAA3e,MAAA,GAAAA,MAAA0e,aACA3X,QAAA6X,cAAAD,QAAAje,UAEAwd,sBACA,SAAArP,UAEAqP,uBAIAC,iBAEAzZ,cAAAma,gBAAA9X,OAAAsF,MAAAhN,WAAAC,OAAA6Z,yBAAA7D,yBACA5Q,cAAAoa,mBAAA/X,OAAAsF,MAAAjN,GAAA+Z,0BACAzU,cAAAqa,qBAAAhY,OAAAnB,UAAAuT;AACAzU,cAAAsa,mBAAAjY,OAAAsF,MAAAzG,UAAAuT,0BACAzU,cAAAua,uBAAAlY,OAAAsF,MAAA/M,OAAAsG,UAAAuT,0BACAzU,cAAAwa,mBAAAnY,OAAAzH,OAAA+M,MAAAhN,WAAAuG,UAAArG,SAAA4Z,0BACAzU,cAAAya,sBAAApY,OAAAsF,MAAA/M,OAAAsG,UAAArG,SAAA4Z,yBAAA7D,yBACA5Q,cAAA0a,uBAAArY,OAAAnB,UAAAyG,MAAA8M,0BACAzU,cAAA2a,4BAAAtY,OAAAsF,MAAA/M,OAAAC,SAAAoG,SACAoB,OAAAuY,iBAAA,kBAAA,WACAvY,OAAA+V,WAAA,KAEA/V,OAAAX,IAAA,gBAAA,SAAAmB,OACAgY,SAAA,EACAvS,EAAA,sBAAAwS,OACAC,SAAAlY,MAAAmY,YAAAtZ,IAAA,gBAAA,SAAAC,MAAAsZ,OAAAC,QAEAL,SAGAlZ,MAAAmJ,qBAGAzI,OAAAX,IAAA,kBAAA,WACA4G,EAAA,sBAAA6S,OACAJ,aAEApgB,WAAA+G,IAAA,uBAAA,SAAAC,OACAhH,WAAAygB,kBACAxgB,OAAAK,GAAA,oBAGAoH,OAAA2W,2BAIA3W,OAAA4W,oBAMAjZ,cAAAG,OAAA,SAAAC,eAAAC,oBACAD,eAAAsL,MAAA,eACArK,IAAA,eACAsB,YAAA,yCAAAvF,YACAgF,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,WAAAiW,yBAIA,QAAAyK,6BACA,GAAAC,YAAA,EACA,KAAAphB,EAAA,EAAAA,EAAA6F,2BAAA5F,OAAAD,IACA,IAAAP,UAAAoG,2BAAA7F,IAAA,CACAohB,WAAAphB,EACAqhB,cAAA,CACA,OAGA,MAAAD,YAEA,QAAAE,kBAAAC,SACAC,WAAAL,4BACA,KAAAK,YAEA/gB,WAAAygB,kBAAA,EACAxgB,OAAAK,GAAA,sBAGAoH,OAAAsZ,YAAA,EACAvL,WAAA,WACA/N,OAAAuZ,uBAAA/b,mBAAA6b,YACArZ,OAAAwZ,yBAAA9b,2BAAA2b,YAIAD,SACApZ,OAAAiJ,UAEA,OA/BA,GAAAoQ,YAAA,EACArZ,QAAAsZ,YAAA,EAiCAtZ,OAAAoM,OAAA,WACAxP,iBACAtE,WAAAI,UAAA,EACAH,OAAAK,GAAA,qBAEAoH,OAAAyZ,MAAA,WAEAlL,wBAAAO,UAAA9O,OAAAwZ,yBAAA,OAAAte,uBAEAie,kBAAA,IAEAvc,cAAAE,UAEAvE,OAAAK,GAAA,oBAGAugB,kBAAA,QAIAxb,cAAAG,OAAA,SAAAC,eAAAC,oBACAD,eAAAsL,MAAA,oBACArK,IAAA,oBACAsB,YAAA,wCAAAvF,YACAgF,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YACAsE,cAAAE,UACAvE,OAAAK,GAAA,oBAEAE,mBAAA,GACAkH,OAAAuF,YAAA,2HACAvF,OAAAwF,aAAA,EAEAuI,WAAA,WACA/N,OAAA0Z,yBACA,UAIA/b,cAAAG,OAAA,SAAAC,eAAAC,oBACAD,eAAAsL,MAAA,wBACArK,IAAA,wBACAsB,YAAA,kDAAAvF,YACAgF,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YACAsE,cAAAE,UACAvE,OAAAK,GAAA,oBAEAoH,OAAAuS,UAAA,WACAha,OAAAK,GAAA,kCAKA+E,cAAAG,OAAA,SAAAC,eAAAC,oBAEAD,eAAAsL,MAAA,uBACArK,IAAA,uBACAsB,YAAA,sDAAAvF,YACAyF,OAAA,EACAT,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YACA0H,OAAA6F,WAAA,OACA7F,OAAA+F,kBAAA,EACA/F,OAAAgG,0BAAA,EACAhG,OAAA2P,aAAA,WACApX,OAAAK,GAAA,6BAEAoH,OAAA+H,oBAAA,WACAxP,OAAAK,GAAA,iCAKA+E,cAAAG,OAAA,SAAAC,eAAAC,oBACAD,eAAAsL,MAAA,iBACArK,IAAA,iBACAsB,YAAA,2CAAAvF,YACAgF,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YACAsE,cAAAE,UACAvE,OAAAK,GAAA,oBAEAoH,OAAAuP,iBAAA,WACAvP,OAAAwP,iBAAA,WACAjX,OAAAK,GAAA,6BAGAoH,OAAA2Z,qBAAA,WACArhB,WAAAI,UAAA,EACAH,OAAAK,GAAA,kCAKA+E,cAAAG,OAAA,SAAAC,eAAAC,oBACAD,eAAAsL,MAAA,YACArK,IAAA,YACAsB,YAAA,sCAAAvF,YACAgF,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YACAG,aAAAmE,cAAAE,UACAvE,OAAAK,GAAA,yBAKA+E,cAAAG,OAAA,SAAAC,eAAAC,oBACAD,eAAAsL,MAAA,YACArK,IAAA,GACA8K,YAAA,EACAxJ,YAAA,0CAAAvF,YACAgF,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,WAAAuG,WACA/F,mBAAA,MAEAuQ,MAAA,wBACArK,IAAA,wBACAsB,YAAA,kDAAAvF,YACAgF,WAAA,SAAAnB,QAAAoB,OAAAzH,OAAAD,YACAsE,oBAEAyM,MAAA,wBACArK,IAAA,wBACAsB,YAAA,kDAAAvF,YACAgF,WAAA,SAAAnB,QAAAoB,OAAAzH,OAAAD,YACAsE,oBAEAyM,MAAA,qBACArK,IAAA,qBACAsB,YAAA,+CAAAvF,YACAgF,WAAA,SAAAnB,QAAAoB,OAAAzH,OAAAD,YACAsE,oBAEAyM,MAAA,uBACArK,IAAA,uBACAsB,YAAA,iDAAAvF,YACAgF,WAAA,SAAAnB,QAAAoB,OAAAzH,OAAAD,YACAsE,oBAEAyM,MAAA,6BACArK,IAAA,6BACAsB,YAAA,uDAAAvF,YACAgF,WAAA,SAAAnB,QAAAoB,OAAAzH,OAAAD,YACAsE,sBAIAe,cAAAG,OAAA,SAAAC,eAAAC,oBACAD,eAAAsL,MAAA,WACArK,IAAA,GACA8K,YAAA,EACAxJ,YAAA,qCAAAvF,YACAgF,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,WAAAuG,WACA/F,mBAAA,GACAR,WAAAI,UAAA,EACAsH,OAAA4Z,kBACA5Z,OAAAc,WAAA,EACAd,OAAA6Z,iBAAA,SAAAC,UACA9Z,OAAA+Z,WAAAD,WAEA9Z,OAAAga,oBAAA,WACApd,eAAAE,SAAAkD,OAAA4Z,eAAA9c,UACAxE,WAAAI,UAAA,EAIAJ,WAAA2hB,aACAnd,SAAAkD,OAAA4Z,eAAA9c,SACA2T,SAAAzQ,OAAA4Z,eAAAnJ,UAEAnY,WAAAygB,iBAGAxgB,OAAAK,GAAA,uBAFAL,OAAAK,GAAA,mBAKAoH,OAAAka,UAAA,WACA,GACAC,SAAA,OACAC,KAAA,uBACA9U,QACA2L,OAAAkJ,QACAnb,IAAAob,KACA/W,KAAAyH,KAAAoG,YACAC,SAAAC,eAAA,sBACAC,KAAA,SAAAvJ,UACA,YAAAA,SAAAzE,KAAAkD,QACA3J,eAAAE,SAAA,aACAxE,WAAAI,UAAA,EACAJ,WAAAygB,iBAGAxgB,OAAAK,GAAA,uBAFAL,OAAAK,GAAA,mBAMAoH,OAAAqa,WAAA,GAEA,SAAAvS,UACA9H,OAAAqa,WAAA,KAGAra,OAAAsa,qBAAA,WACAhd,oBC5YA0C,OAAAka,YAGAla,OAAAqa,WAAA,EAEA/c,qBAAA,GAEA0C,OAAAua,2BAAA,WAEA,IADA7c,2BAAA5F,OAAA,EACAD,EAAA,EAAAA,EAAA2F,mBAAA1F,OAAAD,IAAA,CACA,GAAA2iB,eAAA,EACA3iB,GAAA4F,4BAAA3F,SACA0iB,cAAA/c,4BAAA5F,GAEA,IAAA4iB,iBAAAjd,mBAAA3F,GAAA6iB,OAAAF,cAIAC,iBAAAA,gBAAAjE,cAAAjW,QAAA,iBAAA,IACA7C,2BAAAW,KAAAoc,mBAKAza,OAAA2a,wBAAA,WACA,GAAAC,gBAAA,CACA,KAAA/iB,EAAA,EAAAA,EAAA6F,2BAAA5F,OAAAD,IACA,IAAAP,UAAAoG,2BAAA7F,IAAA,CACA+iB,eAAA,CACA,OAGAtiB,WAAAygB,iBAAA6B,eAGA5a,OAAA6a,eAAA,WACAvV,OACA2L,OAAA,MACAjS,IAAA,6BAAA,GAAA/F,OAAAU,YACA0X,KAAA,SAAAvJ,UAEA,IACA,YAAAA,SAAAzE,KAAAkD,SAEAhJ,uBAAAuK,SAAAzE,KAAAmD,OAAAsU,UACAtd,mBAAAsK,SAAAzE,KAAAmD,OAAAuU,WACAtd,4BAAAqK,SAAAzE,KAAAmD,OAAAwU,oBACAhb,OAAAua,6BACAva,OAAA2a,2BAEA,MAAAtO,MAEArM,OAAAsa,wBACA,SAAAxS,UAGA9H,OAAAsa,0BAGAta,OAAA6a,sBAIAld,cAAAG,OAAA,SAAAC,eAAAC,oBACAD,eAAAsL,MAAA,iBACArK,IAAA,iBACAsB,YAAA,2CAAAvF,YACAgF,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,WAAAE,SAAAoG,SCnEAhC,iBAEAoD,OAAA8I,WAAA,EAEA9I,OAAAwF,aAAA,EAEAxF,OAAAib,QAAA,EAEAjb,OAAAkb,WAAA,oBAEAlb,OAAAmb,mBAAA,uDAEAnb,OAAAob,WAAA,SAAAC,QACA,IAAAA,OAAAC,SAEAtb,OAAAub,MAAAze,UAAAkD,OAAAub,MAAA9K,UACAzQ,OAAAub,SAEAvb,OAAAub,MAAA,WAEAvb,OAAAib,QAAA,CACA,IAAAO,wBAAA,SAAAC,WACAzb,OAAA4Z,gBCtBA9c,SAAAkD,OAAAub,MAAAze,SACA2T,SAAAzQ,OAAAub,MAAA9K,SAEA,IAAAI,WAAA7Q,OAAA4Z,eAAA9c,SACAgU,UAAA9Q,OAAA4Z,eAAAnJ,SACAiL,QAAA,OACAD,aACAC,QAAA,QAEApW,OACA2L,OAAA,OACAjS,IAAA,YACAqE,KAAAyH,KAAAoG,WACApU,SAAA+T,UACAJ,SAAAK,UCdA4K,QAAAA,UAEAvK,SAAAC,eAAA,sBACAC,KAAA,SAAAvJ,UAIA,YAAAA,SAAAzE,KAAAkD,OACAuB,SAAAzE,KAAAsY,oBAAA,GAKA3b,OAAAib,QAAA,EACAjb,OAAAga,wBAMAjM,WAAA,WACAyN,wBAAA,IACAlgB,oCACA0E,OAAAkb,WAAA,+BCnBAlb,OAAA6Z,iBAAA,wBAEA,SAAA/R,UAIA,KAAAA,SAAAvB,OACAvG,OAAA6Z,iBAAA,uBACA,MAAA/R,SAAAvB,OAIAwH,WAAA,WACAyN,wBAAA,IACAlgB,oCACA,KAAAwM,SAAAvB,QACAvG,OAAAmb,mBAAA,wEACAnb,OAAA6Z,iBAAA,4BCpBA9L,WAAA,WACAnP,QAAAtC,SAAA6D,UACA,OAEAH,OAAAmb,mBAAA,+DACAnb,OAAA6Z,iBAAA,4BAGA9L,WAAA,WACAnP,QAAAtC,SAAA6D,UACA,QCRAqb,yBAAA,IAEAxb,OAAA6I,OAAA,WAEA7I,OAAAwF,aAAA,GAEAxF,OAAAX,IAAA,sBAAA,WAEAW,OAAAib,QAAA,EACAjb,OAAA4b,yBAAA,CACA,IAAAjT,UAAA1C,EAAA,qBACA0C,UAAAQ,SAAA,SACA4E,WAAA,WACApF,SAAAS,YAAA,UACA,KACApJ,OAAAub,MAAA9K,SAAA,KACA9H,SAAAQ,SAAA,WACAR,SAAA/E,KAAA,SAAAoF,GAAA,QAAA,WACAL,SAAAS,YAAA,WACApJ,OAAA4b,yBAAA,MAGA5b,OAAAX,IAAA,2BAAA,WAEAW,OAAAib,QAAA,EACAjb,OAAA6b,iBAAA,EACArjB,SAAA,WACAwH,OAAA6b,iBAAA,GACA,KACA5V,EAAA,eAAArC,KAAA,SAAAoF,GAAA,QAAA,WACAhJ,OAAAiJ,OAAA,WACAjJ,OAAA6b,iBAAA,aAOAle,cAAAG,OAAA,SAAAC,eAAAC,oBACAD,eAAAsL,MAAA,mBACArK,IAAA,mBACAsB,YAAA,6CAAAvF,YACAgF,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,WAAAuG,UAAA0P,yBC7CAvO,OAAA8b,gBAAA,WAEAvN,wBAAAO,UAAA,WAAA,EAAA5T,uBACA3C,OAAAK,GAAA,uBAKA+E,cAAAwX,QAAA,sBAAA,SAAA9c,IAIA,QAAA0jB,iBACA,GAAAC,YAAA3jB,GAAA4jB,OAEA,OADAC,qBAAA7d,KAAA2d,YACAA,WAAAG,QAEA,QAAA5c,oBACA3B,QAAAwe,QAAAF,oBAAA,SAAAG,aACAA,YAAAF,QAAAG,eAAA,EACAD,YAAA5W,YAGAyW,oBAAApkB,OAAA,EAEA,QAAAykB,eAAAzU,UAEA,IAEA,GAAA,gBAAAA,UAAAhK,OAAA0P,QACA,MACA,IAAApM,SAAA0G,SAAAhK,OAAA0P,QACA,MAGA,IAAAgP,cAAA,GACAC,MAAA,CACA7e,SAAAwe,QAAAF,oBAAA,SAAAG,aACAA,YAAAF,UAAArU,SAAAhK,OAAA0P,UACAgP,aAAAC,OAEAA,OAAA,IAEAD,aAAA,IAEAN,oBAAAQ,OAAAF,aAAA,GAEA,MAAAnQ,OApCA,GAAA6P,uBAuCA,QACAH,cAAAA,cACAxc,iBAAAA,iBACAgd,cAAAA,iBAGA5e,cAAAW,QAAA,2BACA,aACA,KACA,sBACA,SAAAhG,WAAAD,GAAAyG,qBACA,OACA6d,QAAA,SAAA7e,QAkBA,MAhBAA,QAAAA,WACA,gBAAAA,QAAAkB,KACAlB,OAAAkB,IAAA9G,QAAA,YAAA,KAMA4F,OAAA0P,QAAA7R,mCAGAyF,SAAAtD,OAAA0P,UAGA1P,OAAA0P,QAAA1O,oBAAAid,iBAEAje,QAEAgK,SAAA,SAAAA,UAIA,MAFAvO,uBAAA,GACAuF,oBAAAyd,cAAAzU,UACAA,UAEA8U,cAAA,SAAAC,WAGA,GAAAA,UAAA/e,OAAA0P,QAAA8O,cAGA,MAAAjkB,IAAA4jB,QAAAE,OASA,IAPArd,oBAAAyd,cAAAM,WAEAtjB,qBADA,KAAAsjB,UAAAtW,QAAA,MAAAsW,UAAAtW,QAAA,MAAAsW,UAAAtW,QACA,GAGA,GAEA,KAAAsW,UAAAtW,QAWAnN,4BAAA,CACA,GAAA0jB,WAAAljB,0BACAkjB,YACAxkB,WAAAyhB,WAAA,yBAIA,MAAA1hB,IAAAQ,OAAAgkB,gBAKAlf,cAAAW,QAAA,2BACA,QACA,SAAAgH,OACA,GAAAiJ,2BCvGA,ODwGAA,yBAAAwO,SAAA,SAAAC,GACA,OAAAC,MAAAtb,WAAAqb,KAAAE,SAAAF,IAEAzO,wBAAA4O,IAAA,SAAAH,EAAAI,MAAAC,GCrIA,MDsIAA,GAAAA,GAAA,IACAL,GAAA,GCvIAA,EAAAllB,QAAAslB,MAAAJ,EAAA,GAAAM,OAAAF,MAAAJ,EAAAllB,OAAA,GAAAylB,KAAAF,GAAAL,GAEAzO,wBAAAiP,aAAA,SAAAC,SACA,GAAAC,IAAA,yBACAC,MAAA,8FACAC,aAAA,wDAAAF,GAAA,wBACAG,UAAAC,OAAAH,MAAA,UAAAC,aAAA,IAAAD,MAAA,MAAA,KACAI,OAAAN,QAAAO,MAAAH,UACA,OAAAE,SAEAxP,wBAAA0P,IAAA,SAAAL,cACA,MAAAA,cAAAphB,OAAA,EAAAohB,aAAA9lB,OAAA,GAAAyI,QAAA,uBAAA,MAEAgO,wBAAAO,UAAA,SAAAvX,MAAA2mB,OAAAC,QACA,GAAAC,GAAA,GAAAnlB,KACAmlB,GAAAC,QAAAD,EAAAzkB,UAAA,GAAAwkB,OAAA,GAAA,GAAA,IACA,IAAAG,SAAA,WAAAF,EAAAG,aACA7mB,UAAAC,OAAAJ,MAAA,IAAA2mB,OAAA,KAAAI,SAEA/P,wBAAAiQ,aAAA,SAAAC,iBAAAC,gBACApZ,OACA2L,OAAA,MACAjS,IAAA,oCAAA,GAAA/F,OAAAU,UACAglB,OAAA,IACAtN,KAAAoN,iBAAAC,iBAEAnQ,2BAGA5Q,cAAAW,QAAA,4BACA,QACA,YACA,aACA,SAAAgH,MAAAzG,UAAAvG,YAEA,QAAAsmB,gBACA,GAAAC,WAAA/R,KAAAC,QACA,OAAA8R,WAAAC,WAEA,QAAAC,oCAAAjX,UACA,GAAAkX,SAAA,EACAC,eAAA,EAoBA,OAnBA,KAAAnX,SAAAvB,QAAA,MAAAuB,SAAAvB,QAAA,MAAAuB,SAAAvB,QACAyY,OAAAplB,2BAGAqlB,eAFAD,OACA,KAAAlX,SAAAvB,OACA,gDACA,MAAAuB,SAAAvB,OACA,qDACA,MAAAuB,SAAAvB,OACA,qDAEA,GAGA,IAGA0Y,eAAA,iDAAAnX,SAAAvB,OAGA0Y,eAEA,QAAAC,oBAAAC,aAAAC,YAAAC,kBACA,GAAA5f,eAAAZ,UAAAa,MACAY,YAAA,mEAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACAsD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YACA0H,OAAAyR,cAAA0N,aACAnf,OAAA0R,oBAAA0N,YACApf,OAAA2R,mBAAA0N,iBACArf,OAAAsf,UAAA,EACAtf,OAAA6O,WAAA,WACApP,cAAAS,QAAA,cAzCA,GAAAkS,4BCnBA,ODiEAA,0BAAAmN,sBAAA,SAAAC,WAAAC,QAAAC,YAAAC,SAAAC,SAAAT,aAAAC,YAAAC,iBAAAQ,oBAAAC,aACA,GAAArgB,eAAAZ,UAAAa,MACAY,YAAA,mEAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACAsD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YA+BA,QAAAynB,oBACA,GAAAC,YAAA/O,OAAAuO,WACAG,aAAA,GAEAC,SAAA1U,GAAA+U,OACAL,SAAAM,YAAA,OACAF,UAAAhhB,IAAAygB,QACAO,UAAA7O,SAAAC,eAAA,oBACA4O,UAAA3c,KAAAyH,KAAAoG,UAAA0O,WAGA,QAAAJ,WACAE,eAAA,EACAM,UAAAhhB,IAAAygB,QAAA,wBAAAQ,OAAA,aAAA,GAAAhnB,OAAAU,UAEAqmB,UAAAhhB,IAAAygB,QAAA,wBAAAQ,OAAA,aAAA,GAAAhnB,OAAAU,UAGA+lB,eAAA,EACAM,UAAAhhB,IAAAygB,QAAA,wBAAAQ,OAEAD,UAAAhhB,IAAAygB,QAAA,wBAAAQ,OAKA3a,MAAA0a,WAAA3O,KAAA,SAAAvJ,UACA,YAAAA,SAAAzE,KAAAkD,QAEAjN,uBAAA,GACAumB,oBAAA/X,SAAAzE,MACA5D,cAAAS,QAAA,WACA,cAAA4H,SAAAzE,KAAAkD,QAEAjN,uBAAA,GACAumB,oBAAA/X,SAAAzE,MACA5D,cAAAS,QAAA,WAEA4H,SAAAzE,KAAA8c,eAAA,GAGA7mB,uBAAA,GACAyU,WAAAgS,iBAAAD,eE7JAxmB,uBAAA,GACA4lB,mBAAAC,aAAAC,YAAA,yBAAAtX,SAAAzE,KAAAuD,SACAnH,cAAAS,QAAA,YAGA,SAAA4H,UAEA,GAAAsY,oBAAArB,mCAAAjX,SACAsY,qBACA9mB,uBAAA,GACA4lB,mBAAAC,aAAAC,YAAAgB,oBACA3gB,cAAAS,QAAA,YCZA5G,uBAAA,GACAyU,WAAAgS,iBAAAD,gBHsFA9f,OAAAyR,cAAA0N,aACAnf,OAAA0R,oBAAA0N,YACApf,OAAA2R,mBAAA0N,iBACArf,OAAAsf,UAAA,CACA,IAAAW,QAAArB,eACAoB,WAAA/O,OAAAuO,WACAG,aAAA,GAEAC,SAAA1U,GAAA+U,OACAL,SAAAM,YAAA,QACAF,UAAAhhB,IAAAygB,QACAO,UAAA7O,SAAAC,eAAA,oBACA4O,UAAA3c,KAAAyH,KAAAoG,UAAA0O,WAGA,QAAAJ,WACAE,eAAA,EACAM,UAAAhhB,IAAAygB,QAAA,yBAAAQ,OAAA,aAAA,GAAAhnB,OAAAU,UAEAqmB,UAAAhhB,IAAAygB,QAAA,yBAAAQ,OAAA,aAAA,GAAAhnB,OAAAU,UAGA+lB,eAAA,EACAM,UAAAhhB,IAAAygB,QAAA,yBAAAQ,OAEAD,UAAAhhB,IAAAygB,QAAA,yBAAAQ,OG3GA3a,MAAA0a,WAAA3O,KAAA,SAAAvJ,UACA,GAAA,YAAAA,SAAAzE,KAAAkD,OAEAjN,uBAAA,GACAyU,WAAAgS,iBAAAD,iBAGA,IAAAhY,SAAAzE,KAAA8c,eAAA,EAAA,CAEA,GAAA/Q,eAAAtH,SAAAzE,KAAAgd,UAAA,8CACAnB,oBAAAC,aAAAC,YAAAhQ,eACA3P,cAAAS,QAAA,cAGAgf,oBAAAC,aAAAC,YAAA,yBAAAtX,SAAAzE,KAAAuD,SACAnH,cAAAS,QAAA,WAGA,SAAA4H,UAEAoX,mBAAAC,aAAAC,YAAA,qCAAAtX,SAAAvB,QACA9G,cAAAS,QAAA,gBAKAkS,yBAAAkO,wBAAA,SAAAd,WAAAC,QAAAC,YAAAC,SAAAC,SAAAW,sBAAAC,oBAAAV,aA0BA,QAAAC,oBACA,GAAAC,YAAA/O,OAAAuO,WACAG,aAAA,GAEAC,SAAA1U,GAAA+U,OACAL,SAAAM,YAAA,OACAF,UAAAhhB,IAAAygB,QACAO,UAAA7O,SAAAC,eAAA,oBACA4O,UAAA3c,KAAAyH,KAAAoG,UAAA0O,WAGA,QAAAJ,WACAE,eAAA,EACAM,UAAAhhB,IAAAygB,QAAA,wBAAAQ,OAAA,aAAA,GAAAhnB,OAAAU,UAEAqmB,UAAAhhB,IAAAygB,QAAA,wBAAAQ,OAAA,aAAA,GAAAhnB,OAAAU,UAGA+lB,eAAA,EACAM,UAAAhhB,IAAAygB,QAAA,wBAAAQ,OAEAD,UAAAhhB,IAAAygB,QAAA,wBAAAQ,OAKA3a,MAAA0a,WAAA3O,KAAA,SAAAvJ,UACA,GAAA,YAAAA,SAAAzE,KAAAkD,OAEAjN,uBAAA,GACAinB,sBAAAzY,SAAAzE,UACA,IAAA,cAAAyE,SAAAzE,KAAAkD,OAEAjN,uBAAA,GACAinB,sBAAAzY,SAAAzE,UAEA,IAAAyE,SAAAzE,KAAA8c,eAAA,EAGA7mB,uBAAA,GACAyU,WAAAgS,iBAAAD,iBACA,CAEAxmB,uBAAA,EACA,IAAA8V,eAAAtH,SAAAzE,KAAAuD,OACA4Z,qBAAApR,iBAGA,SAAAtH,UAEA,GAAAsY,oBAAArB,mCAAAjX,SACAsY,qBACA9mB,uBAAA,GACAknB,oBAAAJ,sBAGA9mB,uBAAA,GACAyU,WAAAgS,iBAAAD,gBAlFA,GAAAG,QAAArB,eACAoB,WAAA/O,OAAAuO,WACAG,aAAA,GAEAC,SAAA1U,GAAA+U,OACAL,SAAAM,YAAA,QACAF,UAAAhhB,IAAAygB,QACAO,UAAA7O,SAAAC,eAAA,oBACA4O,UAAA3c,KAAAyH,KAAAoG,UAAA0O,WAGA,QAAAJ,WACAE,eAAA,EACAM,UAAAhhB,IAAAygB,QAAA,yBAAAQ,OAAA,aAAA,GAAAhnB,OAAAU,UAEAqmB,UAAAhhB,IAAAygB,QAAA,yBAAAQ,OAAA,aAAA,GAAAhnB,OAAAU,UAGA+lB,eAAA,EACAM,UAAAhhB,IAAAygB,QAAA,yBAAAQ,OAEAD,UAAAhhB,IAAAygB,QAAA,yBAAAQ,OAiEA3a,MAAA0a,WAAA3O,KAAA,SAAAvJ,UACA,YAAAA,SAAAzE,KAAAkD,QAEAjN,uBAAA,GACAyU,WAAAgS,iBAAAD,cAGAhY,SAAAzE,KAAA8c,eAAA,GAEA7mB,uBAAA,GACAknB,oBAAA1Y,SAAAzE,KAAAgd,UAAA,0EChIA/mB,uBAAA,GACAknB,oBAAA1Y,SAAAzE,KAAAuD,WAGA,SAAAkB,UAEAxO,uBAAA,GACAknB,oBAAA,qCAAA1Y,SAAAvB,WAGA6L,yBAAAqO,kCAAA,SAAAjB,WAAAC,QAAAC,YAAAC,SAAAC,SAAAW,sBAAAC,qBACA,GAAAP,QAAArB,eACAoB,WAAA/O,OAAAuO,WACAG,aAAA,GAEAC,SAAA1U,GAAA+U,OACAL,SAAAM,YAAA,QACAF,UAAAhhB,IAAAygB,QACAO,UAAA7O,SAAAC,eAAA,oBACA4O,UAAA3c,KAAAyH,KAAAoG,UAAA0O,WAGA,QAAAJ,WACAE,eAAA,EACAM,UAAAhhB,IAAAygB,QAAA,yBAAAQ,OAAA,aAAA,GAAAhnB,OAAAU,UAEAqmB,UAAAhhB,IAAAygB,QAAA,yBAAAQ,OAAA,aAAA,GAAAhnB,OAAAU,UAGA+lB,eAAA,EACAM,UAAAhhB,IAAAygB,QAAA,yBAAAQ,OAEAD,UAAAhhB,IAAAygB,QAAA,yBAAAQ,OAIA3a,MAAA0a,WAAA3O,KAAA,SAAAvJ,UACA,YAAAA,SAAAzE,KAAAkD,QACAjN,uBAAA,GACAinB,sBAAAzY,SAAAzE,OAGAyE,SAAAzE,KAAA8c,eAAA,GH1CA7mB,uBAAA,GACAknB,oBAAA1Y,SAAAzE,KAAAgd,UAAA,0EAGA/mB,uBAAA,GACAknB,oBAAA1Y,SAAAzE,KAAAuD,WAGA,SAAAkB,UAEAxO,uBAAA,GACAknB,oBAAA,qCAAA1Y,SAAAvB,WAGA6L,4BAIAzU,cAAA2a,4BAAA,SAAAtY,OAAAsF,MAAA/M,OAAAC,SAAAoG,SACAoB,OAAAsP,cAAA,SAAAoR,SAAAC,OAAAC,eAGA5gB,OAAA+R,sBAEAzM,OACA2L,OAAA,MACAjS,IAAA,WACAwO,QAAA/R,sCACA4V,KAAA,SAAAvJ,UACAtP,SAAA,WAEA8E,qBAAA,EAEA/E,OAAAK,GAAA,kBACAgoB,eACAC,EAAAC,WAAAJ,WACAA,SAAA5Y,WAEA,SAAAA,UACA9H,OAAAgS,uBACA6O,EAAAC,WAAAH,SACAA,OAAA7Y,aAIA9H,OAAA+gB,eAAA,WACA/gB,OAAAkX,cAAA,EAEA5R,OACA2L,OAAA,MACAjS,IAAA,qBAAA,GAAA/F,OAAAU,YACA0X,KAAA,SAAAvJ,UACA9H,OAAAwS,YAAA1K,SAAAzE,KACArD,OAAAkX,cAAA,GAEA,SAAApP,UAEA9H,OAAAkX,cAAA,KAGAlX,OAAAghB,OAAA,WACA,GAAA7G,SAAA,MACAC,KAAA,sBAAA,GAAAnhB,OAAAU,SACA2L,QACA2L,OAAAkJ,QACAnb,IAAAob,KACAjJ,SAAAC,eAAA,sBACAC,KAAA,SAAAvJ,UACAvP,OAAAK,GAAA,kBACA,SAAAkP,UACAvP,OAAAK,GAAA,qBAKA+E,cAAA0a,uBAAA,SAAArY,OAAAnB,UAAAyG,MAAA8M,0BAIApS,OAAAihB,kBAAA,WAEA,GAAAxhB,eAAAZ,UAAAa,MACAY,YAAA,kDAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YACA0H,OAAAkhB,qBAAA,EACAlhB,OAAAmhB,mBAAA,EACAnhB,OAAAia,aACAnd,SAAA,KACA2T,SAAA,MAEAzQ,OAAAohB,eAAA,WAEAphB,OAAAqhB,+BACA5hB,cAAAS,QAAA,WAEAF,OAAAshB,iBAAA,WACAthB,OAAAuhB,cAAAvhB,OAAAia,aACAxa,cAAAS,QAAA,eAKAF,OAAAuhB,cAAA,SAAAC,cACA,GAAA/hB,eAAAZ,UAAAa,MACAY,YAAA,4DAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YAEA0H,OAAAyR,cAAA,kCACAzR,OAAA0R,oBAAA,2GACA1R,OAAA2R,mBAAA,kCACA3R,OAAA4R,kBAAA,KACA5R,OAAAoP,cAAA,KACApP,OAAA6R,mBAAA,EAEA,mBAAA2P,cACAC,cACAzK,KAAA,QACA2F,QAAA,SAGA8E,aAAAD,aACAC,aAAAzK,KAAA,QACAyK,aAAA9E,QAAA,QAGA+E,QAAA,YACAtP,yBAAAkO,wBAAA,OAAAoB,SAAA,GAAA,EAAAD,aAAA,SAAApe,MACA,YAAAA,KAAAkD,QACAvG,OAAA2hB,oBAAAte,KAAAuD,SACAnH,cAAAS,QAAA,YAEAF,OAAAoU,cAAA/Q,KAAAiB,OACAtE,OAAAoU,eACApU,OAAA4hB,gBAAAJ,cACA/hB,cAAAS,QAAA,WAEAF,OAAA6hB,uBAAApiB,iBAGA,SAAAqiB,cACA9hB,OAAA2hB,oBAAAG,cACAriB,cAAAS,QAAA,WACA7E,sCAIA2E,OAAA6hB,uBAAA,SAAApiB,eAGAgiB,cACAzK,KAAA,QACA2F,QAAA,WAGA+E,QAAA,YACAtP,yBAAAkO,wBAAA,OAAAoB,SAAA,GAAA,EAAAD,aAAA,SAAApe,MACA,YAAAA,KAAAkD,QACAvG,OAAA2hB,oBAAAte,KAAAuD,SACAnH,cAAAS,QAAA,YAEAF,OAAAqU,uBAAAhR,KAAA0e,eACA/hB,OAAAqU,wBACArU,OAAAsU,kBAAAjR,KAAA2R,SACAhV,OAAAgiB,0BACAviB,cAAAS,QAAA,YAEAF,OAAAiiB,6BACAxiB,cAAAS,QAAA,aAGA,SAAA4hB,cACA9hB,OAAA2hB,oBAAAG,cACAriB,cAAAS,QAAA,WACA7E,mCAEA2E,OAAA4hB,gBAAA,SAAAJ,cAEA,GAAA/hB,eAAAZ,UAAAa,MACAY,YAAA,kDAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YACA0H,OAAAkhB,qBAAA,EACAlhB,OAAAmhB,mBAAA,EACAnhB,OAAAohB,eAAA,WAEAphB,OAAAqhB,+BACA5hB,cAAAS,QAAA,WAEAF,OAAAkiB,WAAA,WACAliB,OAAAmiB,aAAAX,cACA/hB,cAAAS,QAAA,eAKAF,OAAAgiB,wBAAA,WACA,GAAAviB,eAAAZ,UAAAa,MACAY,YAAA,0DAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YACA0H,OAAAohB,eAAA,WACAphB,OAAAqhB,+BACA5hB,cAAAS,QAAA,WAEAF,OAAAoiB,oBAAA,WACApiB,OAAAqiB,uBACA5iB,cAAAS,QAAA,eAKAF,OAAAmiB,aAAA,SAAAX,cACA,GAAA/hB,eAAAZ,UAAAa,MACAY,YAAA,4DAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YACA0H,OAAAyR,cAAA,sCACAzR,OAAA6J,WAAA,EACA7J,OAAA0R,oBAAA,uLAEA1R,OAAA0R,oBAAA,uLAEA1R,OAAA2R,mBAAA,GACA3R,OAAA4R,kBAAA,kEACA5R,OAAAoP,cAAA,KACApP,OAAA6R,mBAAA,EAEA7R,OAAAsiB,sBAAA,WACAtiB,OAAA2R,mBAAA,wBACA3R,OAAAoP,cAAA,KAEAqS,aAAAD,aACAC,aAAAzK,KAAA,cAEA0K,QAAA,YACAtP,yBAAAkO,wBAAA,OAAAoB,SAAA,GAAA,EAAAD,aAAA,SAAApe,MACA,YAAAA,KAAAkD,QACAvG,OAAAuiB,wBACA9iB,cAAAS,QAAA,YAEAF,OAAA2hB,oBAAAte,KAAAuD,SACAnH,cAAAS,QAAA,YAEA,SAAA4hB,cACA9hB,OAAA2hB,oBAAAG,cACAriB,cAAAS,QAAA,WACA1E,sCAEAwE,OAAAsiB,4BAIAtiB,OAAAqiB,qBAAA,WACA,GAAA5iB,eAAAZ,UAAAa,MACAY,YAAA,4DAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YACA0H,OAAAyR,cAAA,sCACAzR,OAAA0R,oBAAA,yMACA1R,OAAA2R,mBAAA,GACA3R,OAAA4R,kBAAA,kEACA5R,OAAAoP,cAAA,KACApP,OAAA6R,mBAAA,EAGA4P,cAAAzK,KAAA,mBAEA0K,QAAA,YACAtP,yBAAAkO,wBAAA,OAAAoB,SAAA,GAAA,EAAAD,aAAA,SAAApe,MACA,GAAA,YAAAA,KAAAkD,OAAA,CAEA,IACA,GAAAic,QAAA1X,KAAAC,MAAA1H,KAAAmf,OACAxiB,QAAAiO,YAAAuU,QACA,MAAAja,IAEAvI,OAAAuiB,wBACA9iB,cAAAS,QAAA,cAGAF,QAAA2hB,oBAAA7Z,SAAAzE,KAAAuD,SACAnH,cAAAS,QAAA,WAEA,SAAA4hB,cACA9hB,OAAA2hB,oBAAAG,cACAriB,cAAAS,QAAA,WACA3E,wCAIAyE,OAAAuiB,sBAAA,WAEA,GAAA9iB,eAAAZ,UAAAa,MACAY,YAAA,qDAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,WAAAE,UACAwH,OAAAyR,cAAA,mCACAzR,OAAA0R,oBAAA,GACA1R,OAAAyiB,UAAA,EACAziB,OAAA2R,mBAAA,oBACA3R,OAAA4R,kBAAA,wDACA5R,OAAA0iB,iBAAA,EACA1iB,OAAA2iB,kBAAA,EACA3iB,OAAA4iB,YAAA,EACA5iB,OAAA6R,mBAAA,EACA7R,OAAA6iB,mBAAA,EACA7iB,OAAA6O,WAAA,WACApP,cAAAS,QAAA,WAEAF,OAAAsP,cAAA,SAAAxH,UAEAtP,SAAA,WACAiH,cAAAS,QAAA,WACArE,qCAAA,MACA,SAAAiM,UAEA9H,OAAA4R,kBAAA,iEACA5R,OAAA0iB,iBAAA,EACA1iB,OAAA2iB,kBAAA,GACA9mB,0CAIAmE,OAAA2hB,oBAAA,SAAAmB,gBAEA,GAAArjB,eAAAZ,UAAAa,MACAY,YAAA,qDAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YACA0H,OAAAyR,cAAA,gCACAzR,OAAA0R,oBAAA,GACA1R,OAAAyiB,UAAA,EACAziB,OAAA2R,mBAAA,iBACA3R,OAAA4R,kBAAAkR,eACA9iB,OAAA0iB,iBAAA,EACA1iB,OAAA2iB,kBAAA;AACA3iB,OAAA4iB,YAAA,EACA5iB,OAAA6R,mBAAA,EACA7R,OAAA6iB,mBAAA,EACA7iB,OAAA6O,WAAA,WACApP,cAAAS,QAAA,eAKAF,OAAAiiB,2BAAA,WAEA,GAAAxiB,eAAAZ,UAAAa,MACAY,YAAA,qDAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YI5XA0H,OAAAyR,cAAA,uBACAzR,OAAA0R,oBAAA,GACA1R,OAAAyiB,UAAA,EACAziB,OAAA2R,mBAAA,wBACA3R,OAAA4R,kBAAA,GACA5R,OAAA0iB,iBAAA,EACA1iB,OAAA2iB,kBAAA,EACA3iB,OAAA4iB,YAAA,EACA5iB,OAAA6R,mBAAA,EACA7R,OAAA6iB,mBAAA,EACA7iB,OAAA6O,WAAA,WACApP,cAAAS,QAAA,eAKAF,OAAA+iB,mBAAA,WAEA,GAAAtjB,eAAAZ,UAAAa,MACAY,YAAA,qDAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,WAAAE,UACAwH,OAAAyR,cAAA,mCACAzR,OAAA0R,oBAAA,GACA1R,OAAAyiB,UAAA,EACAziB,OAAA2R,mBAAA,oBACA3R,OAAA4R,kBAAA,GACA5R,OAAA0iB,iBAAA,EACA1iB,OAAA2iB,kBAAA,EACA3iB,OAAA4iB,YAAA,EACA5iB,OAAA6R,mBAAA,EACA7R,OAAA6iB,mBAAA,EACA7iB,OAAA6O,WAAA,WACApP,cAAAS,QAAA,eAKAF,OAAAqhB,6BAAA,WAEA,SCjCA1jB,cAAAwa,mBAAA,SAAAnY,OAAAzH,OAAA+M,MAAAhN,WAAAuG,UAAArG,SAAA4Z,0BAwEA,QAAA4Q,qBAAAC,MAAAC,OAAAC,gBAAAC,eACA,GAAAC,kBAAA,gBACA3B,SAAA,yBAAA4B,mBAAAL,QAAAC,OAAAG,iBAAA,IACAjR,yBAAAkO,wBAAA,OAAAoB,SAAA,GAAA,EAAA,KAAAyB,gBAAAC,cAAA9nB,oCAEA,QAAAioB,uBAAAN,MAAAE,gBAAAC,eACA1B,QAAA,yBAAA4B,mBAAAL,OACA7Q,yBAAAkO,wBAAA,SAAAoB,SAAA,GAAA,EAAA,KAAAyB,gBAAAC,cAAA9nB,oCAEA,QAAAkoB,oBAAAP,MAAAC,OAAAC,gBAAAC,eACA,GAAAC,kBAAA,gBACA3B,SAAA,yBAAA4B,mBAAAL,QAAAC,OAAAG,iBAAA,IACAjR,yBAAAkO,wBAAA,MAAAoB,SAAA,GAAA,EAAA,KAAAyB,gBAAAC,cAAA9nB,oCAEA,QAAAmoB,wBAAAP,OAAAC,gBAAAC,eACA,GAAAC,kBAAA,gBACA3B,SAAA,6BAAAwB,OAAAG,iBAAA,IACAjR,yBAAAkO,wBAAA,MAAAoB,SAAA,GAAA,EAAA,KAAAyB,gBAAAC,cAAA7nB,oCAEA,QAAAmoB,kBAAAP,gBAAAC,eACA1B,QAAA,mBACAtP,yBAAAqO,kCAAA,MAAAiB,SAAA,GAAA,EAAA,KAAAyB,gBAAAC,eAQA,QAAAO,oBAAA1O,SAAA5L,MAAAua,YAAAhd,SAEA,OAAAyC,OACA,IAAAwa,eAAAC,UACA7O,SAAAvC,WAAA,EACA1S,OAAA4T,kBAAAqB,SAAAzd,OAAA,CACA,MACA,KAAAqsB,eAAAE,YACA9O,SAAAvC,WAAA,EACA1S,OAAA4T,kBAAAqB,SAAAzd,OAAA,EACAqpB,EAAAmD,OAAAhkB,OAAA0S,WAAAlb,KAAAyd,SAAAzd,OACAosB,aACA5jB,OAAA+V,WAAA,EACA,MACA,KAAA8N,eAAAI,QACAjkB,OAAAkT,iBAAA+B,SAAAzd,OAAA,EACAyd,SAAAiP,QAAAjP,SAAAiB,gBACAjB,SAAAiB,gBAAA,KACAlW,OAAAmT,gBAAA8B,SAAAzd,OAAA,EACAosB,aACA5jB,OAAA+V,WAAA,EACA,MACA,KAAA8N,eAAAM,cACA,mBAAAvd,SACAwd,eAAA,GAEAA,eAAAxd,QAEA5G,OAAAkT,iBAAA+B,SAAAzd,OAAA,EACAwI,OAAAoT,sBAAA6B,SAAAzd,OAAA,EACAwI,OAAAqT,4BAAA4B,SAAAzd,MAAA4sB,gBAlIA,GAAAC,wBACAC,QAAA,UACAC,UAAA,YACAC,OAAA,SACAC,WAAA,aACAC,YAAA,eAEAb,eACAC,UAAA,YACAC,YAAA,cACAE,QAAA,UACAE,cAAA,gBAGAnkB,QAAAX,IAAA,uBAAA,SAAAslB,IAAAC,MACA,GAAAC,IAAAF,IAAAG,YACA,IAAAF,KACA,GAAA3B,OAAA2B,KAAA,GAAAA,KAAA,GAAA,GACAG,MAAAH,KAAA,GAAAA,KAAA,GAAA,EAGA,QADAC,GAAArR,kBAAA,EACAuR,OACA,IAAAV,uBAAAC,QACAO,GAAAvR,mBAAA2P,QAAA,EACA4B,GAAAG,wBAAA,CACA,MACA,KAAAX,uBAAAE,UACAM,GAAAtR,qBAAA0P,QAAA,CACA,MACA,KAAAoB,uBAAAG,OACAK,GAAA3R,iBAAA+P,QAAA,CACA,MACA,KAAAoB,uBAAAK,YACAG,GAAAI,eAAA,EACAJ,GAAA3R,iBAAA+P,QAAA,CACA,MACA,KAAAoB,uBAAAI,WACAI,GAAAK,gCAAA,KAIAllB,OAAAX,IAAA,sBAAA,SAAAslB,IAAAC,MACA,GAAAC,IAAAF,IAAAG,YACA,IAAAF,KACA,GAAA3B,OAAA2B,KAAA,GAAAA,KAAA,GAAA,GACAG,MAAAH,KAAA,GAAAA,KAAA,GAAA,EAIA,QADAC,GAAArR,kBAAA,EACAuR,OACA,IAAAV,uBAAAC,QACAO,GAAAvR,mBAAA2P,QAAA,EACA4B,GAAAG,wBAAA,CACA,MACA,KAAAX,uBAAAE,UACAM,GAAAtR,qBAAA0P,QAAA,CACA,MACA,KAAAoB,uBAAAG,OACAK,GAAA3R,iBAAA+P,QAAA,CACA,MACA,KAAAoB,uBAAAK,YACAG,GAAAI,eAAA,EACAJ,GAAA3R,iBAAA+P,QAAA,CACA,MACA,KAAAoB,uBAAAI,WACAI,GAAAK,gCAAA,KAgCAllB,OAAAmlB,wBAAA,WACA,MAAAnlB,QAAAwT,kBAAAxT,OAAAglB,wBAoCAhlB,OAAAolB,gBAAA,SAAAnQ,UACAyM,QAAA,yBAAAzM,SAAAzd,KACA4a,yBAAAmN,sBAAA,MAAAmC,SAAA,GAAA,EAAA,KAAAzM,SAAAzd,KAAA,GAAA,iCAAA,SAAA6L,MACA,GAAAgiB,UAAAhiB,IACA,KAAA,GAAAiiB,YAAAD,UACApQ,SAAAqQ,UAAAD,SAAAC,SAEAtlB,QAAAulB,qBAAAtQ,WACA3Z,qCAEA0E,OAAAwlB,eAAA,SAAAvQ,SAAAyL,SAAAC,OAAAuC,QACA,GAAAD,OAAAhO,SAAAzd,IACAwI,QAAA4G,QAAA,GAEAqO,SAAAvC,WAIA1S,OAAAmlB,4BAKA7sB,WAAAyhB,WAAA,wBACAkJ,MACAoB,sBAAAC,UAEAtB,oBAAAC,MAAAC,OAAA,SAAA7f,MAKA,GAJA/K,WAAAyhB,WAAA,uBACAkJ,MACAoB,sBAAAC,UAEA,YAAAjhB,KAAAkD,OAAA,CACAod,mBAAA1O,SAAA4O,cAAAC,UACA,KACA,GAAAtB,QAAA1X,KAAAC,MAAA1H,KAAAmf,OACAxiB,QAAAiO,YAAAuU,QACA,MAAAja,IAEA/P,SAAA,WACAwH,OAAA+V,WAAA,GACA8K,EAAAC,WAAAJ,WACAA,YAEA,UACA,cAAArd,KAAAkD,QAAA2c,QAIAljB,OAAAylB,6BAAA,wBAAAxQ,SAAA5R,KAAAuD,SACAia,EAAAC,WAAAH,SACAA,UAJA1L,SAAAyQ,kBAAA,GAOA,SAAA5D,cACAxpB,WAAAyhB,WAAA,uBACAkJ,MACAoB,sBAAAC,UAEAtkB,OAAAylB,6BAAA,wBAAAxQ,SAAA6M,cACAjB,EAAAC,WAAAH,SACAA,aAIA3gB,OAAA2lB,iBAAA,SAAA1Q,UACA,GAAAgO,OAAAhO,SAAAzd,IACAwI,QAAA4G,QAAA,GACA5G,OAAAuT,qBAAA0B,SAAAzd,QAGAc,WAAAyhB,WAAA,wBACAkJ,MACAoB,sBAAAE,YAEAhB,sBAAAtO,SAAAzd,KAAA,SAAA6L,MACArD,OAAAwT,kBAAA,EACAxT,OAAAuT,qBAAA0B,SAAAzd,OAAA,EACAmsB,mBAAA1O,SAAA4O,cAAAE,aACAzrB,WAAAyhB,WAAA,uBACAkJ,MACAoB,sBAAAE,WAEA,KACA,GAAA/B,QAAA1X,KAAAC,MAAA1H,KAAAmf,OACAxiB,QAAAiO,YAAAuU,QACA,MAAAja,MAEA,SAAAuZ,cACA9hB,OAAAwT,kBAAA,EACAxT,OAAAuT,qBAAA0B,SAAAzd,OAAA,EACAc,WAAAyhB,WAAA,uBACAkJ,MACAoB,sBAAAE,YAEAvkB,OAAA4G,QAAAkb,aACA9hB,OAAAylB,6BAAA,0BAAAxQ,SAAA6M,kBAGA9hB,OAAA4lB,cAAA,SAAA3C,MAAA4C,MAKA,GAAApP,KAAApa,OAAAqD,KAAArD,OAAAC,SAAAuQ,SAAA,KAAAgZ,KAAA,SACApP,KAAAC,SAEA1W,OAAA8lB,cAAA,SAAA7Q,SAAAyL,SAAAC,OAAAuC,QA6CA,QAAA6C,cAAA9Q,SAAA6M,cACAxpB,WAAAyhB,WAAA,uBACAkJ,MACAoB,sBAAAG,SAEA3D,EAAAC,WAAAH,SACAA,OAAAmB,cAEA6B,mBAAA1O,SAAA4O,cAAAM,eAAA,EAAArC,cAEA9hB,OAAAoT,sBAAA6B,SAAAzd,OAAA,EACAwI,OAAAqT,4BAAA4B,SAAAzd,MAAAsqB,aACAtpB,SAAA,WACAwH,OAAAoT,sBAAA6B,SAAAzd,OAAA,GACAoE,kCA1DA,GAAAqnB,OAAAhO,SAAAzd,KACAwuB,SAAA/Q,SAAAiB,eACA,IAAA,KAAA8P,SAAA,CAIA,GAAA,sBAAA/Q,SAAAzd,KAEA,WADAwI,QAAAimB,6BAAAhR,SAGA3c,YAAAyhB,WAAA,wBACAkJ,MACAoB,sBAAAG,SAEAhB,mBAAAP,MAAAC,OAAA,SAAA7f,MAKA,GAJA/K,WAAAyhB,WAAA,uBACAkJ,MACAoB,sBAAAG,SAEA,YAAAnhB,KAAAkD,OAAA,CACA,GAAA,UAAAlD,MAAA,CACA,GAAAgiB,UAAAhiB,KAAA6iB,MACA,KAAA,GAAAZ,YAAAD,UACApQ,SAAAqQ,UAAAD,SAAAC,UAGA,IACA,GAAA9C,QAAA1X,KAAAC,MAAA1H,KAAAmf,OACAxiB,QAAAiO,YAAAuU,QACA,MAAAja,IAEAob,mBAAA1O,SAAA4O,cAAAI,SACApD,EAAAC,WAAAJ,WACAA,eAEA,CAAA,GAAA,cAAArd,KAAAkD,SAAA2c,OAEA,WADAljB,QAAAmmB,gCAAAlR,SAAA5R,KAAAkO,MAAAmP,SAGAqF,cAAA9Q,SAAA5R,KAAAuD,WAEA,SAAAkb,cACAiE,aAAA9Q,SAAA6M,kBAmBA9hB,OAAAomB,aAAA,SAAAnR,SAAAyL,SAAAC,QACAroB,WAAAyhB,WAAA,wBACA9E,SAAAzd,KACA6sB,sBAAAK,cAEAhB,iBAAA,SAAArgB,MACA/K,WAAAyhB,WAAA,uBACA9E,SAAAzd,KACA6sB,sBAAAK,cAEAf,mBAAA1O,SAAA4O,cAAAI,SACApD,EAAAC,WAAAJ,WACAA,YAEA,SAAAoB,cACAxpB,WAAAyhB,WAAA,uBACA9E,SAAAzd,KACA6sB,sBAAAK,cAEA7D,EAAAC,WAAAH,SACAA,OAAAmB,cAEA6B,mBAAA1O,SAAA4O,cAAAM,eAAA,EAAArC,cAEA9hB,OAAAoT,sBAAA6B,SAAAzd,OAAA,EACAwI,OAAAqT,4BAAA4B,SAAAzd,MAAAsqB,aACAtpB,SAAA,WACAwH,OAAAoT,sBAAA6B,SAAAzd,OAAA,GACAoE,qCAGAoE,OAAAqmB,2BAAA,SAAAnD,QAyBA,QAAAoD,qBACA,MAAAC,kBAAA1uB,OAEAmI,QAAA8lB,cAAAS,iBAAA1uB,GAAA,WACAA,GAAA,EACAyuB,qBACA,SAAAxE,cACAxpB,WAAAyhB,WAAA,uBACA,KACAsK,sBAAAI,aAEAzkB,OAAAylB,6BAAA,uBAAAc,iBAAA1uB,GAAAiqB,aAAA,4EAIA0E,sBAEAxmB,OAAAimB,6BAAAO,uBAxCA,GAAAA,sBAAA,KACAD,mBAeA,IAdAjuB,WAAAyhB,WAAA,wBACA,KACAsK,sBAAAI,aAGA5D,EAAAzE,QAAApc,OAAAgV,SAAA,SAAAC,UACAA,SAAAiB,kBAEA,sBAAAjB,SAAAzd,KACAgvB,qBAAAvR,SAEAsR,iBAAAloB,KAAA4W,aAGAsR,iBAAAzuB,OAAA,EAIA,YAHA0uB,sBACAxmB,OAAAimB,6BAAAO,sBAIA,IAAA3uB,GAAA,CAqBAyuB,sBAEAtmB,OAAAymB,eAAA,SAAAvD,QC/WA,QAAAE,eAAAtB,cACAxpB,WAAAyhB,WAAA,uBACA,KACAsK,sBAAAI,YAEA,KAAA,GAAAiC,IAAA,EAAAC,IAAA3mB,OAAAgV,SAAAld,OAAA6uB,IAAAD,GAAAA,KAAA,CACA,GAAAE,QAAA5mB,OAAAgV,SAAA0R,GACA/C,oBAAAiD,OAAA/C,cAAAM,eAAA,EAAArC,cAEAtpB,SAAA,WACA,IAAA,GAAAkuB,IAAA,EAAAC,IAAA3mB,OAAAgV,SAAAld,OAAA6uB,IAAAD,GAAAA,KAAA,CACA,GAAAE,QAAA5mB,OAAAgV,SAAA0R,GACA1mB,QAAAoT,sBAAAwT,OAAApvB,OAAA,IAEAoE,iCACA,IAAAirB,eACAA,aAAArvB,KAAA,kBACAwI,OAAAylB,6BAAA,wBAAAoB,YAAA/E,cD+VA,GAAA0E,sBAAA,WACA,GAAAM,eAAAjG,EAAAjd,KAAA5D,OAAAgV,SAAA,SAAA0R,IACA,MAAA,sBAAAA,GAAAlvB,MAEA,OAAAsvB,gBAAAA,cAAA5Q,gBACA4Q,cAEA,OAGA,OAAAN,0BACAxmB,QAAAqmB,2BAAAnD,aAGAljB,OAAAklB,gCAAAllB,OAAAwT,mBAGAlb,WAAAyhB,WAAA,wBACA,KACAsK,sBAAAI,aAEA5D,EAAAzE,QAAApc,OAAAgV,SAAA,SAAAC,UACAA,SAAAiB,kBC9ZAlW,OAAAkT,iBAAA+B,SAAAzd,OAAA,KAEAisB,uBAAAP,OAAA,SAAA7f,MAKA,GAJA/K,WAAAyhB,WAAA,uBACA,KACAsK,sBAAAI,aAEA,YAAAphB,KAAAkD,OAAA,CACA,IAAA,GAAAmgB,IAAA,EAAAC,IAAA3mB,OAAAgV,SAAAld,OAAA6uB,IAAAD,GAAAA,KACA/C,mBAAA3jB,OAAAgV,SAAA0R,IAAA7C,cAAAI,SAAA,EAEA,KACA,GAAAzB,QAAA1X,KAAAC,MAAA1H,KAAAmf,OACAxiB,QAAAiO,YAAAuU,QACA,MAAAja,IAEAvI,OAAA+V,WAAA,OACA,CAAA,GAAA,cAAA1S,KAAAkD,SAAA2c,OAEA,WADAljB,QAAA+mB,iCAAA1jB,KAAAkO,MAGA6R,eAAA/f,KAAAuD,WAEAwc,kBAqBApjB,OAAAiO,YAAA,SAAA+Y,aAAAzG,sBAAAC,qBAEA,mBAAAwG,eAAA,gBAAAA,cACA1hB,OACA2L,OAAA,MACAjS,IAAA,0BAAA,GAAA/F,OAAAU,YACA0X,KAAA,SAAAvJ,UACA9H,OAAAgV,SAAAlN,SAAAzE,KAEArD,OAAAuU,gBAAA0S,OAAAjnB,OAAAuU,iBAAA,EAEAsM,EAAAC,WAAAP,wBACAA,sBAAAzY,SAAAzE,OAEA,SAAAyE,UAEA+Y,EAAAC,WAAAN,sBACAA,oBAAA1Y,aAIA9H,OAAAgV,SAAAgS,aACAhnB,OAAAuU,gBAAA0S,OAAAjnB,OAAAuU,iBAAA,IAMAvU,OAAAulB,qBAAA,SAAAtQ,UACA,GAAAxV,eAAAZ,UAAAa,MACAY,YAAA,6CAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YACA0H,OAAAknB,eAAA,EACAlnB,OAAAmnB,UAAAlS,SAEAjV,OAAAsG,QAAAtG,OAAA6V,iBAAAZ,SAAAzd,MAAA8O,QAGAtG,OAAAgQ,QAAAhQ,OAAA6V,iBAAAZ,SAAAzd,MAAAse,QACA9V,OAAAonB,UAAApX,QAAAhQ,OAAAgQ,SAEAhQ,OAAAqnB,WAAApS,SAAAiB,gBACAlW,OAAAsnB,iBAAA,WAEA7nB,cAAAS,QAAA,UACAF,OAAA4T,sBAEA5T,OAAAunB,mBAAA,SAAAC,SACA,IAAAxnB,OAAA2T,iBAAAsB,SAAAzd,MAAA,CAGAwI,OAAA2T,iBAAAsB,SAAAzd,OAAA,CACA,IACAiwB,UADAxS,SAAAE,QAAArd,OACA0vB,QAAA,SAAA,WAEAE,UAAA,IACAzS,UAAAE,UACAuS,UAAAzS,SAAAE,QAAAoI,KAAA,KACAmK,YACAhG,QAAA,oBAAAgG,UAAA,WAAAD,QACArV,yBAAAkO,wBAAA,OAAAoB,SAAA,GAAA,EAAA,KAAA,SAAAre,MACArD,OAAA2T,iBAAAsB,SAAAzd,OAAA,EACA,YAAA6L,KAAAkD,OAOAvG,OAAA+V,WAAA,IAEA/V,OAAA2T,iBAAAsB,SAAAzd,OAAA,EACAwI,OAAAknB,eAAA,EACAlnB,OAAA2nB,sBAAA,yCAAAtkB,KAAAuD,QACA4gB,QAEAxnB,OAAAonB,UAAApX,SAAA,GAGAhQ,OAAAonB,UAAApX,SAAA,GAGAjC,WAAA,WACA/N,OAAAknB,eAAA,GACAtrB,oCAEA,SAAAkmB,cACA9hB,OAAA2T,iBAAAsB,SAAAzd,OAAA,EACAwI,OAAAknB,eAAA,EACAlnB,OAAA2nB,sBAAA7F,aACA0F,QAEAxnB,OAAAonB,UAAApX,SAAA,GAGAhQ,OAAAonB,UAAApX,SAAA,GAGAjC,WAAA,WACA/N,OAAAknB,eAAA,GACAtrB,mCACAR,wCAIA4E,OAAA4nB,SAAA,SAAAC,YACA7nB,OAAA8lB,cAAA+B,WAAA,WACA7nB,OAAA+V,WAAA,IACA,SAAA+L,cACA9hB,OAAAylB,6BAAA,uBAAAoC,WAAA/F,cACA9hB,OAAA+V,WAAA,GACAtW,cAAAS,QAAA,iBAMAF,OAAA+mB,iCAAA,SAAAe,UACA,GAAAC,gBAAAlpB,UAAAa,MACAY,YAAA,0DAAAvF,YACA6E,WAAA,EACAY,MAAAR,OACAH,KAAA,KACAC,SAAArD,4BACAsD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,WAAAE,UACAwH,OAAA4G,QAAAkhB,SACA9nB,OAAA6O,WAAA,WACAkZ,eAAA7nB,QAAA,WAEAF,OAAAgoB,cAAA,WACAD,eAAA7nB,QAAA,UACAF,OAAAymB,gBAAA,QAKAzmB,OAAAioB,sBAAA,WAEA,IAAAjoB,OAAAwT,iBAIA,GAAA/T,eAAAZ,UAAAa,MACAY,YAAA,wDAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YACA0H,OAAA6O,WAAA,WACApP,cAAAS,QAAA,WAEAF,OAAAkoB,iBAAA,WACAzoB,cAAAS,QAAA,UACAF,OAAAymB,sBAKAzmB,OAAAimB,6BAAA,SAAAhR,UACA,GAAAxV,eAAAZ,UAAAa,MACAY,YAAA,sDAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,WAAAE,SAAAoG,SAEAtG,WAAAyhB,WAAA,wBACA/Z,OAAAilB,eAAA,EACAjlB,OAAA6O,WAAA,WACAvW,WAAAyhB,WAAA,uBAEAta,cAAAS,QAAA,WAEAF,OAAAmoB,aAAA,WACAnoB,OAAAilB,eAAA,EACAjlB,OAAAomB,aAAAnR,SAAA,WAGAjV,OAAA+R,sBACAvZ,SAAA,WACAiH,cAAAS,QAAA,UACA3H,OAAAK,GAAA,kBACA,KAEAmV,WAAA,WACAnP,QAAAtC,SAAA6D,UACA,MACA,WACA3H,SAAA,WACAwH,OAAAoT,sBAAA6B,SAAAzd,OAAA,GACAoE,kCACAoE,OAAAylB,+BAEAjtB,SAAA,WACAiH,cAAAS,QAAA,UACA3H,OAAAK,GAAA,kBACA,KAEAmV,WAAA,WACAnP,QAAAtC,SAAA6D,UACA,YAMAH,OAAAooB,oBAAA,SAAAnT,UACAA,SAAAyQ,kBAAA,EACA1lB,OAAAmlB,2BAGAnlB,OAAAwlB,eAAAvQ,SAAA,KAAA,MAAA,IAEAjV,OAAAmmB,gCAAA,SAAAlR,SAAA6S,SAAApH,UACA,GAAAqH,gBAAAlpB,UAAAa,MACAY,YAAA,yDAAAvF,YACA6E,WAAA,EACAY,MAAAR,OACAH,KAAA,KACAC,SAAArD,4BACAsD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,WAAAE,UACAwH,OAAA4T,kBAAAqB,SAAAzd,OAAA,EACAwI,OAAAqoB,UAAApT,SACAjV,OAAA4G,QAAAkhB,SACA9nB,OAAA6O,WAAA,WACAkZ,eAAA7nB,QAAA,WAEAF,OAAAgoB,cAAA,WACAD,eAAA7nB,QAAA,UACAF,OAAA8lB,cAAA7Q,SAAAyL,SAAA,MAAA,QAKA1gB,OAAAsoB,iCAAA,SAAArT,SAAA6S,UACA,GAAAC,gBAAAlpB,UAAAa,MACAY,YAAA,0DAAAvF,YACA6E,WAAA,EACAY,MAAAR,OACAH,KAAA,KACAC,SAAArD,4BACAsD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,WAAAE,UACAwH,OAAA4T,kBAAAqB,SAAAzd,OAAA,EACAwI,OAAAqoB,UAAApT,SACAjV,OAAA4G,QAAAkhB,SACA9nB,OAAA6O,WAAA,WACAkZ,eAAA7nB,QAAA,WAEAF,OAAAuoB,eAAA,WACAR,eAAA7nB,QAAA,UACAF,OAAAwlB,eAAAvQ,SAAA,aACA,cACA,QAKAjV,OAAAylB,6BAAA,SAAA+C,OAAAvT,SAAA6S,UACA,GAAAroB,eAAAZ,UAAAa,MACAY,YAAA,sDAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACAsD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,WAAAE,UACAwH,OAAAzF,MAAAiuB,OACAxoB,OAAAA,WAAAiV,SACAjV,OAAA4G,QAAAkhB,SACA9nB,OAAA6O,WAAA,WACApP,cAAAS,QAAA,eAKAF,OAAAyoB,qCAAA,SAAAD,OAAAV,UACA,GAAAroB,eAAAZ,UAAAa,MACAY,YAAA,sDAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACAsD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,WAAAE,UACAwH,OAAAzF,MAAAiuB,OACAxoB,OAAA4G,QAAAkhB,SACA9nB,OAAA6O,WAAA,WACApP,cAAAS,QAAA,eAKAF,OAAA0oB,qBAAA,WACA,IAAA1oB,OAAAwT,iBAIA,GAAA/T,eAAAZ,UAAAa,MACAY,YAAA,6CAAAvF,YACA6E,WAAA,EACAY,MAAAR,OACAH,KAAA,KACAC,SAAArD,4BACAsD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YACA0H,OAAA2oB,MAAA,KACA3oB,OAAAkO,SAAA,OACAlO,OAAA4T,qBACA5T,OAAA4oB,iBAAA,WACA5oB,OAAAglB,yBAEAhlB,OAAA4T,qBACAnU,cAAAS,QAAA,iBAQAvC,cAAAma,gBAAA,SAAA9X,OAAAsF,MAAAhN,WAAAC,OAAA6Z,yBAAA7D,yBACAvO,OAAA+G,UAAAC,MAAA,MACAhH,OAAA0Z,sBAAA,WACAphB,WAAAI,UAAA,EACA6V,wBAAAiQ,aAAA,SAAA1W,UACA,QAAA+gB,aAAAC,aACAA,aAEA9oB,OAAAc,WAAA,EACAxI,WAAA6G,cACA5G,OAAAK,GAAAN,WAAA6G,eAEA5G,OAAAK,GAAA,2BAIAoH,OAAAc,WAAA,EACAvI,OAAAK,GAAA,qBAGAoH,OAAAgS,sBACA,IAAA+W,aAAAjhB,SAAAzE,KAAA2lB,WAEAC,IAAA,QAAAF,WACAF,aAAAI,MACA,SAAAnhB,cAKA9H,OAAAgS,qBAAA,WACA,OAAA3U,0BACA6rB,cAAA7rB,0BAEAA,yBAAA8rB,YAAA,WACA5a,wBAAAiQ,aAAA,SAAA1W,UACA,GAAAihB,aAAAjhB,SAAAzE,KAAA2lB,WAEAC,IAAA,SAAAF,YACAK,MAAAptB,0BAAAC,gBAAA,IAAA,CACAgtB,OAAAG,MAEAppB,OAAAc,WAAA,EAIAd,OAAAc,WAAA,EAGA,OAAAgH,SAAAzE,KAAAgmB,WAAA7iB,SAEAxG,OAAAqQ,IAAA,SAAAvI,SAAAzE,KAAAgmB,WAAA7iB,QAGA,OAAAsB,SAAAzE,KAAA2jB,eAGAhnB,OAAAgV,SAAAlK,KAAAC,MAAAjD,SAAAzE,KAAA2jB,cACAhnB,OAAAuU,gBAAA0S,OAAAjnB,OAAAuU,iBAAA,GAGA,OAAAzM,SAAAzE,KAAAimB,WAIAxhB,SAAAzE,KAAAimB,YACAtpB,OAAAupB,aAAAzhB,SAAAzE,KAAAimB,YAGA,SAAAxhB,cAIA3M,sCAEA6E,OAAA+R,oBAAA,WACA,OAAA1U,0BACA6rB,cAAA7rB,2BAGA2C,OAAAwP,iBAAA,SAAAga,eACA,GAAAC,SAAA,yBACArX,0BAAAmN,sBAAA,MAAAkK,SAAA,GAAA,EAAA,KAAA,mBAAA,GAAA,yBAAA,SAAApmB,MAEArD,OAAAgH,MAAA3D,KACArD,OAAA+G,SAAAC,MAAAhH,OAAAgH,MACAhH,OAAA+G,SAAAC,MAAAF,WAAA,GACA9G,OAAA+G,SAAAC,MAAAC,YAAA,GACAuiB,iBACAnuB,mCAEA2E,OAAAmI,kBAAA,SAAAgb,gBAAAuG,cAIA1pB,OAAAqG,qBAAAC,SAAA,GACAiI,wBAAAiQ,aAAA,SAAA1W,UACA,GAAAihB,aAAAjhB,SAAAzE,KAAA2lB,WACAC,IAAA,QAAAF,WACAE,KACA9F,kBAIAuG,cACAjjB,SAAA,EACAG,QAAA,2BAAAmiB,YAAA,OAMA,SAAAjhB,UACA4hB,kBAKA1pB,OAAAgI,mBAAA,SAAAmb,gBAAAuG,cAEA,GAEAC,YAFA3pB,OAAA+G,SAAAC,MAAAF,WACA9G,OAAA+G,SAAAC,MAAAC,YACAjH,OAAA+G,SAAAC,MAAAE,UACA0iB,WAAA5pB,OAAA+G,SAAAC,MAAAG,UACA0iB,WAAA7pB,OAAA+G,SAAAC,MAAAI,UACA0iB,YAAA9pB,OAAA+G,SAAAC,MAAAtK,WACAqtB,SAAA/pB,OAAA+G,SAAAC,MAAAK,QACA2iB,UAAAhqB,OAAA+G,SAAAC,MAAAM,SACA2iB,WAAAjqB,OAAA+G,SAAAC,MAAAO,UACA2iB,YAAAlqB,OAAA+G,SAAAC,MAAAQ,WACA2iB,UAAAnqB,OAAA+G,SAAAC,MAAAS,SACAia,QAAA,uBAAA4B,mBAAAqG,WAAA,cAAArG,mBAAAsG,YAAA,cAAAtG,mBAAAuG,YAAA,eAAAvG,mBAAAwG,aAAA,YAAAxG,mBAAAyG,UAAA,aAAAzG,mBAAA0G,WAAA,cAAA1G,mBAAA2G,YAAA,eAAA3G,mBAAA4G,aAAA,aAAA5G,mBAAA6G,UACA/X,0BAAAkO,wBAAA,OAAAoB,SAAA,GAAA,EAAA,KAAA,SAAAre,MACA,GAAA0lB,aAAA1lB,KAAA2lB,UACA,UAAAD,aACA/oB,OAAAc,WAAA,EACAqiB,iBACA1c,SAAA,EACAG,QAAA,6BAGA5G,OAAAc,WAAA,EACA4oB,cACAjjB,SAAA,EACAG,QAAA,qHAGA,SAAAkb,cACA4H,cACAjjB,SAAA,EACAG,QAAAkb,gBAEAxmB,sCAIAqC,cAAAya,sBAAA,SAAApY,OAAAsF,MAAA/M,OAAAsG,UAAArG,SAAA4Z,yBAAA7D,yBACAvO,OAAAoqB,eAAA,WAEA9kB,OACA2L,OAAA,MACAjS,IAAA,qBAAA,GAAA/F,OAAAU,YACA0X,KAAA,SAAAvJ,UACA,OAAAA,SAAAzE,KAAAmD,SAEAxG,OAAAqQ,IAAA,SAAAvI,SAAAzE,KAAAmD,SAGA,SAAAsB,cAKA9H,OAAAuQ,iBAAA,SAAA8Z,UAEA,GAAA5qB,eAAAZ,UAAAa,MACAY,YAAA,6CAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YACA0H,OAAAsqB,WAAA,SAAAC,gBACAA,gBAEAhc,wBAAAO,UAAA,kBAAA,EAAA5T,wBAEA8E,OAAA6O,WAAA,WAEApP,cAAAS,QAAA,WAEAF,OAAAwqB,SAAA,WAEA/qB,cAAAS,QAAA,UACAtC,QAAAkjB,WAAAuJ,WACAA,YAEArqB,OAAAyqB,kBAAA,WAGA,MAAAzqB,QAAA+P,IAAAC,SACAhQ,OAAAiQ,2BACAxQ,eAAAS,QAAA,YAGAF,OAAAkQ,0BACAzQ,eAAAS,QAAA,gBAKAF,OAAAiQ,qBAAA,WAEA,GAAAxQ,eAAAZ,UAAAa,MACAY,YAAA,8CAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YACA0H,OAAA6O,WAAA,WAEApP,cAAAS,QAAA,eAKAF,OAAAkQ,oBAAA,WAEA,GAAAzQ,eAAAZ,UAAAa,MACAY,YAAA,6CAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,WAAAE,UACAwH,OAAAia,aACAnd,SAAA,KACA2T,SAAA,MAEAzQ,OAAAoP,cAAA,KACApP,OAAA6O,WAAA,WAEApP,cAAAS,QAAA,WAEAF,OAAAyqB,kBAAA,WACAzqB,OAAAoP,cAAA,GACApP,OAAA0qB,oBAAA1qB,OAAAia,YAAAnd,SAAAkD,OAAAia,YAAAxJ,UACAhR,cAAAS,QAAA,eAKAF,OAAA0qB,oBAAA,SAAA7Z,UAAAC,WAEA,GAAArR,eAAAZ,UAAAa,MACAY,YAAA,6CAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YACA0H,OAAA2qB,gBAAA,EACA3qB,OAAA4qB,mBAAA,yBACA5qB,OAAA6qB,aAAA,SACA7qB,OAAA6J,WAAA,EACA7J,OAAA8qB,UAAA,iBAEA9qB,OAAA8qB,UAAA,qBAEA9qB,OAAA6O,WAAA,WACApP,cAAAS,QAAA,WAEAmD,MACAvG,SAAA+T,UACAJ,SAAAK,WAEAsB,yBAAAkO,wBAAA,OAAA,YAAA,GAAA,EAAAjd,KAAA,SAAA0nB,cACA/qB,OAAA2qB,gBAAA,EACA3qB,OAAA4qB,mBAAA,oBACA5qB,OAAA6qB,aAAA,SACA7qB,OAAAgrB,WAAA,EACAhrB,OAAAirB,UAAA,EACAjrB,OAAAoqB,iBACApqB,OAAA0P,mBACA,SAAAoS,cACA9hB,OAAA2qB,gBAAA,EACA3qB,OAAA4qB,mBAAA,kBACA5qB,OAAA6qB,aAAA,QACA7qB,OAAAoP,cAAA0S,cACAvmB,yCAMAoC,cAAAua,uBAAA,SAAAlY,OAAAsF,MAAA/M,OAAAsG,UAAAuT,0BACApS,OAAAkrB,0BAAA,WACAlrB,OAAAwT,mBAIAkO,QAAA,kBACAtP,yBAAAmN,sBAAA,MAAAmC,SAAA,GAAA,EAAA,KAAA,sBAAA,GAAA,+BAAA,SAAAre,MACArD,OAAAupB,aAAAlmB,KAAA8nB,KACAnrB,OAAAorB,+BACA/vB,oCAEA2E,OAAAorB,4BAAA,WACA,GAAA3rB,eAAAZ,UAAAa,MACAY,YAAA,oDAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,OAEAtF,OAAAqrB,YAAA,EACArrB,OAAA4F,SAAA,gBACA5F,OAAAsrB,sBAAA,EACAtrB,OAAAurB,uBAAA,EACAvrB,OAAAwrB,iBAAA,SAAAvI,OACAjjB,OAAAupB,aAAAvpB,OAAAupB,aAAAtT,OAAA,SAAAwV,OACA,MAAAA,OAAAj0B,OAAAyrB,SAGAjjB,OAAA0rB,eAAA,SAAAzI,OAEA,IAAA,GADA0I,QAAA3rB,OAAAupB,aACA1xB,EAAA,EAAAA,EAAA8zB,OAAA7zB,OAAAD,IACA,GAAA8zB,OAAA9zB,GAAAL,OAAAyrB,MACA,MAAA0I,QAAA9zB,IAIAmI,OAAA4rB,YAAA,WACA5rB,OAAA6rB,yBAAA7rB,OAAAurB,uBAAAvrB,OAAAsrB,sBAAAtrB,OAAA8rB,oBAGA9rB,OAAA+rB,iBAAA,KACA/rB,OAAAoP,cAAA,KACApP,OAAAurB,uBAAA,EACAvrB,OAAAgsB,kBAAA,KACAhsB,OAAAisB,qBAAA,KACAvK,QAAA,kBACAtP,yBAAAkO,wBAAA,MAAAoB,SAAA,GAAA,EAAA,KAAA,SAAAre,MACArD,OAAAurB,uBAAA,EACAvrB,OAAA4H,MAAA,mBACA5H,OAAAsrB,sBAAA,CACA,KACA,GAAA9I,QAAA1X,KAAAC,MAAA1H,KAAAmf,OACAxiB,QAAAiO,YAAAuU,QACA,MAAAnW,MAIArM,OAAAksB,gBAAA,+CACA,SAAApK,cACA9hB,OAAA4H,MAAA,mBACA5H,OAAAoP,cAAA0S,aACA9hB,OAAAurB,uBAAA,GACAjwB,oCACA0E,OAAA4H,MAAA,iBAAA5H,WAEAA,OAAAmsB,QAAA,WACA,KAAAnsB,OAAA6rB,yBAAA7rB,OAAA8rB,mBAAA9rB,OAAAurB,uBAAA,CAGAvrB,OAAA8rB,mBAAA,EACA9rB,OAAAoP,cAAA,KACApP,OAAAgsB,kBAAA,KACAhsB,OAAA+rB,iBAAA,KACA/rB,OAAAisB,qBAAA,IACA,IAAAG,kBAAApsB,OAAAqsB,cAAA70B,KACA80B,gBAAAtsB,OAAAqsB,cAAArtB,IACAutB,qBAAAvsB,OAAAqsB,cAAAvvB,SACA0vB,qBAAAxsB,OAAAqsB,cAAA5b,SACAgc,UAAAzsB,OAAA0rB,eAAAU,iBACA,KAAAA,iBAGA,MAFApsB,QAAAgsB,kBAAA,8CACAhsB,OAAA8rB,mBAAA,EAGA,KAAAQ,gBAGA,MAFAtsB,QAAAgsB,kBAAA,6CACAhsB,OAAA8rB,mBAAA,EAGA,IAAAW,UAGA,MAFAzsB,QAAAgsB,kBAAA,kBAAAI,iBAAA,wBACApsB,OAAA8rB,mBAAA,EAGAS,wBACAA,qBAAA,QAEAC,uBACAA,qBAAA,QAIAJ,kBAAAE,kBAEAtsB,OAAAisB,qBAAA,qBAAAG,iBAAA,iEACA1K,QAAA,wBAAA4B,mBAAA8I,kBAAA,QAAA9I,mBAAAgJ,iBAAA,aAAAhJ,mBAAAiJ,sBAAA,aAAAjJ,mBAAAkJ,sBACApa,yBAAAkO,wBAAA,OAAAoB,SAAA,GAAA,EAAA,KAAA,SAAAre,MACArD,OAAA8rB,mBAAA,EACA9rB,OAAAisB,qBAAA,GACAjsB,OAAAisB,qBAAA,kBAAAG,iBAAA,qDAEApsB,OAAAqsB,cAAA70B,KAAA,GACAwI,OAAAqsB,cAAArtB,IAAA,EACA,KACAgB,OAAAupB,aAAAlrB,KAAA+tB,kBACA,MAAA/f,MAGA,IACA,GAAAmW,QAAA1X,KAAAC,MAAA1H,KAAAmf,OACAxiB,QAAAiO,YAAAuU,QACA,MAAAnW,MAIArM,OAAA4H,MAAA,mBAAA5H,UAEA,SAAA8hB,cACA9hB,OAAA8rB,mBAAA,EACA9rB,OAAAisB,qBAAA,GACAjsB,OAAAgsB,kBAAAlK,aACA9hB,OAAA4H,MAAA,mBAAA5H,UACA1E,oCACA0E,OAAA4H,MAAA,iBAAA5H,YAGAA,OAAA6O,WAAA,WACA7O,OAAA8rB,mBAAA9rB,OAAAurB,uBAGA9rB,cAAAS,QAAA,WAEAF,OAAA0sB,WAAA,SAAAC,aAEA3sB,OAAA6rB,yBAAA7rB,OAAA8rB,mBAAA9rB,OAAAurB,wBAGAvrB,OAAAoP,cAAA,GACApP,OAAAgsB,kBAAA,KACAhsB,OAAAisB,qBAAA,KACAjsB,OAAA+rB,iBAAA,KACA/rB,OAAA6T,oBAAA8Y,cAAA,EACA3sB,OAAA6rB,yBAAA,EACAnK,QAAA,wBAAA4B,mBAAAqJ,aACAva,yBAAAkO,wBAAA,SAAAoB,SAAA,GAAA,EAAA,KAAA,SAAAre,MACArD,OAAA6T,oBAAA8Y,cAAA,EACA3sB,OAAA6rB,yBAAA,CACA,KACA,GAAAe,QAAA5sB,OAAAupB,aAAArxB,QAAAy0B,YACAC,SAAA,GACA5sB,OAAAupB,aAAA7M,OAAAkQ,OAAA,GAEA,MAAAvgB,MAGA,IACA,GAAAmW,QAAA1X,KAAAC,MAAA1H,KAAAmf,OACAxiB,QAAAiO,YAAAuU,QACA,MAAAnW,MAIArM,OAAA+rB,iBAAA,kBAAAY,YAAA;EACA,SAAA7K,cACA9hB,OAAA6T,oBAAA8Y,cAAA,EACA3sB,OAAA6rB,yBAAA,EACA7rB,OAAAoP,cAAA0S,cACAxmB,2CAOAqC,cAAAqa,qBAAA,SAAAhY,OAAAnB,UAAAuT,0BAIApS,OAAAsQ,kBAAA,WACA,GAAAtQ,OAAA+P,IAKA,GAAAtQ,eAAAZ,UAAAa,MACAY,YAAA,0CAAAvF,YACA6E,WAAA,EACAC,KAAA,KC71BAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YAEA0H,OAAA6sB,kBAAA,WAEAptB,cAAAS,QAAA,WAEAF,OAAA8sB,iBAAA,WAEA9sB,OAAA+sB,oBACAttB,cAAAS,QAAA,eAKAF,OAAA+sB,kBAAA,WACA,GAAAttB,eAAAZ,UAAAa,MACAY,YAAA,0CAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YACA0H,OAAA+gB,iBAEA/gB,OAAAgtB,gBAAA,KACAhtB,OAAA6sB,kBAAA,WAEAptB,cAAAS,QAAA,WAEAF,OAAAitB,kBAAA,SAAAC,SAEAltB,OAAAgtB,gBAAAE,SAEAltB,OAAAmtB,iBAAA,WACA,OAAAntB,OAAAgtB,kBAEAhtB,OAAAotB,kBAAAptB,OAAAgtB,iBACAvtB,cAAAS,QAAA,gBAMAF,OAAAotB,kBAAA,SAAAC,aACA,GAAA5tB,eAAAZ,UAAAa,MACAY,YAAA,0CAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YACA0H,OAAAgtB,gBAAAK,YACArtB,OAAAstB,mBAAA,WAEA7tB,cAAAS,QAAA,WAEAF,OAAAutB,iBAAA,WAEAvtB,OAAAwtB,kBAAAH,aACA5tB,cAAAS,QAAA,eAKAF,OAAAwtB,kBAAA,SAAAH,aACA,GAAA5tB,eAAAZ,UAAAa,MACAY,YAAA,0CAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YACA0H,OAAAgtB,gBAAAK,YACArtB,OAAAoP,cAAA,KACApP,OAAAytB,OAAA,WACA,MAAA,YAAAztB,OAAA+P,IAAAxJ,QAEAvG,OAAA0tB,eACAC,mBAAA,KACAC,uBAAA,KACAC,uBAAA,KACAC,2BAAA,KACAC,sBAAA,GAEA/tB,OAAAguB,mBAAA,WAEAvuB,cAAAS,QAAA,WAEAF,OAAAiuB,iBAAA,WAGA,MAFAjuB,QAAAoP,cAAA,MAEApP,OAAA0tB,cAAAC,oBAAA3tB,OAAA0tB,cAAAC,mBAAA71B,OAAAoE,yBACA8D,OAAAoP,cAAA,uCAAAlT,oBAAA,qBAGA8D,OAAA0tB,cAAAC,qBAAA3tB,OAAA0tB,cAAAE,4BAEA5tB,OAAAoP,cAAA,qCAGApP,OAAA0tB,cAAAG,wBAAA7tB,OAAA0tB,cAAAG,uBAAA/1B,OAAAoE,yBACA8D,OAAAoP,cAAA,2CAAAlT,oBAAA,qBAGA8D,OAAA0tB,cAAAG,yBAAA7tB,OAAA0tB,cAAAI,gCAEA9tB,OAAAoP,cAAA,yCAGApP,OAAAkuB,kBAAAb,YAAArtB,OAAA0tB,mBACAjuB,eAAAS,QAAA,gBAKAF,OAAAkuB,kBAAA,SAAAb,YAAAc,gBACA,GAAA1uB,eAAAZ,UAAAa,MACAY,YAAA,0CAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YACA0H,OAAAouB,mBAAA,WAEA3uB,cAAAS,QAAA,WAEAF,OAAAquB,iBAAA,WACAruB,OAAAsuB,kBAAAjB,YAAAc,gBACA1uB,cAAAS,QAAA,eAKAF,OAAAsuB,kBAAA,SAAAjB,YAAAc,gBACA,GAAA1uB,eAAAZ,UAAAa,MACAY,YAAA,0CAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YACA0H,OAAAuuB,eAAA,WAEA9uB,cAAAS,QAAA,WAEAF,OAAAwuB,YAAA,CACA,IAAAC,qBAAAN,eAAAR,mBACAe,wBAAAP,eAAAN,sBACA7tB,QAAA2uB,UAAA,WAEAjN,QAAA,sBAAA4B,mBAAA+J,YAAAuB,QAAA,mBAAAtL,mBAAAmL,qBAAA,iBAAAnL,mBAAAoL,yBACAtc,yBAAAkO,wBAAA,OAAAoB,SAAA,GAAA,EAAA,KAAA,SAAAre,MAEArD,OAAAwuB,YAAA,EACAxuB,OAAA6uB,oBACApvB,cAAAS,QAAA,WACA,SAAA4hB,cAEA9hB,OAAA8uB,mBAAAhN,cACAriB,cAAAS,QAAA,WACA1E,sCAEAwE,OAAA+uB,iBAAA,WACA/uB,OAAA6uB,oBACApvB,cAAAS,QAAA,WAEAF,OAAA2uB,gBAIA3uB,OAAA6uB,kBAAA,SAAAxB,YAAAc,gBACA,GAAA1uB,eAAAZ,UAAAa,MACAY,YAAA,0CAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YACA0H,OAAA6O,WAAA,WAEApP,cAAAS,QAAA,WAEAF,OAAAgvB,iBAAA,WACAhvB,OAAAivB,oBACAxvB,cAAAS,QAAA,eCzLAF,OAAA8uB,mBAAA,SAAAhH,UACA,GAAAroB,eAAAZ,UAAAa,MACAY,YAAA,2CAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YACA0H,OAAA4G,QAAAkhB,SACA9nB,OAAA6O,WAAA,WAEApP,cAAAS,QAAA,eAKAF,OAAAivB,kBAAA,SAAA5B,YAAAc,gBAEA,GAAAe,WAAA,0CAAAn0B,WACAiF,QAAA6J,UACAqlB,UAAA,gDAAAn0B,YAEA,IAAA0E,eAAAZ,UAAAa,MACAY,YAAA4uB,UACAtvB,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YACA0H,OAAA6O,WAAA,WAEApP,cAAAS,QAAA,WAEAF,OAAAmvB,uBAAA,WACA,GAAAnwB,KAAAzG,OAAAgR,KAAA,uBAAAC,UAAA,aACAnN,QAAAqD,KAAAV,IAAA,WAGAgB,OAAAovB,kBAAA,WACA3vB,cAAAS,QAAA,UACA3H,OAAAK,GAAA,qCAQA+E,cAAAsa,mBAAA,SAAAjY,OAAAsF,MAAAzG,UAAAuT,0BAIApS,OAAA0P,gBAAA,WAEApK,OACA2L,OAAA,MACAjS,IAAA,qBAAA,GAAA/F,OAAAU,YACA0X,KAAA,SAAAvJ,UACA,GAAAiP,MAAAjP,SAAAzE,IACA,aAAA0T,KAAAxQ,SACAvG,OAAA+P,KACAiH,KAAAD,KAAAC,KAAAD,KAAAC,KAAA,GACAtE,UAAAqE,KAAArE,UAAAqE,KAAArE,UAAA,GACA1C,QAAA+G,KAAA/G,QAAA+G,KAAA/G,QAAA,MAMA,SAAAlI,cAQA9H,OAAAqvB,sBAAA,WAEA,GAAA5vB,eAAAZ,UAAAa,MACAY,YAAA,wDAAAvF,YACA6E,WAAA,EACAC,KAAA,KACAC,SAAArD,4BACA+D,MAAAR,OACAD,WAAA,SAAAC,OAAAzH,OAAA+M,MAAAhN,YACA0H,OAAAsvB,kBAAA,EACAtvB,OAAA6O,WAAA,WAEApP,cAAAS,QAAA,WAEAF,OAAAuvB,eAAA,WACA,IAAAvvB,OAAAwvB,oBAAAxvB,OAAAsvB,iBAAA,CAIAtvB,OAAAwvB,mBAAA,CACA,IAAAhI,SAAA,MACAxnB,QAAAqS,mBACAmV,QAAA,SAIAxnB,OAAA+R,sBACA2P,QAAA,kBAAA8F,QACApV,yBAAAkO,wBAAA,MAAAoB,SAAA,GAAA,EAAA,KAAA,SAAAre,MACArD,OAAAwvB,mBAAA,EACAxvB,OAAAsvB,kBAAA,EACAvhB,WAAA,WACA/N,OAAAqS,iBAGAhW,OAAAC,SAAA,UAAAD,OAAAC,SAAAoQ,SAFArQ,OAAAC,SAAA,WAAAD,OAAAC,SAAAoQ,SAAA,IAAAhQ,YAIAhB,uCACA,SAAAomB,cAEA9hB,OAAAwvB,mBAAA,EACAxvB,OAAAoP,cAAA0S,aACA9hB,OAAAgS,wBACA3W,yCAOAsC,cAAAoa,mBAAA,SAAA/X,OAAAsF,MAAAjN,GAAA+Z,0BACApS,OAAAyvB,eAAA,SAAAxa,SAAAwS,SACA,GAAAC,WAAAzS,SAAAE,QACA8N,MAAAhO,SAAAzd,IACA,IAAAkwB,YAGA1nB,OAAAwT,iBAAA,CAEA,GAAA,UAAAiU,QAAA,CACA,GAAAznB,OAAAyT,iBAAAwP,OACA,MAEAjjB,QAAAyT,iBAAAwP,QAAA,MACA,IAAA,SAAAwE,QAAA,CACA,GAAAznB,OAAA0T,iBAAAuP,OACA,MAEAjjB,QAAA0T,iBAAAuP,QAAA,EAEAjjB,OAAAwT,kBAAA,CACA,IAAAkc,YAAAhI,UAAAnK,KAAA,IACAmE,SAAA,oBAAAgO,WAAA,WAAAjI,QACArV,yBAAAkO,wBAAA,OAAAoB,SAAA,GAAA,EAAA,KAAA,SAAAre,MCtJA,GDuJArD,OAAAyT,iBAAAwP,QAAA,ECzJAjjB,OAAA0T,iBAAAuP,QAAA,EACAjjB,OAAAwT,kBAAA,EACA,YAAAnQ,KAAAkD,OAAA,CACA,IAAA,GAAAuO,IAAA,EAAAC,KAAA2S,UAAA5vB,OAAAid,KAAAD,GAAAA,KAAA,CACA,GAAAI,UAAAwS,UAAA5S,GACA,WAAA2S,SAAA,SAAAA,QACAznB,OAAAyV,iBAAAP,UAAAQ,IAAA,UAAA+R,QAAA,UAAA,cACA,WAAAA,SAAA,YAAAA,UACAznB,OAAAyV,iBAAAP,UAAAU,MAAA,WAAA6R,QAAA,UAAA,YAGAznB,OAAA6U,4BAEA7U,QAAAyT,iBAAAwP,QAAA,EACAjjB,OAAA0T,iBAAAuP,QAAA,EACAjjB,OAAAwT,kBAAA,EACAxT,OAAAyoB,qCAAA,0BAAA,wDAAAplB,KAAAuD,UAEA,SAAAkb,cACA9hB,OAAAyT,iBAAAwP,QAAA,EACAjjB,OAAA0T,iBAAAuP,QAAA,EACAjjB,OAAAwT,kBAAA,EACAxT,OAAAyoB,qCAAA,0BAAA3G,eACA1mB,sCAEA4E,OAAA2vB,qBAAA,WAIA,IAAA,GAHAjI,WAAAkI,OAAAC,KAAA7vB,OAAA8vB,UACAC,kBAEAjb,GAAA,EAAAC,KAAA2S,UAAA5vB,OAAAid,KAAAD,GAAAA,KAAA,CACA4S,UAAA5S,GAEAib,gBAAA1xB,KAAAiH,OACA2L,OAAA,MACAjS,IAAA,mBAAA0oB,UAAA5S,IAAA,aAAA,GAAA7b,OAAAU,aAGAtB,GAAA23B,IAAAD,gBAAA1e,KAAA,SAAA4e,SAEA,IAAA,GAAA1a,IAAA,EAAA2a,MAAAD,QAAAn4B,OAAAo4B,MAAA3a,GAAAA,KAMA,IAAA,GAJA4a,SAAAF,QAAA1a,IACA6a,QAAAD,QAAA9sB,KACAqkB,UAAAkI,OAAAC,KAAAO,SACAC,UAAA3I,UAAA5vB,OACAw4B,IAAA,EAAAD,UAAAC,GAAAA,KAAA,CACA,GAAAC,eAAA7I,UAAA4I,IACAE,gBAAAJ,QAAAG,cACA,aAAAC,gBAAA9a,GAGA1V,QAAAyV,iBAAA8a,eAAAC,gBAGAxwB,OAAA6U,2BAGA7U,OAAAoW,YAAA,WAEApW,OAAA8vB,YACA9vB,OAAAyV,oBACAzV,OAAA6V,mBACA,KAAA,GAAAf,IAAA,EAAAC,KAAA/U,OAAAgV,SAAAld,OAAAid,KAAAD,GAAAA,KAAA,CAEA,GAAAG,UAAAjV,OAAAgV,SAAAF,GACA9U,QAAA6V,iBAAAZ,SAAAzd,OACA8O,QAAA,KACAwP,QAAA,MAEAb,SAAA3O,SAAA,EAEA2O,SAAAa,SAAA,CAGA,IAAA4R,WAAAzS,SAAAE,OAIA,IADAnV,OAAA6V,iBAAAZ,SAAAzd,MAAA,EACAkwB,UACA,IAAAnS,GAAA,EAAAA,GAAAmS,UAAA5vB,OAAAyd,KAAA,CACA,GAAAL,UAAAwS,UAAAnS,GAEAL,YAAAlV,QAAA8vB,WAEA9vB,OAAA8vB,SAAA5a,cAGAlV,OAAA8vB,SAAA5a,UAAA7W,KAAA4W,SAAAzd,OAIAwI,OAAA2vB","file":"main.min.js","sourcesContent":["var gui_version = '1.0.2r3';  // match this with index.html's version number\r\n\r\nvar bypass_auth                           = false;  //should be false for production\r\nvar log_messages                          = false;  //show notifications of mqtt messages\r\nvar log_message_json                      = false;  //show mqtt message received\r\nvar license_duration_days                 = 365*20; //20 years\r\nvar network_check_interval_milliseconds   = 1000*60*1;//1 minute\r\nvar rest_check_interval_milliseconds_s    = 1000*1; // 1 sec\r\nvar rest_check_interval_milliseconds      = 1000*2; // 2 sec\r\nvar rest_check_interval_milliseconds_m    = 1000*5; // 5 sec\r\nvar rest_check_interval_milliseconds_l    = 1000*10; // 10 sec\r\nvar rest_check_interval_milliseconds_ll   = 1000*60; // 60 sec\r\nvar reboot_request_timeout_milliseconds   = 1000*20; // 20 sec\r\nvar toggle_security_timeout_milliseconds  = 1000*35;\r\nvar html_content_timeout_milliseconds     = 1000*10; // 10 sec\r\nvar linger_info_timeout_milliseconds      = 1000*6; // 6 sec\r\nvar restart_welcome_latency_milliseconds  = 1000*13; // 13 sec\r\nvar factory_reset_welcome_latency_milliseconds = 1000*30; // 30 sec\r\nvar length_of_line_graph_history          = 30;\r\nvar simulate_network_failure              = false;\r\nvar network_index                         = 0;\r\nvar min_password_length                   = 3;\r\nvar no_local_config_hosts                 = ['golden']; //add your localhost here if you want to never use sensor dev configs\r\nvar requested_url                         = window.location.hash.substr(1);\r\nvar modal_light_dismiss_enabled           = 'static'; // determines if the angular modals can be dismissed by clicking outside the model (assigned to the 'backdrop' property of all angular bootstrap modals). Use 'static' for backdrop with no click handler, true for backdrop with click handler. See http://angular-ui.github.io/bootstrap/#/modal\r\nvar https_port                            = \"3092\";\r\nvar quark_name_string                     = \"Quark\";\r\nvar start_trigger_no_connection           = true;\r\nvar started_periodic_checking             = false;\r\nvar response_target_error_start_time      = new Date();\r\nvar authorization = {'nc_count':0, 'username':'', 'ha1':'', 'cnonce':'', 'realm':'', 'nonce':'','opaque':'','qop':''};\r\nvar periodicCheckNetworkFunc = null;\r\nvar do_validate_session = true;\r\nvar oem_branding_logo_file = '';\r\nvar oem_branding_eulas = [];\r\nvar oem_branding_eulas_datetime = [];\r\nvar oem_branding_cookies_names = [];\r\n\r\n//////////////////////////////\r\n// getCookie and acceptedPrivacy are used by .config, .run, controller.....\r\n//     Didn't find a way to define them in any kind of service (factory, provider, ...) yet.\r\n/////////////////////////////\r\nfunction getCookie(cname) {\r\n    var name = cname + \"=\";\r\n    var ca = document.cookie.split(';');\r\n    for (var i=0; i < ca.length; i++) {\r\n        var c = ca[i];\r\n        while (c.charAt(0)==' ') {\r\n            c = c.substring(1);\r\n        }\r\n        if (c.indexOf(name) === 0) {\r\n            return c.substring(name.length,c.length);\r\n        }\r\n    }\r\n    return \"\";\r\n}\r\n\r\nfunction acceptedPrivacy(){\r\n    return getCookie('privacy');\r\n}\r\n\r\nfunction authenticate($q, $rootScope, $state, $timeout) {\r\n    if(bypass_auth){\r\n        return true;\r\n    }\r\n    if ($rootScope.loggedin) {\r\n        // Resolve the promise successfully\r\n        return $q.when();\r\n    } else {\r\n        // The next bit of code is asynchronously tricky.\r\n        $timeout(function() {\r\n            // This code runs after the authentication promise has been rejected.\r\n            // Go to the log-in page\r\n            console.log(\"unauthenticated request: routing to welcome page\");\r\n            $state.go('welcome.login');\r\n        });\r\n        return $q.reject();\r\n    }\r\n}\r\n\r\n////////////////////////\r\n// The following are for the case when the web response has status = -1 (no connection to gateway server), status = 408 (request timeout), or 401 (access denied)\r\n//      If we are in periodic checking to poll for work results, we will give it some grace period.\r\n///////////////////////\r\nfunction setupNoConnection(start) {\r\n    if (start) {\r\n        // make the initial time way in the future... 10 days in the future\r\n        response_target_error_start_time = new Date();\r\n        response_target_error_start_time.setDate(response_target_error_start_time.getDate() + 10);\r\n\r\n        start_trigger_no_connection = true;\r\n        started_periodic_checking = false;\r\n    } else {\r\n        start_trigger_no_connection = false;\r\n        started_periodic_checking = false;\r\n    }\r\n}\r\n\r\nfunction setupPeriodicChecking(start) {\r\n    started_periodic_checking = start;\r\n}\r\n\r\nfunction setResponseErrorTime(has_error) {\r\n    if (has_error) {\r\n        var currentTime = new Date();\r\n        var diffTime = currentTime.getTime() - response_target_error_start_time.getTime();\r\n        if (diffTime < 0) {\r\n            // This is the first error.\r\n            response_target_error_start_time = new Date();\r\n        } else {\r\n            // This is not the first error. Do nothing.\r\n        }\r\n    } else {\r\n        // make the initial time way in the future... 10 days in the future\r\n        response_target_error_start_time = new Date();\r\n        response_target_error_start_time.setDate(response_target_error_start_time.getDate() + 10);\r\n    }\r\n}\r\n\r\nfunction checkResponseErrorReport() {\r\n    var currentTime = new Date();\r\n    var diffTime = currentTime.getTime() - response_target_error_start_time.getTime();\r\n    var diffTimeInSeconds = diffTime / 1000;\r\n\r\n    if (started_periodic_checking) {\r\n        // This is in periodic checking to pull work result, we give it some grace period (3 min).\r\n        if (diffTimeInSeconds >= (60 * 3)) {\r\n            return true; // report yes error\r\n        } else {\r\n            return false; // report no error\r\n        }\r\n    } else {\r\n        // If this is not periodic checking to pull work result, report immediately\r\n        return true; // report yes error\r\n    }\r\n}\r\n\r\n\r\n////////////////////////\r\n//  The main module\r\n///////////////////////\r\n\r\nvar iotgatewayhub = angular.module(\"iotgatewayhub\",['ui.router','ui.bootstrap','ngPasswordStrength', 'chart.js', 'perfect_scrollbar', 'timer'])\r\n.config(function ($stateProvider, $urlRouterProvider, $httpProvider) {\r\n    var accepted_privacy = acceptedPrivacy();\r\n    if (accepted_privacy) {\r\n        $urlRouterProvider.otherwise(\"/welcome/login\");\r\n    } else {\r\n        $urlRouterProvider.otherwise(\"/welcome/privacy\"); //default is to redirect to login page\r\n    }\r\n\r\n    // provider needs to be inject into .config, not .run.\r\n    // This is global for all $http.\r\n    // httpRequestsInterceptor is a factory service.\r\n    $httpProvider.interceptors.push('httpRequestsInterceptor');\r\n})\r\n.factory('mqttClient',[function(){\r\n    var client =  {};\r\n    client.connect = function(){\r\n        console.log(\"CONNECTING\");\r\n    };\r\n    var factory = {};\r\n    factory.get = function(){\r\n        return client;\r\n    };\r\n    return factory;\r\n}])\r\n.run(function ($rootScope, $state, $location, $window, $uibModal, httpRequestsService) {\r\n    console.log('Intel IoT Gateway Development Hub');\r\n\r\n    function resolveFromUrl(url) {\r\n        var states = $state.get();\r\n        for(var i = 0, len = states.length; i< len; i++ ){\r\n            if(states[i] && states[i].url === url){\r\n                console.log(\"statename:\"+states[i].name);\r\n                return states[i].name;\r\n            }\r\n        }\r\n    }\r\n\r\n    var accepted_privacy = acceptedPrivacy();\r\n    if (accepted_privacy) {\r\n        if( requested_url && requested_url.indexOf('dashboard') > -1){\r\n            $rootScope.redirectState = resolveFromUrl(requested_url);\r\n        }\r\n    } else {\r\n        $location.path('/welcome/privacy');\r\n    }\r\n\r\n    $rootScope.$on('$locationChangeStart', function(event) {\r\n        if(!acceptedPrivacy()){\r\n            //event.preventDefault();\r\n            $location.path('/welcome/privacy');\r\n        }\r\n    });\r\n\r\n\r\n    $rootScope.$on(\"Gateway_Not_Reachable\", function (event) {\r\n        console.log(\"Get event: Gateway_Not_Reachable!\");\r\n\r\n        // Abort all requests\r\n        httpRequestsService.abortAllRequests();\r\n\r\n        var no_connection_template =\r\n            '<div class=\"admin-step\">' +\r\n                '<div class=\"row\">' +\r\n                    '<div class=\"col-md-12\">' +\r\n                        '<h1>Intel® IoT Gateway Developer Hub cannot reach the gateway!</h1>' +\r\n                    '</div>' +\r\n                '</div>' +\r\n                '<div class=\"row\">' +\r\n                    '<div class=\"col-md-12\">' +\r\n                        '<div class=\"description\">Please check gateway status, network connection, and then refresh or try again later. Warning: Your previous task may still be running on the gateway, and IoT Gateway Developer Hub may not reflect its running status.</div>' +\r\n                    '</div>' +\r\n                '</div><!-- .row -->' +\r\n                '<div class=\"row admin-modal-btn-row\">' +\r\n                    '<div class=\"col-md-12\">' +\r\n                        '<div class=\"row\">' +\r\n                            '<div class=\"blue-button-md admin-modal-btn center-button\" ng-click=\"clickRefresh()\">Refresh</div>' +\r\n                        '</div>' +\r\n                    '</div>' +\r\n                '</div><!-- .row -->' +\r\n            '</div>';\r\n\r\n        var modalInstance = $uibModal.open({\r\n            template: no_connection_template, // for offline, cannot use templateURL.\r\n            animation: true,\r\n            size: 'lg',\r\n            backdrop: modal_light_dismiss_enabled,\r\n            controller: function ($scope, $window) {\r\n                $scope.clickRefresh = function () {\r\n                    modalInstance.dismiss('cancel');\r\n                    $window.location.reload(); // refresh the current page.\r\n\r\n                    //$window.location.href = '/'; // this is for Firefox to work.\r\n\r\n                    // For Firefox,  $location.path or $window.location.href will not be done before $window.location.reload is run.\r\n                    // Therefore, $window.location.reload will reload the current URL.\r\n                    //$window.location.reload();\r\n                };\r\n            }\r\n        });\r\n\r\n        /* window alert is blocking the whole web browser (for all tabs).... This is not ideal.\r\n        $window.alert('Developer Hub cannot reach gateway!\\n\\nPlease check gateway status, network connection, and then refresh or try again later.\\n\\nWarning: The task you arer running may still be running on the gateway. However, Developer Hub may not be able to sync up to that status if the task is still running.');\r\n        */\r\n    });\r\n});\r\n","config_sensor = {\r\n    broker: {\r\n\t\thost:    null, // was window.location.hostname, but set from $scope.device wan ip address (see $scope.mqttInit in app.js)\r\n\t\twssPort: 9002,\r\n\t\twsPort:  9001, \r\n\t\ttopic: \"/sensors\",\r\n\t\treconnectTimeout: 5000,\r\n\t\treconnectInterval: 3\r\n    },\r\n    charts: [\r\n\t{\r\n\t    title: \"Temperature\",\r\n\t    chartType: \"line\",\r\n\t    units: \"F\",\r\n\t    min: \"0\",\r\n\t    max: \"100\",\r\n\t    targetLow: \"30\",\r\n\t    targetHigh: \"60\",\r\n\t    points: \"50\"\r\n\t},\r\n\t{\r\n\t    title: \"Humidity\",\r\n\t    chartType: \"gauge\",\r\n\t    units: \"%\",\r\n\t    min: \"0\",\r\n\t    max: \"100\",\r\n\t    targetLow: \"30\",\r\n\t    targetHigh: \"60\",\r\n\t    points: \"1\"\r\n\t}\r\n    ]\r\n};\r\n","// Used in HTML as hub-dashboard-linegraph\r\niotgatewayhub.directive('hubDashboardLinegraph', function () {\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: 'partials/hub.dashboard.linegraph.ng.html?version=' + gui_version,\r\n        replace: true,\r\n        scope: {\r\n              latestData: '=',\r\n              scaleSteps: '=',\r\n              scaleStepWidth: '=',\r\n              scaleStartValue: '=',\r\n              pointsToShow: '=',\r\n              units: '=',\r\n              connected: '='\r\n        },\r\n        link: function ($scope, $elem, attrs) {\r\n            var datasets = {\r\n\r\n            };\r\n\r\n            $scope.connected = true;\r\n\r\n            var setOptions = function() {\r\n\r\n                var overrideScale = ($scope.scaleSteps !== null &&\r\n                            $scope.scaleSteps !== undefined &&\r\n                            $scope.scaleStepWidth !== null &&\r\n                            $scope.scaleStepWidth !== undefined &&\r\n                            $scope.scaleStartValue !== null &&\r\n                            $scope.scaleStartValue !== undefined);\r\n\r\n                $scope.options = {\r\n                    animation: false,\r\n                    showScale: true,\r\n                    showTooltips: false,\r\n                    maintainAspectRatio: false,\r\n\r\n                    scaleOverride: overrideScale,\r\n                    scaleSteps: parseInt($scope.scaleSteps),\r\n                    scaleStepWidth: parseFloat($scope.scaleStepWidth),\r\n                    scaleStartValue: parseFloat($scope.scaleStartValue),\r\n                    scaleFontColor: \"#ffffff\",\r\n\r\n                    // String - Message for empty data\r\n                    emptyDataMessage: \" \",\r\n\r\n                    ///Boolean - Whether grid lines are shown across the chart\r\n                    scaleShowGridLines : true,\r\n\r\n                    //String - Colour of the grid lines\r\n                    scaleGridLineColor : \"rgba(0,0,0,.05)\",\r\n\r\n                    //Number - Width of the grid lines\r\n                    scaleGridLineWidth : 1,\r\n\r\n                    //Boolean - Whether to show horizontal lines (except X axis)\r\n                    scaleShowHorizontalLines: true,\r\n\r\n                    //Boolean - Whether to show vertical lines (except Y axis)\r\n                    scaleShowVerticalLines: false,\r\n\r\n                    // String - scale type: \"number\" or \"date\"\r\n                    scaleType: \"date\",\r\n\r\n                    // Boolean - Whether to use UTC dates instead local\r\n                    useUtc: false,\r\n\r\n                    // String - short time format (used for scale labels)\r\n                    scaleTimeFormat: \" \",\r\n\r\n                    //Boolean - Whether the line is curved between points\r\n                    bezierCurve : true,\r\n\r\n                    //Number - Tension of the bezier curve between points\r\n                    bezierCurveTension : 0.4,\r\n\r\n                    //Boolean - Whether to show a dot for each point\r\n                    pointDot : false,\r\n\r\n                    //Number - Radius of each point dot in pixels\r\n                    pointDotRadius : 2,\r\n\r\n                    //Number - Pixel width of point dot stroke\r\n                    pointDotStrokeWidth : 1,\r\n\r\n                    //Number - amount extra to add to the radius to cater for hit detection outside the drawn point\r\n                    pointHitDetectionRadius : 1,\r\n\r\n                    //Boolean - Whether to show a stroke for datasets\r\n                    datasetStroke : true,\r\n\r\n                    //Number - Pixel width of dataset stroke\r\n                    datasetStrokeWidth : 3,\r\n\r\n                    //Boolean - Whether to fill the dataset with a colour\r\n                    datasetFill : false,\r\n\r\n                    legendTemplate : \"<div></div>\"\r\n\r\n                };\r\n            };\r\n\r\n            var trimHistory = function () {\r\n                while ($scope.scatterChart.datasets[0].points.length > $scope.pointsToShow) {\r\n                    $scope.scatterChart.datasets[0].removePoint(0);\r\n                    $scope.dataHistory[0].data.shift();\r\n                }\r\n                // if ($scope.dataHistory[0].data) {\r\n                //     while ($scope.dataHistory[0].data.length > $scope.pointsToShow) {\r\n                //         $scope.dataHistory[0].data.shift();\r\n                //     }\r\n                // }\r\n            };\r\n\r\n            $scope.dataHistory = [\r\n                {\r\n                    label: '',\r\n                    strokeColor: '#ffffff',\r\n                    data: [\r\n                        {x: $scope.latestData.x, y: $scope.latestData.y}\r\n                    ]\r\n                }\r\n            ]; // must be 1 level deep to provide data in a series for chart.js\r\n\r\n            setOptions();\r\n            var chartCanvasFind = $elem.find(\"canvas\");\r\n            console.log(\"hub.dashboard.linegraph.js \", chartCanvasFind, chartCanvasFind.length);\r\n            var canvasContext = chartCanvasFind[0].getContext(\"2d\");\r\n            $scope.scatterChart = new Chart(canvasContext).Scatter($scope.dataHistory, $scope.options);\r\n\r\n            if ($scope.latestData !== null && $scope.latestData !== undefined) {\r\n                $scope.scatterChart.datasets[0].addPoint($scope.latestData.x, $scope.latestData.y);\r\n                $scope.dataHistory[0].data.push({x:$scope.latestData.x, y:$scope.latestData.y});\r\n            }\r\n\r\n            $scope.series = [\"\"];\r\n\r\n            $scope.$watchGroup(['scaleStepWidth', 'scaleStartValue', 'scaleSteps'], function() {\r\n\r\n                setOptions();\r\n                $scope.scatterChart.destroy();\r\n                $scope.scatterChart = new Chart(canvasContext).Scatter($scope.dataHistory, $scope.options);\r\n            });\r\n\r\n            $scope.$watch('latestData', function() {\r\n\r\n                if ($scope.latestData !== null && $scope.latestData !== undefined) {\r\n                   $scope.scatterChart.datasets[0].addPoint($scope.latestData.x,$scope.latestData.y);\r\n                   $scope.dataHistory[0].data.push({x:$scope.latestData.x, y:$scope.latestData.y});\r\n                }\r\n                trimHistory();\r\n\r\n                $scope.scatterChart.update();\r\n            });\r\n\r\n            $scope.$watch('pointsToShow', function() {\r\n               trimHistory();\r\n               $scope.scatterChart.update();\r\n            });\r\n\r\n            $scope.$watch('connected', function() {\r\n                if ($scope.connected) {\r\n                    $scope.dataHistory[0].strokeColor = \"#ffffff\";\r\n                } else {\r\n                    $scope.dataHistory[0].strokeColor = \"#7f868c\";\r\n                }\r\n                $scope.scatterChart.destroy();\r\n                $scope.scatterChart = new Chart(canvasContext).Scatter($scope.dataHistory, $scope.options);\r\n            });\r\n\r\n            setOptions();\r\n        }\r\n    };\r\n});","// Used in HTML as hub-dashboard-radial-graph\r\niotgatewayhub.directive('hubDashboardRadialGraph', function () {\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: 'partials/hub.dashboard.radialgraph.ng.html?version=' + gui_version,\r\n        replace: true,\r\n        scope: {\r\n              data: '=',\r\n              units: '=',\r\n              upperRange: '=',\r\n              lowerRange: '=',\r\n              connected: '=',\r\n        },\r\n        link: function ($scope, $elem, attrs) {\r\n            console.log($scope.scaleSteps);\r\n\r\n            function createDataPair() {\r\n                $scope.dataPair = [($scope.upperRange-$scope.lowerRange)-$scope.data, $scope.data];\r\n            }\r\n\r\n            $scope.$watch('data', function() {\r\n                createDataPair();\r\n            });\r\n\r\n            $scope.options = {\r\n                showTooltips: false,\r\n\r\n                //Boolean - Whether we should show a stroke on each segment\r\n                segmentShowStroke : true,\r\n\r\n                //String - The colour of each segment stroke\r\n                segmentStrokeColor : \"#003c71\",\r\n\r\n                //Number - The width of each segment stroke\r\n                segmentStrokeWidth : 4,\r\n\r\n                //Number - The percentage of the chart that we cut out of the middle\r\n                percentageInnerCutout : 80, // This is 0 for Pie charts\r\n\r\n                //Number - Amount of animation steps\r\n                animationSteps : 10,\r\n\r\n                //String - Animation easing effect\r\n                animationEasing : \"easeOutBounce\",\r\n\r\n                //Boolean - Whether we animate the rotation of the Doughnut\r\n                animateRotate : false,\r\n\r\n                //Boolean - Whether we animate scaling the Doughnut from the centre\r\n                animateScale : false,\r\n            };\r\n\r\n            $scope.doughnutColors = [\"#003c71\",\"#8DC449\"];\r\n            $scope.labels = [\"\",\"\"];\r\n\r\n            $scope.$watch('connected', function() {\r\n                if ($scope.connected) {\r\n                    $scope.doughnutColors = [\"#003c71\",\"#8DC449\"];\r\n                } else {\r\n                    $scope.doughnutColors = [\"#003c71\",\"#7f868c\"];\r\n                }\r\n            });\r\n        }\r\n    };\r\n});","// In HTML, this will be used as hub-dashboard-sensor.\r\niotgatewayhub.directive('hubDashboardSensor', function () {\r\n    return {\r\n        restrict: 'E',\r\n        templateUrl: 'partials/hub.dashboard.sensor.ng.html?version=' + gui_version,\r\n        link: function ($scope, elem, attrs) {\r\n            console.log(\"hubDashboardSensor \", $scope);\r\n        }\r\n    };\r\n});","// Used in HTML as hub-loading\r\niotgatewayhub.directive('hubLoading', function () {\r\n    return {\r\n        restrict : 'E',\r\n        templateUrl: 'partials/hub.loading.ng.html?version=' + gui_version,\r\n\r\n        controller: function ($scope, $http) {\r\n            $scope.loadMessage = \"Loading..\";\r\n            $scope.showMessage = true; // for modern browsers\r\n            console.log(\"hubLoading \", $scope);\r\n        }\r\n    };\r\n});","// Used in HTML as hub-network-settings\r\niotgatewayhub.directive('hubNetworkSettings',function(){\r\n    return {\r\n        url:         '/hub/networksettings', \r\n        templateUrl: '/partials/hub.networksettings.ng.html?version=' + gui_version,\r\n        resolve:     {},\r\n        controller: function($scope,$state,$http,$rootScope,$timeout){\r\n\r\n            $scope.tmpSettings = {\r\n                single_url: $scope.settings.proxy.single_url,\r\n                single_port: $scope.settings.proxy.single_port,\r\n\r\n                http_url: $scope.settings.proxy.http_url,\r\n                http_port: $scope.settings.proxy.http_port,\r\n\r\n                https_url: $scope.settings.proxy.https_url,\r\n                https_port: $scope.settings.proxy.https_port,\r\n\r\n                ftp_url: $scope.settings.proxy.ftp_url,\r\n                ftp_port: $scope.settings.proxy.ftp_port,\r\n\r\n                socks_url: $scope.settings.proxy.socks_url,\r\n                socks_port: $scope.settings.proxy.socks_port,\r\n\r\n                no_proxy: $scope.settings.proxy.no_proxy\r\n            };\r\n\r\n            function init(){\r\n                if(!authorization.username){\r\n                   $state.go('welcome.login',{});\r\n                }\r\n\r\n                var defaults ={\r\n                    saveText: \"Ok\",\r\n                    cancelText: \"Cancel\",\r\n                    insideModal:false,\r\n                    hideTestSettings:true,\r\n                    maintainContextAfterSave: false\r\n                };\r\n\r\n                if ($scope.cancelText) defaults.cancelText = $scope.cancelText;\r\n                \r\n                $.extend($scope, defaults,{\r\n                    isSaving: false,\r\n                    showSaveResult: false,\r\n                    networkSettingsTest: {\r\n                        running:false,\r\n                        status:\"Test settings\",\r\n                        result:\"\",\r\n                        success:null,\r\n                        isVisible:false\r\n                    },\r\n                    saveResult:{\r\n                        message:\"\",\r\n                        success:null,\r\n                        isVisible:false\r\n                    }\r\n                });\r\n            }\r\n\r\n            init();\r\n\r\n            $scope.onSaveSuccess = function(result){\r\n                $scope.isSaving = false;\r\n                $scope.saveResult.isVisible = true;\r\n                $scope.saveResult.success = true;\r\n                $scope.saveResult.message = \"Saved settings\";\r\n                $timeout(function(){\r\n                    $scope.saveResult.isVisible = false;\r\n                }, linger_info_timeout_milliseconds);\r\n            };\r\n\r\n            $scope.onSaveFail = function(result){\r\n                $scope.$emit(\"hub.unlockModal\");\r\n\r\n                $scope.isSaving = false;\r\n                $scope.saveResult.isVisible = true;\r\n                $scope.saveResult.success = false;\r\n                $scope.saveResult.message = result.message;\r\n                $timeout(function(){\r\n                    $scope.saveResult.isVisible = false;\r\n                }, linger_info_timeout_milliseconds);\r\n            };\r\n\r\n            $scope.nextAction = function(){\r\n                var blockUI = true;\r\n\r\n                $scope.$emit(\"hub.lockModal\", [$scope]);\r\n\r\n                $scope.isSaving =true;\r\n\r\n                // should ideally be passed to applyProxySettings as a model\r\n                $scope.settings.proxy = $scope.tmpSettings;\r\n\r\n                function success(response){\r\n                    $scope.$emit(\"hub.unlockModal\");\r\n \r\n                    if ($scope.maintainContextAfterSave) {\r\n                        $scope.onSaveSuccess(response);\r\n                    } else {\r\n                        $scope.doneSuccessCallback(response);\r\n                    }\r\n                }\r\n\r\n                $scope.applyProxySettings(success,  $scope.onSaveFail);\r\n            };\r\n\r\n            //$scope.networkSettingsTest = {running:true,status:'fail'};\r\n\r\n            $scope.testProxySettingsCallback = function(result){\r\n                $scope.networkSettingsTest.result = result ? \"Connection established!\": \"Connection failed.\";\r\n                $scope.networkSettingsTest.success = !!result;\r\n\r\n                $scope.networkSettingsTest.running=false;\r\n\r\n                $timeout(function(){\r\n                     $scope.networkSettingsTest.isVisible = false;\r\n                    $scope.networkSettingsTest.success =false;\r\n                },linger_info_timeout_milliseconds);\r\n            };\r\n\r\n            $scope.testSettings = function(){\r\n                $scope.networkSettingsTest.isVisible = true;\r\n                $scope.networkSettingsTest.running=true;\r\n                $scope.networkSettingsTest.result=\"Testing..\";\r\n                $scope.testProxySettings(\r\n                    function(){$scope.testProxySettingsCallback(true);},\r\n                    function(){$scope.testProxySettingsCallback(false);});\r\n            };\r\n        }\r\n    };\r\n});","// Used in HTML as show-oem-on-load\r\niotgatewayhub.directive('showOemOnLoad', function() {\r\n    return {\r\n        restrict: 'A',\r\n        link: function(scope, element, attrs) {\r\n            element.bind('load', function() {\r\n                scope.hideOEMBranding = false;\r\n            });\r\n        }\r\n    };\r\n});\r\n","// Used in HTML as ps-mouse-over\r\niotgatewayhub.directive('psMouseOver', function () {\r\n    return {       \r\n        link: function(scope, element) {\r\n            element.bind(\"mouseover\", function(e){\r\n            \tconsole.log( 'mousever');\r\n                e.stopPropagation();\r\n                e.preventDefault();    \r\n                element.perfectScrollbar('update');\r\n            });   \r\n        }\r\n    };\r\n});","/*angular.module('app', ['ngAnimate'])\r\n\r\n.controller('FormCtrl', ['$scope', function($scope) {\r\n  // hide error messages until 'submit' event\r\n  $scope.submitted = false;\r\n  // hide success message\r\n  $scope.showMessage = false;\r\n  // method called from shakeThat directive\r\n  $scope.submit = function() {\r\n    // show success message\r\n    $scope.showMessage = true;\r\n  };\r\n}])\r\n*/\r\n// Used in HTML as shake-that\r\niotgatewayhub.directive('shakeThat', ['$animate', function($animate) {\r\n\r\n    return {\r\n        require: '^form',\r\n        scope: {\r\n            submit: '&',\r\n            submitted: '='\r\n        },\r\n\r\n        link: function(scope, element, attrs, form) {\r\n\r\n            // listen on submit event\r\n            element.on('submit', function() {\r\n                // tell angular to update scope\r\n                scope.$apply(function() {\r\n                    // everything ok -> call submit fn from controller\r\n                    if (form.$valid) return scope.submit();\r\n\r\n                    // show error messages on submit\r\n                    scope.submitted = true;\r\n                    // shake that form\r\n                    $animate.addClass(element, 'shake', function() {\r\n                        $animate.removeClass(element, 'shake');\r\n                    });\r\n                });\r\n            });\r\n        }\r\n    };\r\n\r\n}]);","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\r\n    $stateProvider.state(\"error\",{\r\n        url:         '/error',\r\n        templateUrl: '/partials/error.ng.html?version=' + gui_version,\r\n        controller: function($scope,$state,$http,$rootScope){\r\n\r\n        }\r\n    });\r\n});","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\r\n    $stateProvider.state('hub.dashboard.cloudcmd',{\r\n\r\n        url: '/cloudcmd',\r\n        templateUrl: '/partials/hub.cloudcmd.ng.html?version=' + gui_version,\r\n        controller: function($window,$scope,$state,$rootScope){\r\n\r\n        }\r\n\r\n    });\r\n});","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\r\n\r\n    $stateProvider.state('hub.dashboard.documentation',{\r\n        url: '/dashboard/documentation',\r\n        templateUrl: '/partials/hub.dashboard.documentation.ng.html?version=' + gui_version,\r\n        controller: function($scope,$state,$http,$rootScope){\r\n            $scope.viewSensorSetupTutorial = function () {\r\n                var url = $state.href('tutorial.sensorsetup', {parameter: \"parameter\"});\r\n                window.open(url,'_blank');\r\n            };\r\n            $scope.viewSensorCloudTutorial = function () {\r\n                var url = $state.href('tutorial.sensorcloud', {parameter: \"parameter\"});\r\n                window.open(url,'_blank');\r\n            };\r\n            $scope.viewHelixTutorial = function () {\r\n                var url = $state.href('tutorial.helixapp', {parameter: \"parameter\"});\r\n                window.open(url,'_blank');\r\n            };\r\n            $scope.viewSaveDeployTutorial = function () {\r\n                \r\n                console.log(\"Is this Quark? \" + $scope.isQuark);\r\n                var state_chosen = 'tutorial.savedeploy';\r\n                if ($scope.isQuark) {\r\n                    state_chosen = 'tutorial.savedeploy_quark';\r\n                }\r\n\r\n                var url = $state.href(state_chosen, { parameter: \"parameter\" });\r\n                console.log(\"URL is \" + url);\r\n                window.open(url,'_blank');\r\n            };\r\n        }\r\n    \r\n    });\r\n});","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\r\n    \r\n    $stateProvider.state('hub.dashboard',{\r\n        url: '',\r\n        abstract: true,\r\n        templateUrl: '/partials/hub.dashboard.ng.html?version=' + gui_version,\r\n        controller: function($window,$scope,$state,$rootScope,$timeout){\r\n\r\n            $scope.timerExpired = function(chartMatch) {\r\n                console.log(\"timerExpired\", chartMatch);\r\n                chartMatch.connected = false;\r\n                $scope.$apply();\r\n            };\r\n            \r\n            $rootScope.isSensorPanelExpanded = true; // determines state of top bar: expanded or minimized, utilized by dashboardToggle()\r\n          \r\n            $scope.sensors_charted = []; // Container for sensors. Sensors have a charts property that contain each chart\r\n            $scope.charts_flat_list = []; // Flat list of all charts, regardless of sensor parent\r\n\r\n            $scope.dashboardToggle = function(){\r\n                $rootScope.isSensorPanelExpanded = !$rootScope.isSensorPanelExpanded;\r\n                // console.log(\"dashboardToggle: \" + $rootScope.isSensorPanelExpanded);\r\n            };\r\n\r\n            $scope.carouselPrevious = function(){\r\n                console.log(\"carousel previous\");\r\n            };\r\n\r\n            $scope.carouselNext = function(){\r\n                console.log(\"carousel next\");\r\n            };\r\n\r\n            $scope.setDashboard();\r\n\r\n            // called when the client loses its connection\r\n            $scope.onConnectionLost = function(responseObject) {\r\n                if (responseObject.errorCode !== 0) {\r\n                    console.log(\"onConnectionLost:\"+responseObject.errorMessage);\r\n                }\r\n            };\r\n\r\n            // called when a message arrives\r\n            $scope.onMessageArrived = function(message) {\r\n                //console.log(\"sensor data received\");\r\n                if(log_message_json){\r\n                     console.log(\"onMessageArrived:\"+message.payloadString);\r\n                }\r\n               \r\n                try{\r\n                    var entry = JSON.parse(message.payloadString);\r\n\r\n                    var  _id = entry.id;\r\n                    \r\n                    // New chart - sensor data model for the visualizers\r\n                    var sensorMatches = $.grep($scope.sensors_charted, function(e){ return e.id == _id; });\r\n                    var sensorMatch;\r\n                    if (sensorMatches.length > 1) {\r\n                        console.log(\"Error in state.hub.dashboard:: A sensor was added twice to the same array\", _id);\r\n                    } else {\r\n                        if (sensorMatches.length == 1) {\r\n                            // One match, let's now consider if there is already a chart added to it\r\n                            sensorMatch = sensorMatches[0];\r\n                        } else {\r\n                            // Zero matches. This sensor has not yet been added to the sensors list\r\n                            sensorMatch = { \r\n                            charts: [],\r\n                            id: _id, \r\n                            title: entry.title\r\n                            };\r\n                            $scope.sensors_charted.push(sensorMatch);\r\n                        }\r\n                        sensorMatch.mostRecentValue = entry.datum[1];\r\n                        sensorMatch.priority = parseInt(entry.priority);\r\n                        sensorMatch.mostRecentUnits = entry.units;\r\n                        sensorMatch.mostRecentSource = entry.dataSource;\r\n                        sensorMatch.mostRecentTimestamp = new Date(parseInt(entry.datum[0])); \r\n                    }\r\n\r\n                    var chartMatches = $.grep(sensorMatch.charts, function(e){ return e.dataSource == entry.dataSource; });\r\n                    var chartMatch;\r\n                    if (chartMatches.length > 1) {\r\n                        console.log(\"Error in state.hub.dashboard:: A chart was added twice to the same sensor\", _id, entry.dataSource);\r\n                    } else if (chartMatches.length == 1) {\r\n                        chartMatch = chartMatches[0];\r\n                    } else {\r\n                        // Zero matches. This chart has not yet been added to the sensor's chart list\r\n                        chartMatch = {};\r\n                        sensorMatch.charts.push(chartMatch);\r\n                        $scope.charts_flat_list.push(chartMatch);\r\n                    }\r\n                    \r\n                    chartMatch.parentSensorTitle = sensorMatch.title;\r\n                    chartMatch.chartType = entry.chartType;\r\n                    if (entry.chartType == \"line\") {\r\n                        chartMatch.value = { x: entry.datum[0], y: entry.datum[1]};\r\n                    } else {\r\n                        chartMatch.value = entry.datum[1];\r\n                    }\r\n                    chartMatch.mostRecentValue = entry.datum[1];\r\n                    chartMatch.sourcePriority = parseInt(entry.sourcePriority);\r\n                    chartMatch.dataSource = entry.dataSource;\r\n                    chartMatch.min = entry.min;\r\n                    chartMatch.max = entry.max;  \r\n                    chartMatch.stepWidth = (entry.max - entry.min) / 5;\r\n                    chartMatch.pointsToShow = parseInt(entry.points);     \r\n                    chartMatch.units = entry.units;   \r\n                    chartMatch.timeToLive = parseFloat(entry.ttl);\r\n                    chartMatch.connected = true;\r\n                    chartMatch.mostRecentTimestamp = new Date(parseInt(entry.datum[0])); \r\n                    if (chartMatch.timerExpiredPromise) $timeout.cancel(chartMatch.timerExpiredPromise);\r\n                    chartMatch.timerExpiredPromise = $timeout( function(){ $scope.timerExpired(chartMatch); }, chartMatch.timeToLive * 1000);  \r\n                    $scope.$apply();\r\n\r\n                }catch(err){\r\n                    //console.log(\"ERROR onMessageArrive \"+err);\r\n                }\r\n            };\r\n\r\n            $scope.mqttInit = function(){\r\n                console.log(\"hub dashboard mqttInit 150a\");\r\n                //MQTT\r\n                /**\r\n                var broker = {\r\n                  host: config.broker.host,\r\n                  port: config.broker.wssPort,    //default port is  WSS port:9001\r\n                  id: \"client_\" + parseInt(Math.random() * 100, 10),\r\n                  topic: config.broker.topic,\r\n                  reconnectTimeout: config.broker.reconnectTimeout,\r\n                  reconnectInterval: config.broker.reconnectInterval,\r\n                  protocol: window.location.protocol,\r\n                  path: \"/mqtt\"\r\n                };\r\n                **/\r\n                var loop = 0;\r\n                var reconnect = false; //this is how Rob had it configured. Maybe set this to true for production?\r\n\r\n                //var _host = window.location.hostname;\r\n                var _host = $window.config_sensor.broker.host !== null ? $window.config_sensor.broker.host : window.location.hostname;//$scope.device[\"lan\"][\"eth0\"];\r\n                if(no_local_config_hosts && (no_local_config_hosts.indexOf(window.location.hostname)!=-1)){\r\n                    _host = window.location.hostname;\r\n                }\r\n                var _useSSL = false;\r\n                var _port   = $window.config_sensor.broker.wsPort;\r\n                if(window.location.protocol==='https:'){\r\n                    _port = $window.config_sensor.broker.wssPort;\r\n                    _useSSL = true;\r\n                }\r\n\r\n                var _id  =  \"client_\" + parseInt(Math.random() * 100, 10);\r\n                var _reconnectInterval = $window.config_sensor.broker.reconnectInterval;\r\n                var _reconnectTimeout  = $window.config_sensor.broker.reconnectTimeout;\r\n                var _topic             = $window.config_sensor.broker.topic;\r\n                $scope.mqtt_client = new $window.Paho.MQTT.Client(_host, _port, _id);\r\n                $scope.mqtt_client.onConnectionLost = $scope.onConnectionLost;  \r\n                $scope.mqtt_client.onMessageArrived = $scope.onMessageArrived;\r\n\r\n                // connect the client\r\n                $scope.mqtt_client.connect({\r\n                    useSSL: _useSSL,\r\n                    timeout: 3,\r\n                    cleanSession: true,\r\n                    onSuccess: function () {\r\n                        console.log(\"hub dashboard MQTT connection succeeded to \"+_host+\":\"+_port+\" Subscribing to topic: \"+_topic);\r\n                        //$link.removeClass(\"disconnected\").addClass(\"connected\");                     \r\n                        $scope.mqtt_client.subscribe(_topic,{qos: 1});\r\n                    },\r\n                    onFailure: function (message) {\r\n\r\n                        function initMqtt() {$scope.mqttInit();  }\r\n\r\n                      if(reconnect) {\r\n                        console.log(\"MQTT connection failed. Retrying. Error Message -  \"+ message.errorMessage);\r\n\r\n                        while(loop < _reconnectInterval) {\r\n                              loop++;\r\n                                  setTimeout(initMqtt, _reconnectTimeout);\r\n                        } \r\n                        reconnect = false;\r\n                      }\r\n                      else {\r\n                        //$link.removeClass(\"connected\").addClass(\"disconnected\");\r\n                        console.log(\"MQTT connection failed. Please ensure the message broker is up. Error Message -  \"+ message.errorMessage);\r\n                      }\r\n                    }\r\n                });\r\n            };\r\n\r\n            $scope.mqttInit();\r\n        }\r\n    });\r\n});","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\r\n\r\n    $stateProvider.state('hub.dashboard.nodered',{\r\n        url: '/nodered',\r\n        templateUrl: '/partials/hub.nodered.ng.html?version=' + gui_version,\r\n        controller: function($window,$scope,$state,$rootScope){\r\n        }\r\n    })\r\n    .state('hub.dashboard.helix',{\r\n        url: '/helix',\r\n        templateUrl: '/partials/hub.helix.ng.html?version=' + gui_version,\r\n        controller: function($window,$scope,$state,$rootScope){\r\n        }\r\n    })\r\n    .state('hub.dashboard.luci',{\r\n        url: '/luci',\r\n        templateUrl: '/partials/hub.luci.ng.html?version=' + gui_version,\r\n        controller: function($window,$scope,$state,$rootScope){\r\n        }\r\n    });\r\n});\r\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\r\n\r\n    $stateProvider.state('hub.dashboard.packages',{\r\n        url: '/dashboard/packages',\r\n        templateUrl: '/partials/hub.dashboard.packages.ng.html?version=' + gui_version,\r\n        controller: function($scope,$state,$http,$rootScope,$uibModal){\r\n            $scope.gettingPackages = true;\r\n            $scope.setPackages('',\r\n                function successCallback(data){\r\n                    $scope.gettingPackages = false;\r\n                }, function errorCallback(response) {\r\n                    $scope.gettingPackages = false;\r\n                });\r\n            $scope.sortType = 'name';\r\n        }\r\n    })\r\n    .state('hub.dashboard.package',{\r\n        url: '/package',\r\n        templateUrl: '/partials/hub.package.ng.html?version=' + gui_version,\r\n        params: { packageUrl : null, packageName:null},\r\n        controller: function($window,$scope,$state,$rootScope,$stateParams){\r\n            console.log(\"launching package at url:\"+$stateParams.packageUrl);\r\n            $scope.packageUrl = $stateParams.packageUrl;\r\n            $scope.packageName =  $stateParams.packageName;\r\n            if(!$scope.packageUrl){\r\n                $state.go(\"hub.dashboard.packages\");\r\n            }\r\n        }\r\n    });\r\n});\r\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\r\n    $stateProvider.state('hub.dashboard.sensors',{\r\n        url: '/dashboard/sensors',\r\n        templateUrl: '/partials/hub.dashboard.sensors.ng.html?version=' + gui_version,\r\n        controller: function($window,$scope,$state,$rootScope,$uibModal,utilityFunctionsService){\r\n            $scope.sortType = 'parentSensorTitle';\r\n\r\n            $scope.doManageSensors = function(){\r\n                var _cookie     = getCookie(\"noreshow\");\r\n                console.log(\"hub control found noreshow cookie as \"+_cookie+\" #8910a\");\r\n                if(_cookie){\r\n                    $scope.launchQuickTools('nodered');\r\n                }else{\r\n                    $scope.openManageSensorsDialogModal();\r\n                }\r\n            };\r\n\r\n            $scope.openManageSensorsDialogModal = function(){\r\n\r\n                console.log(\"hub control opening MANAGE SENSORS dialog modal #073a\");\r\n                var modalInstance = $uibModal.open({\r\n                    templateUrl: 'partials/hub.manage.sensors.dialog.ng.html?version=' + gui_version,\r\n                    animation:    true,\r\n                    size: 'lg',\r\n                    backdrop: modal_light_dismiss_enabled,\r\n                    scope: $scope,\r\n                    controller: function($scope,$state,$http,$rootScope){\r\n                        $scope.noreshow = true;\r\n\r\n                        $scope.closeModal = function(){\r\n                            if($scope.noreshow){\r\n                                console.log(\"hub control setting noreshow cookie true #8910\");\r\n                                utilityFunctionsService.setCookie(\"noreshow\",true,license_duration_days);\r\n                            }\r\n                            console.log(\"hub control closing manage sensors dialog modal 0 #073c\");\r\n                            modalInstance.dismiss('cancel');\r\n                            $scope.launchQuickTools('nodered');\r\n                        };\r\n                        $scope.viewTutorial = function(){\r\n                            //console.log(\"continuing to sensors tutorial #073dx\");\r\n                            //modalInstance.dismiss('cancel');\r\n                            //$state.go(\"hub.dashboard.tutorial.sensor\");\r\n                            if($scope.noreshow){\r\n                                console.log(\"hub control setting noreshow cookie true #8910\");\r\n                                utilityFunctionsService.setCookie(\"noreshow\",true,license_duration_days);\r\n                            }\r\n                            var url = $state.href('tutorial.sensorsetup', {parameter: \"parameter\"});\r\n                            window.open(url,'_blank');\r\n                        };\r\n                        $scope.viewVideo = function(){\r\n                            if($scope.noreshow){\r\n                                console.log(\"hub control setting noreshow cookie true #8910\");\r\n                                utilityFunctionsService.setCookie(\"noreshow\",true,license_duration_days);\r\n                            }\r\n                            var url = \"https://software.intel.com/videos/iot-dev-hub-setup-sensor-in-node-red\";\r\n                            window.open(url,'_blank');\r\n                        };\r\n\r\n                    }\r\n\r\n                });\r\n\r\n            };\r\n\r\n        }\r\n    });\r\n});","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\r\n    $stateProvider.state('hub.dashboard.tools',{\r\n        url: '/dashboard/tools',\r\n        templateUrl: '/partials/hub.dashboard.admin.ng.html?version=' + gui_version,\r\n        controller: function($scope,$state,$rootScope,$uibModal){\r\n            console.log(\"admin tools mec status \"+$scope.mec+\" #0812a\");\r\n\r\n            $scope.confirmRestartOS = function(){\r\n                var modalInstance = $uibModal.open({\r\n                    templateUrl: 'partials/hub.confirm.restart.os.ng.html?version=' + gui_version,\r\n                    animation:    true,\r\n                    size: 'lg',\r\n                    backdrop: modal_light_dismiss_enabled,\r\n                    scope: $scope,\r\n                    controller: function($scope,$state,$http,$rootScope,$timeout){\r\n                        $scope.restarting_os     = false;\r\n                        $scope.restarted_os      = false;\r\n                        $scope.message           = '';\r\n                        $scope.error_message     = '';\r\n\r\n                        $scope.restartOS = function(){\r\n                            if($scope.restarting_os){\r\n                                return;\r\n                            }\r\n                            $scope.error_message = '';\r\n                            $scope.restarting_os = true;\r\n                            $scope.restarted_os  = false;\r\n                            $scope.rebootGateway(\r\n                                function successCallback(response) {\r\n                                    //no defined return json for this. if 200 OK then assume success of call (according to Nick)\r\n                                    console.log(\"reboot gateway process was successful  #1871b\");\r\n                                    $scope.restarting_os = false;\r\n                                    $scope.restarted_os  = true;\r\n                                    $scope.message       = \"The reboot process was successful. Forwarding to login in 10 seconds...\";\r\n                                },function errorCallback(response) {\r\n                                    $scope.error_message = 'Rebooting gateway failed! Please manually reboot the gateway!';\r\n                                    console.log(\"reboot gateway  process failed  #1871E\");\r\n                                }, restart_welcome_latency_milliseconds);\r\n                        };\r\n\r\n                        $scope.closeModal = function(){\r\n                            console.log(\"close confirm restart modal\");\r\n                            modalInstance.dismiss('cancel');\r\n                        };\r\n                    }\r\n                });\r\n\r\n            };\r\n\r\n            $scope.configureNetwork = function(){\r\n                $scope.getProxySettings(function(){\r\n                    $scope.cancelText=\"Cancel\";\r\n                    $scope.isInsideModal = true;\r\n                    $scope.checkMECDetails();\r\n\r\n                    $scope.skipSettings = function(){\r\n                        networkSettingsModal.dismiss();\r\n                    };\r\n\r\n                    $scope.doneSuccessCallback = function(){\r\n                        networkSettingsModal.dismiss();\r\n                    };\r\n\r\n                    console.log(\"show network settings from dashboard\");\r\n                    var networkSettingsModal = $uibModal.open({\r\n                        templateUrl: '/partials/hub.networksettings.dashboard.ng.html?version=' + gui_version,\r\n                        animation: true,\r\n                        size: 'lg',\r\n                        scope: $scope,\r\n                        backdrop: modal_light_dismiss_enabled\r\n                    });\r\n\r\n                    $scope.closeModal = function(){\r\n                        console.log(\"hub canceling os upgrade #9033b\");\r\n                        networkSettingsModal.dismiss('cancel');\r\n                    };\r\n                });\r\n            };\r\n\r\n            $scope.onClickUpgrade = function(){\r\n                var suppress = $scope.suppressReminder = getCookie('upgradeMessage')!=\"\";\r\n\r\n                if($scope.mec.enabled){\r\n                    console.log(\"no upsell, suppress and mec enabled\");\r\n                    // no upsell, suppress and mec\r\n                    $scope.openOSUpgradeModal1b();\r\n                    return;\r\n                }\r\n\r\n                console.log(\"no upsell, suppress and no mec\");\r\n                // no upsell, suppress, and no mec\r\n                $scope.openOSUpgradeModal2();\r\n            };\r\n\r\n            $scope.onClickSaveOSImage = function(){\r\n               \r\n                var suppress = $scope.suppressReminder = getCookie('upgradeMessage')!=\"\";\r\n              \r\n                if(!$scope.pro && !suppress){\r\n                    console.log(\"upsell, no suppress\");\r\n                    // upsell, no suppress\r\n                    $scope.confirmOSUpgrade($scope.openOSImageModal0);\r\n                    return;\r\n                }\r\n               \r\n                //console.log(\"no upsell, suppress and no mec\");\r\n                // no upsell, suppress, and no mec\r\n                $scope.openOSImageModal0();\r\n            };\r\n\r\n            $scope.openChangePassModal0 = function(){\r\n\r\n                console.log(\"hub control opening change password modal #448a\");\r\n                var modalInstance = $uibModal.open({\r\n                    templateUrl: 'partials/hub.change.password.ng.html?version=' + gui_version,\r\n                    animation:    true,\r\n                    size: 'lg',\r\n                    backdrop: modal_light_dismiss_enabled,\r\n                    scope: $scope,\r\n                    controller: function($scope,$state,$http){\r\n                        console.log(\"hub control opening OS image modal 0 #448b\");\r\n                        $scope.error_message = null;\r\n\r\n                        $scope.update = {\r\n                            username: null,\r\n                            password: null,\r\n                            newpassword: null,\r\n                            confirmnewpassword: null\r\n                        };\r\n                        $scope.closeModal = function(){\r\n                            console.log(\"hub control closing os image modal 0 #448c\");\r\n                            modalInstance.dismiss('cancel');\r\n                        };\r\n\r\n                        $scope.changePassword = function(){\r\n                            $scope.error_message = null; //reset so error message goes away\r\n                            console.log(\"hub changing password #2029a\");\r\n                            var _username           = $scope.update.username;\r\n                            var _password           = $scope.update.password;\r\n                            var _newpassword        = $scope.update.newpassword;\r\n                            var _confirmnewpassword = $scope.update.confirmnewpassword;\r\n                            if(!_newpassword || _newpassword.length<3){\r\n\r\n                                $scope.error_message = \"The new password must be at least 3 characters long.\";\r\n                            }else if(_newpassword!==_confirmnewpassword){\r\n                                $scope.error_message = \"The new passwords do not match.\";\r\n                            }else{\r\n\r\n                                $http({\r\n                                    method: 'PUT',\r\n                                    url:    '/api/auth',\r\n                                    data:  JSON.stringify({\"username\":_username,\"password\":_password,\"newpassword\":_newpassword}),\r\n                                    headers : {\r\n                                        'Content-type' : 'application/json'\r\n                                    }\r\n                                }).then(function successCallback(response) {\r\n\r\n                                    if(response.data.status==='success'){\r\n                                        console.log(\"hub change password succeded #2029b\");\r\n                                        $scope.openConfirmChangePasswordModal(_username);\r\n                                        modalInstance.dismiss('cancel');\r\n                                    }else{\r\n                                        console.log(\"hub change password failed #2029F\");\r\n                                        $scope.error_message = \"ERROR: \"+response.data.error;\r\n                                        //what to do if fails?\r\n                                    }\r\n                                }, function errorCallback(response) {\r\n\r\n                                    console.log(\"hub change password failed #2029F\");\r\n                                    $scope.error_message = \"ERROR: \"+response;\r\n\r\n                                });\r\n\r\n                            }\r\n\r\n                        };\r\n\r\n                    }\r\n\r\n                });\r\n            };\r\n\r\n            $scope.openConfirmChangePasswordModal = function(username){\r\n\r\n                console.log(\"hub control opening confirm change password modal #449a\");\r\n                var modalInstance = $uibModal.open({\r\n                    templateUrl: 'partials/hub.change.password.confirm.ng.html?version=' + gui_version,\r\n                    animation:    true,\r\n                    size: 'lg',\r\n                    backdrop: modal_light_dismiss_enabled,\r\n                    scope: $scope,\r\n                    controller: function($scope){\r\n                        console.log(\"hub control opening confirm change password modal #449b\", username);\r\n                        $scope.username = username;\r\n                        $scope.closeModal = function(){\r\n                            console.log(\"hub control closing os image modal 0 #448c\");\r\n                            modalInstance.dismiss('cancel');\r\n                        };\r\n\r\n\r\n\r\n                    }\r\n\r\n                });\r\n            };\r\n\r\n            $scope.showFactoryReset = function(){\r\n                var modalInstance = $uibModal.open({\r\n                    templateUrl: 'partials/hub.inform.os.update.inprogress.ng.html?version=' + gui_version,\r\n                    animation:    true,\r\n                    size: 'lg',\r\n                    backdrop: modal_light_dismiss_enabled,\r\n                    scope: $scope,\r\n                    controller: function($scope,$state,$http,$rootScope,$timeout){\r\n                        $scope.title_message = \"Restore Factory OS: Restoring Default Operating System\";\r\n                        $scope.description_message = \"The gateway's original operating system and file system is being restored. This should take several minutes.\";\r\n                        $scope.bar_before_message = \"Restoring Default OS...\";\r\n                        $scope.bar_after_message = \"The gateway will automatically restart once restore is complete.\";\r\n                        $scope.error_message = null;\r\n                        $scope.show_close_button = false;\r\n\r\n                        $scope.closeModal = function(){\r\n                            modalInstance.dismiss('cancel');\r\n                        };\r\n\r\n                        $scope.doFactoryReset = function(){\r\n                            console.log(\"hub control peforming factory reset #6019a\");\r\n                            //$scope.doing_factory_reset = true;\r\n                            $scope.error_message = null;\r\n                            $scope.show_close_button  = false;\r\n\r\n                            // briefly cancel the network checking so that no connection error won't pop-up.\r\n                            // When we go to state.hub again, it will be rescheduled.\r\n                            $scope.stopCheckingNetwork();\r\n\r\n                            $http({\r\n                                method: 'POST',\r\n                                url:    '/api/osc'\r\n                            }).then(function successCallback(response) {\r\n                                console.log(\"hub control factory reset returned status: \"+response.data.status+\". Forwarding to login. #6019b\");\r\n                                $timeout(function(){\r\n                                    // force to show login\r\n                                    do_validate_session = false;\r\n                                    $state.go(\"welcome.login\");\r\n                                }, factory_reset_welcome_latency_milliseconds);\r\n                            },function errorCallback(response) {\r\n                                console.log(\"hub control factory reset process encountered server error #6019z. Forwarding in 30 seconds to login.\");\r\n                                $scope.startCheckingNetwork();\r\n                                $scope.bar_after_message = null;\r\n                                $scope.error_message = 'Restoring failed!';\r\n                                $scope.show_close_button = true;\r\n                                setupNoConnection(true);\r\n                            });\r\n                        };\r\n\r\n                        setupNoConnection(false);\r\n                        $scope.doFactoryReset();\r\n                    }\r\n                });\r\n            };\r\n\r\n            $scope.confirmFactoryReset = function(){\r\n                console.log(\"confirming factory reset\");\r\n                var modalInstance = $uibModal.open({\r\n                    templateUrl: 'partials/hub.confirm.factory.reset.ng.html?version=' + gui_version,\r\n                    animation:    true,\r\n                    size: 'lg',\r\n                    backdrop: modal_light_dismiss_enabled,\r\n                    scope: $scope,\r\n                    controller: function($scope){\r\n\r\n                        $scope.cancelFactoryReset = function(){\r\n                            console.log(\"canceling factory reset\");\r\n                            modalInstance.dismiss('cancel');\r\n                        };\r\n\r\n                        $scope.doFactoryReset = function(){\r\n                            $scope.showFactoryReset();\r\n                            modalInstance.dismiss('cancel');\r\n                        };\r\n                    }\r\n                });\r\n            };\r\n        }\r\n    });\r\n});\r\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\r\n\r\n    $stateProvider.state('hub',{ //parent state of all of the logged-in parts of the app. it loads the package library when user logs in\r\n        url: '',\r\n        abstract: true,\r\n        templateUrl: '/partials/hub.ng.html?version=' + gui_version,\r\n        resolve: {\r\n              authenticate: authenticate\r\n        },\r\n        controller: function ($window, $scope, $state, $location, $rootScope, $http, $uibModal, $q, $sce, $timeout, workerProcessRestService, utilityFunctionsService) {\r\n            console.log(\"hub controller: starting #001\");\r\n\r\n            setupNoConnection(false);\r\n\r\n            $scope.security_enabled   = window.location.protocol === 'https:';\r\n\r\n            if (oem_branding_logo_file) {\r\n                $scope.oem_logo_file = oem_branding_logo_file;\r\n                $scope.hideOEMBranding = false;\r\n            } else {\r\n                $scope.hideOEMBranding = true;\r\n            }\r\n\r\n            $scope.dashboard        = false;\r\n            $scope.usb_devices      = [];\r\n            $scope.available        = [];\r\n            $scope.installed        = [];\r\n            $scope.package_updates  = [];\r\n            $scope.updates          = 0;\r\n            $scope.sensors          = [];\r\n            $scope.sensor_map       = {};\r\n            $scope.upgrades         = 0;\r\n            $scope.mec              = false;\r\n            $scope.isQuark          = true;\r\n\r\n            $scope.humidity     = \"\";\r\n            $scope.temperature  = \"\";\r\n\r\n            $scope.connected  = false;\r\n            $scope.pro = false;\r\n\r\n            $scope.https_port   = https_port;\r\n\r\n            $scope.updating_package     = {};\r\n            $scope.updated_package      = {};\r\n            $scope.update_package_failed = {};\r\n            $scope.update_package_fail_message = {};\r\n            $scope.installing_package   = {};\r\n            $scope.uninstalling_package = {};\r\n            $scope.package_activity     = false;\r\n            $scope.starting_package     = {};\r\n            $scope.stopping_package     = {};\r\n            $scope.enabling_package     = {};\r\n            $scope.installed_package    = {};\r\n\r\n            $scope.deleting_repository  = {};\r\n\r\n            $scope.noderedurl  = $sce.trustAsResourceUrl(window.location.protocol + \"//\" + window.location.hostname + \":1880\");\r\n\r\n            $scope.luciurl     = $sce.trustAsResourceUrl(\"https://\" + window.location.hostname + \":443\");\r\n\r\n            $scope.httpurl     = $sce.trustAsResourceUrl(\"http://\" + window.location.hostname + \"\");\r\n            \r\n            $scope.httpsurl    = $sce.trustAsResourceUrl(\"https://\" + window.location.hostname + \":3092\");\r\n            \r\n            $scope.cloudcmdurl = $sce.trustAsResourceUrl(window.location.protocol + \"//\" +  window.location.hostname + \":8000\");\r\n\r\n            $scope.foundOSUpdate = false;\r\n            $scope.foundOSUpdate_Packages = false;\r\n            $scope.OSUpdate_Packages =[];\r\n\r\n            $scope.package_refresh    = 0; //if package list is reloaded from server, increment this by one to force update\r\n            $scope.gotPackagesList = true;\r\n            $scope.gotPackagesList_Error = false;\r\n\r\n\r\n            $scope.setDashboard = function(){\r\n                $scope.dashboard        = true;\r\n            };\r\n            $scope.isDashboard  = function(){\r\n                return $scope.dashboard;\r\n            };\r\n            $scope.hasUpdates = function(){\r\n                return $scope.updates>0;\r\n            };\r\n            $scope.hasOSUpdate = function(){\r\n                // always return true\r\n                return true;\r\n            };\r\n\r\n            $scope.updatePackageStatuses   = function(){\r\n                console.log(\"hub control updating package statuses #720a\");\r\n\r\n                if($scope.package_activity) return;\r\n                $scope.package_activity = true;\r\n\r\n                for(var _i=0,_len=$scope.packages.length;_i<_len;_i++){\r\n                    console.log(\"hub control updating package statuses #720a1: \");\r\n                    var _package = $scope.packages[_i];\r\n                    console.log(\"hub control updating package statuses #720a2: \"+_package.name);\r\n                    var _service = _package.service;\r\n                    if(_service && _service[0]){\r\n\r\n                        var _all_services_running = true;\r\n                        var _all_services_enabled = true;\r\n                        var _num_services         = _service.length;\r\n\r\n                        for(var _j=0;_j<_num_services;_j++){\r\n                            var _service_sub   = $scope.service_statuses[_service[_j]].SUB;\r\n                            var _service_state = $scope.service_statuses[_service[_j]].State;\r\n                            console.log(\"hub control updating package statuses #720a2 \"+_package.name+\" looking up status of service \"+_j+\" \"+_service[_j]+\" SUB=\"+_service_sub+\" State=\"+_service_state);\r\n                            if(_service_sub  !=='Running'){\r\n                                console.log(\"setting running to FALSE\");\r\n                                _all_services_running = false;\r\n                            }\r\n                            if(_service_state !=='enabled'){\r\n                                console.log(\"setting autorun to FALSE\");\r\n                                _all_services_enabled = false;\r\n                            }\r\n                        }\r\n                        console.log(\"hub control updating package statuses #720d \"+_package.name+\" setting statuses as \"+_all_services_running+\" \"+_all_services_enabled );\r\n                        //var _service_status = $scope.service_statuses[_service[0]]; //just one service for now. Must ask Nick what he wants to do for more than one\r\n                        $scope.package_statuses[_package.name] = {\r\n                            'running': _all_services_running ,\r\n                            'autorun': _all_services_enabled };\r\n                        _package.running = _all_services_running; // Directly on package for sorting reasons in the Installed Packages table\r\n                        _package.autorun = _all_services_enabled; // Directly on package for sorting reasons in the Installed Packages table\r\n\r\n                        console.log(\"hub control updating package statuses #720b \"+_package.name +\r\n                                  \" running: \"+$scope.package_statuses[_package.name].Running +\r\n                                  \" autorun: \"+$scope.package_statuses[_package.name].autorun);\r\n                        //$scope.$apply();\r\n\r\n                    }\r\n                }\r\n\r\n                $scope.package_activity = false;\r\n            };\r\n\r\n            $scope.setArrays = function(_set_services){\r\n                //$scope.featured   = $scope.packages.filter(function(_package){\r\n                  //return !_package.installed && _package.curated;\r\n                //});\r\n                console.log(\"hub controller: setting available packages #009a\");\r\n                // only update list when it is not empty\r\n                if ($scope.packages) {\r\n                    $scope.available  = $scope.packages.filter(function(_package){\r\n                        return !_package.installed;\r\n                    });\r\n                    console.log(\"hub control setting installed packages #009b\");\r\n                    $scope.installed  = $scope.packages.filter(function(_package){\r\n                        return _package.installed;\r\n                    });\r\n                    console.log(\"hub control setting package_updates #009c\");\r\n                    $scope.package_updates = $scope.installed.filter(function(_package){\r\n                        return _package.upgrade_version && _package.upgrade_version !==\"\";\r\n                    });\r\n                    console.log(\"hub control setting (os) updates #009d\");\r\n                    //$scope.updates = ($scope.hasOSUpdate() ? 1 : 0) + $scope.package_updates.length;\r\n                    $scope.updates = $scope.package_updates.length;\r\n\r\n                    $scope.curated =  $scope.available.filter(function(_package){\r\n                        return _package.curated;\r\n                    });\r\n\r\n                    if(_set_services){\r\n                       $scope.setServices();\r\n                    }\r\n                }\r\n            };\r\n\r\n            $scope.launchQuickTools = function(_toolname) {\r\n                if (_toolname==='nodered') {\r\n                    if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {\r\n                        //Firefox has to open this in a new tab\r\n                        var win = window.open($scope.noderedurl, '_blank');\r\n                        win.focus();\r\n                    } else {\r\n                        $state.go(\"hub.dashboard.nodered\");\r\n                        $rootScope.isSensorPanelExpanded = false;\r\n                    }\r\n                    //var _url = \"<gateway ip>:1880\";\r\n                    //console.log(\"Launching Node Red in iframe with url \"+_url);\r\n                } else if (_toolname==='helix') {\r\n                    //var _url = \"TBD\";\r\n                    //console.log(\"Launching Helix in iframe with url \"+_url);\r\n\r\n                    $state.go(\"hub.dashboard.helix\");\r\n                    $rootScope.isSensorPanelExpanded = false;\r\n                } else if (_toolname==='luci') {\r\n                    //var _url = \"https://<gateway ip>\";\r\n                    //console.log(\"Launching LuCl in iframe with url \"+_url);\r\n\r\n                    var win = window.open($scope.luciurl, '_blank');\r\n                    win.focus();\r\n                } else if(_toolname==='cloudcmd'){\r\n                    if (window.location.protocol==='https:') {\r\n                        var win = window.open($scope.cloudcmdurl, '_blank');\r\n                        win.focus();\r\n                    } else {\r\n                        if (navigator.userAgent.toLowerCase().indexOf('firefox') > -1) {\r\n                            //Firefox has to open this in a new tab\r\n                            var win = window.open($scope.cloudcmdurl, '_blank');\r\n                            win.focus();\r\n                        } else {\r\n                            $state.go(\"hub.dashboard.cloudcmd\");\r\n                            $rootScope.isSensorPanelExpanded = false;\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            $scope.setupPreventModalClosing = function(){\r\n\r\n                var blockUI = false;\r\n                var listener = function(){};\r\n            };\r\n\r\n            $scope.initHubTasks = function() {\r\n                // We are doing this at hub load time, so that we can get the available update count to display.\r\n                function initSetPackages() {\r\n                    console.log(\"hub controller: getting packages #005a\");\r\n                    $http({\r\n                        method : 'GET',\r\n                        url    : '/api/packages?nocache=' + new Date().getTime()\r\n                    }).then(\r\n                        function successCallback(response) {\r\n                            $scope.packages = response.data;\r\n                            console.log(\"hub controller: found packages by API call 005b\");\r\n                            // do not need and do not refresh service at this time.\r\n                            $scope.setArrays(false);\r\n                        },function errorCallback(response) {\r\n                            console.log(\"error getting packages 005E\");\r\n                        });\r\n                }\r\n\r\n                function initCheckMECDetails(){\r\n                    console.log(\"hub controller: checking mec status #7223\");\r\n                    $http({\r\n                        method: 'GET',\r\n                        url:    '/api/mec?nocache=' + new Date().getTime()\r\n                    }).then(function successCallback(response) {\r\n                        var _mec = response.data;\r\n                        if( _mec.status ==='success'){\r\n                            $scope.mec = {\r\n                                type: _mec.type ? _mec.type : \"\",\r\n                                installed: _mec.installed ? _mec.installed : \"\",\r\n                                enabled: _mec.enabled ? _mec.enabled : \"\"\r\n                            };\r\n                            console.log(\"hub controller: found mec installed as \"+$scope.mec.installed+\" #7223b\");\r\n                        }else{\r\n                            console.log(\"errorCallback with HTTP status \"+response.status);\r\n                        }\r\n                        initSetPackages();\r\n                    }, function errorCallback(response) {\r\n                        //this only happens for server error\r\n                        console.log(\"errorCallback with HTTP status \"+response.status);\r\n                        initSetPackages();\r\n                    });\r\n                }\r\n\r\n                function initScanUSBDevices(){\r\n                    $scope.scanning_usb = true;\r\n                    console.log(\"hub controller: scanning usb devices\");\r\n                    $http({\r\n                        method: 'GET',\r\n                        url:    '/api/usb?nocache=' + new Date().getTime()\r\n                    }).then(function successCallback(response) {\r\n                        $scope.usb_devices = response.data;\r\n                        $scope.scanning_usb = false;\r\n                        console.log(\"hub controller: scanUSBdevices found \"+$scope.usb_devices.length+\" usb devices\");\r\n                        initCheckMECDetails();\r\n                    },function errorCallback(response) {\r\n                        console.log(\"error scanning usb devices\");\r\n                        $scope.scanning_usb = true;\r\n                        initCheckMECDetails();\r\n                    });\r\n                }\r\n\r\n                function initCheckProStatus(){\r\n                    $http({\r\n                        method: 'GET',\r\n                        url:    '/api/pro?nocache=' + new Date().getTime()\r\n                    }).then(function successCallback(response) {\r\n                        if (response.data.result === 'NA') {\r\n                            // This means that the backend cannot get the pro status, so we do not update status.\r\n                        } else {\r\n                            $scope.pro = (response.data.result === 'True') ;\r\n                        }\r\n                        console.log(\"hub controller: found pro as \"+$scope.pro+\" #7223c\"+response.status);\r\n                        initScanUSBDevices();\r\n                    }, function errorCallback(response) {\r\n                        //this only happens for server error\r\n                        console.log(\"errorCallback with HTTP status \"+response.status);\r\n                        initScanUSBDevices();\r\n                    });\r\n                }\r\n\r\n                function initSetDevice(){\r\n                    console.log(\"hub controller: getting device 006a\");\r\n                    $http({\r\n                        method : 'GET',\r\n                        url    : '/api/osc?nocache=' + new Date().getTime()\r\n                    }).then(\r\n                        function successCallback(response) {\r\n                            $scope.device = response.data;\r\n\r\n                            // Note: For string, it is indexOf not indexof\r\n                            if ($scope.device.model.indexOf(quark_name_string) <= -1) {\r\n                                $scope.isQuark = false;\r\n                            } else {\r\n                                $scope.isQuark = true;\r\n                            }\r\n\r\n                            //get device uptime, ideally use a timestamp on server start from server instead\r\n                            var uptime = $scope.device.uptime.split(' '); // format: 0d 1h 2m\r\n                            var days = uptime[0].substr(0,uptime[0].length-1);\r\n                            var hours = uptime[1].substr(0,uptime[1].length-1);\r\n                            var minutes = uptime[2].substr(0,uptime[2].length-1);\r\n                            var milliseconds = (days*60*60*24*1000)+(hours*60*60*1000)+(minutes*60*1000);\r\n                            var upSince = new Date( new Date() - milliseconds);\r\n                            $scope.deviceUpSince = upSince.getTime();\r\n                            console.log(\"hub controller: found device by API call 006b\");\r\n                            initCheckProStatus();\r\n                        },function errorCallback(response) {\r\n                            console.log(\"error scanning usb devices\");\r\n                            initCheckProStatus();\r\n                        });\r\n                }\r\n\r\n                // run this first, so that the GUI can show the gateway info fast enough\r\n                initSetDevice();\r\n            };\r\n\r\n            iotgatewayhub.expandHub_proxy($scope,$http,$rootScope,$state,workerProcessRestService,utilityFunctionsService);\r\n\r\n            iotgatewayhub.expandHub_services($scope,$http,$q,workerProcessRestService);\r\n\r\n            iotgatewayhub.expandHub_save_image($scope,$uibModal,workerProcessRestService);\r\n\r\n            iotgatewayhub.expandHub_security($scope,$http,$uibModal,workerProcessRestService);\r\n\r\n            iotgatewayhub.expandHub_repositories($scope,$http,$state,$uibModal,workerProcessRestService);\r\n\r\n            iotgatewayhub.expandHub_packages($scope,$state,$http,$rootScope,$uibModal,$timeout,workerProcessRestService);\r\n\r\n            iotgatewayhub.expandHub_pro_upgrade($scope,$http,$state,$uibModal,$timeout,workerProcessRestService,utilityFunctionsService);\r\n\r\n            iotgatewayhub.expandHub_openOSUpdate($scope,$uibModal,$http,workerProcessRestService);\r\n\r\n            iotgatewayhub.expandHub_gatewayOperations($scope,$http,$state,$timeout,$window);\r\n\r\n            $scope.$watchCollection('package_refresh',function(){ $scope.setArrays(true); });\r\n\r\n            $scope.$on('hub.lockModal', function(scope){\r\n                blockUI = true;\r\n\r\n                $('.close-admin-modal').hide();\r\n\r\n                listener = scope.targetScope.$on('modal.closing', function(event, reason, closed) {\r\n                    //console.log(prefix + 'modal.closing: ' + (closed ? 'close' : 'dismiss') + '(' + reason + ')');\r\n                    if (!blockUI) return;\r\n\r\n                    //console.log('\\t' + prefix + 'veto (interactive)');\r\n                    event.preventDefault();\r\n                });\r\n\r\n            });\r\n\r\n            $scope.$on('hub.unlockModal', function turnOffListener(){\r\n\r\n                $('.close-admin-modal').show();\r\n                listener();// weird angular-ism\r\n            });\r\n\r\n            $rootScope.$on('$locationChangeStart', function(event) {\r\n                if(!$rootScope.accepted_license){\r\n                    $state.go('hub.license',{});\r\n                }\r\n            });\r\n\r\n            $scope.setupPreventModalClosing();\r\n\r\n            // Note: we cannot start a lot of http request at this point.\r\n            // On slow systems, if there are too many pending requests, new request will be aborted!\r\n            // So for new request, add it into initHubTasks functions after other requests are done.\r\n            $scope.initHubTasks();\r\n\r\n            // Other tasks are done when we enter network check state.\r\n\r\n            console.log(\"hub controller: EXITING #999z\");\r\n        }\r\n    });\r\n});\r\n\r\n\r\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\r\n    $stateProvider.state('hub.license',{ \r\n        url:         '/hub/license',\r\n        templateUrl: '/partials/hub.license.ng.html?version=' + gui_version,\r\n        controller: function($scope,$state,$http,$rootScope,utilityFunctionsService){\r\n\r\n            // If we are here, then oem_branding_cookies_names's length is > 0\r\n            var eula_index  = -1;\r\n            $scope.eulaLoaded = false;\r\n\r\n            function findUnacceptedCookieIndex() {\r\n                var temp_index = -1;\r\n                for (i = 0; i < oem_branding_cookies_names.length; i++) {\r\n                    if (!getCookie(oem_branding_cookies_names[i])) {\r\n                        temp_index = i;\r\n                        all_accepted = false;\r\n                        break;\r\n                    }\r\n                }\r\n                return temp_index;\r\n            }\r\n\r\n            function checkEulaCookies(doApply) {\r\n                eula_index = findUnacceptedCookieIndex();\r\n                if (eula_index === -1) {\r\n                    // all accepted\r\n                    $rootScope.accepted_license = true;\r\n                    $state.go(\"hub.networkcheck\");\r\n                } else {\r\n                    // still has not accepted one\r\n                    $scope.eulaLoaded = false;\r\n                    setTimeout(function() {\r\n                        $scope.current_eula_html_file = oem_branding_eulas[eula_index];\r\n                        $scope.current_eula_cookie_name = oem_branding_cookies_names[eula_index];\r\n                        console.log(\"###########current eula##############\");\r\n                        console.log($scope.current_eula_html_file);\r\n                        console.log($scope.current_eula_cookie_name);\r\n                        if (doApply) {\r\n                            $scope.$apply();\r\n                        }\r\n                    }, 1500);\r\n                }\r\n            }\r\n\r\n            $scope.cancel = function(){\r\n                authorization = {};\r\n                $rootScope.loggedin =  false;\r\n                $state.go('welcome.login',{});\r\n            };\r\n\r\n            $scope.agree = function(){\r\n                // set this eula as accepted\r\n                utilityFunctionsService.setCookie($scope.current_eula_cookie_name,\"true\",license_duration_days);\r\n\r\n                // continue checking\r\n                checkEulaCookies(true);\r\n            };\r\n\r\n            if(!authorization.username){\r\n                console.log(\"auth failed in hub license 001b\");\r\n                $state.go('welcome.login',{});\r\n            }\r\n\r\n            // initial checking\r\n            checkEulaCookies(true);\r\n        }\r\n    });\r\n});"," iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\r\n    \r\n    $stateProvider.state('hub.networkcheck',{ \r\n        url:         '/hub/networkcheck',\r\n        //template:\"<div>&nbsp;</div>\",\r\n        templateUrl:    'partials/hub.loading.ng.html?version=' + gui_version,\r\n        controller: function($scope,$state,$http,$rootScope){\r\n            if(!authorization.username){\r\n                $state.go('welcome.login',{});\r\n            }\r\n\r\n            setupNoConnection(true);\r\n            $scope.loadMessage = \"Checking network connection, and if needed, adding repositories and building packages list. This may take a few minutes.\";\r\n            $scope.showMessage = true;\r\n\r\n            // run this later so that GUI has a chance to refresh\r\n            setTimeout(function() {\r\n                    $scope.proceedToNetworkCheck();\r\n                }, 1000);\r\n        }\r\n    });\r\n });\r\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\r\n    \r\n    $stateProvider.state('hub.networkconnected',{ \r\n        url:         '/hub/networkconnected', \r\n        templateUrl: '/partials/hub.networkconnected.ng.html?version=' + gui_version,\r\n        controller: function($scope,$state,$http,$rootScope){\r\n            if(!authorization.username){\r\n                $state.go('welcome.login',{});\r\n            }\r\n            $scope.dashboard = function(){\r\n              $state.go('hub.dashboard.sensors',{});\r\n            };\r\n        }\r\n    });\r\n});","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\r\n    \r\n    /* NOTE: this state uses the networksettings DIRECTIVE */\r\n\r\n    $stateProvider.state('hub.networksettings',{\r\n        url:         '/hub/networksettings',\r\n        templateUrl: '/partials/hub.networksettings.main.ng.html?version=' + gui_version,\r\n        scope:false,\r\n        controller: function($scope,$state,$http,$rootScope){\r\n            $scope.cancelText=\"Skip\";\r\n            $scope.hideTestSettings=true;\r\n            $scope.maintainContextAfterSave = false;\r\n\r\n            $scope.skipSettings = function(){\r\n                $state.go('hub.dashboard.sensors',{});\r\n\r\n            };\r\n\r\n            $scope.doneSuccessCallback = function(){\r\n                $state.go('hub.networkconnected',{});\r\n            };\r\n        }\r\n    });\r\n});\r\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\r\n    \r\n    $stateProvider.state('hub.nonetwork',{ \r\n        url:         '/hub/nonetwork', \r\n        templateUrl: '/partials/hub.nonetwork.ng.html?version=' + gui_version,\r\n        controller: function($scope,$state,$http,$rootScope){\r\n            if(!authorization.username){\r\n                $state.go('welcome.login',{});\r\n            }\r\n\r\n            $scope.configureNetwork = function(){\r\n                $scope.getProxySettings(function() {\r\n                    $state.go('hub.networksettings',{});\r\n                });\r\n            };\r\n\r\n            $scope.skipConfigureNetwork = function(){\r\n                $rootScope.loggedin = true;\r\n                $state.go('hub.dashboard.sensors',{}); \r\n            };\r\n        }\r\n    });\r\n});","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\r\n    \r\n    $stateProvider.state(\"hub.test\",{\r\n        url:         '/hub/test', \r\n        templateUrl: '/partials/hub.test.ng.html?version=' + gui_version,\r\n        controller: function($scope,$state,$http,$rootScope){\r\n            if(!bypass_auth && !authorization.username){\r\n               $state.go('welcome.login',{}); \r\n            }\r\n        }\r\n    });\r\n});","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\r\n\r\n    $stateProvider.state('tutorial',{ // only state that is not a descendant of hub. this presents the login page and background image\r\n        url: '',\r\n        abstract:    true,\r\n        templateUrl: '/partials/hub.tutorial.ng.html?version=' + gui_version,\r\n        controller: function($scope,$state,$http,$rootScope,$uibModal){\r\n            setupNoConnection(true);\r\n        }\r\n    })\r\n    .state('tutorial.sensorsetup',{\r\n        url: '/tutorial/sensorsetup',\r\n        templateUrl: '/partials/tutorial.sensorsetup.ng.html?version=' + gui_version,\r\n        controller: function($window,$scope,$state,$rootScope){\r\n            authorization = {};\r\n        }\r\n    })\r\n    .state('tutorial.sensorcloud',{\r\n        url: '/tutorial/sensorcloud',\r\n        templateUrl: '/partials/tutorial.sensorcloud.ng.html?version=' + gui_version,\r\n        controller: function($window,$scope,$state,$rootScope){\r\n            authorization = {};\r\n        }\r\n    })\r\n    .state('tutorial.helixapp',{\r\n        url: '/tutorial/helixapp',\r\n        templateUrl: '/partials/tutorial.helixapp.ng.html?version=' + gui_version,\r\n        controller: function($window,$scope,$state,$rootScope){\r\n            authorization = {};\r\n        }\r\n    })\r\n    .state('tutorial.savedeploy',{\r\n        url: '/tutorial/savedeploy',\r\n        templateUrl: '/partials/tutorial.savedeploy.ng.html?version=' + gui_version,\r\n        controller: function($window,$scope,$state,$rootScope){\r\n            authorization = {};\r\n        }\r\n    })\r\n    .state('tutorial.savedeploy_quark', {\r\n        url: '/tutorial/savedeploy_quark',\r\n        templateUrl: '/partials/tutorial.savedeploy_quark.ng.html?version=' + gui_version,\r\n        controller: function ($window, $scope, $state, $rootScope) {\r\n            authorization = {};\r\n        }\r\n    });\r\n});\r\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\r\n    \r\n    $stateProvider.state('welcome',{ //only state that is not a descendant of hub. this presents the login page and background image\r\n        url: '', \r\n        abstract:    true,\r\n        templateUrl: '/partials/welcome.ng.html?version=' + gui_version,\r\n        controller: function($scope,$state,$http,$rootScope,$uibModal){\r\n            setupNoConnection(false);\r\n\r\n            $rootScope.loggedin = false;\r\n            $scope.authentication = {};\r\n            $scope.connected = false;\r\n\r\n            $scope.broadcastFailure = function(bMessage) {\r\n                $scope.$broadcast(bMessage);\r\n            };\r\n\r\n            $scope.handleAuthenticated = function() {\r\n                authorization = {\"username\": $scope.authentication.username};\r\n                $rootScope.loggedin    = true;\r\n\r\n                //so we have to save these in scope to check against upgrade to pro.\r\n                //don't quite like this idea security-wise but it is only way to pre-check auth before sending call,\r\n                //if that is what they want.\r\n                $rootScope.credentials = {\"username\": $scope.authentication.username, \"password\": $scope.authentication.password};\r\n\r\n                if (!$rootScope.accepted_license) {\r\n                    $state.go('hub.license',{});\r\n                } else {\r\n                    $state.go('hub.networkcheck',{});\r\n                }\r\n            };\r\n\r\n            $scope.checkAuth = function(){\r\n                var _datatype = \"json\";\r\n                var _method   = \"POST\";\r\n                var _uri      = '/api/validate_session';\r\n\r\n                $http({\r\n                    method: _method,\r\n                    url: _uri,\r\n                    data: JSON.stringify(),\r\n                    headers: {\r\n                        'Content-type' : 'application/json'\r\n                    }\r\n                }).then(function successCallback(response){\r\n                    if(response.data.status===\"success\"){\r\n                        authorization = {\"username\": \"preauthed\"};\r\n                        $rootScope.loggedin = true;\r\n\r\n                        if (!$rootScope.accepted_license) {\r\n                            $state.go('hub.license',{});\r\n                        } else {\r\n                            $state.go('hub.networkcheck',{});\r\n                        }\r\n                    } else {\r\n                        // should not be reached\r\n                        $scope.showLogin = true;\r\n                    }\r\n                }, function errorCallback(response){\r\n                    $scope.showLogin = true;\r\n                });\r\n            };\r\n\r\n            $scope.continueWelcomeLogin = function() {\r\n                if (do_validate_session) {\r\n                    $scope.checkAuth();\r\n                } else {\r\n                    // force to show login\r\n                    $scope.showLogin = true;\r\n                }\r\n                do_validate_session = true;\r\n            };\r\n\r\n            $scope.setOEMBrandingCookiesNames = function() {\r\n                oem_branding_cookies_names.length = 0;\r\n                for (i = 0; i < oem_branding_eulas.length; i++) {\r\n                    var temp_datetime = '';\r\n                    if (i < oem_branding_eulas_datetime.length) {\r\n                        temp_datetime = oem_branding_eulas_datetime[i];\r\n                    }\r\n                    var temp_cookiename = oem_branding_eulas[i].concat(temp_datetime);\r\n                    // \\s is regex for whitespace. g is global flag.\r\n                    // temp_cookiename = temp_cookiename.replace(/\\s+/g, '');\r\n                    // keep only a-Z and 0 - 9\r\n                    temp_cookiename = temp_cookiename.toLowerCase().replace(/[^a-zA-Z0-9]+/g, '');\r\n                    oem_branding_cookies_names.push(temp_cookiename);\r\n                }\r\n                console.log(\"#############oem cookies names#################\");\r\n                console.log(oem_branding_cookies_names);\r\n            };\r\n\r\n            $scope.checkOEMBrandingCookies = function() {\r\n                var temp_accepted = true;\r\n                for (i = 0; i < oem_branding_cookies_names.length; i++) {\r\n                    if (!getCookie(oem_branding_cookies_names[i])) {\r\n                        temp_accepted = false;\r\n                        break;\r\n                    }\r\n                }\r\n                $rootScope.accepted_license = temp_accepted;\r\n                console.log(\"accepted all licenses? \"+$rootScope.accepted_license);\r\n            };\r\n\r\n            $scope.getOEMBranding = function(){\r\n                $http({\r\n                    method: 'GET',\r\n                    url:    '/api/oembranding?nocache=' + new Date().getTime()\r\n                }).then(function successCallback(response) {\r\n                    console.log(\"got oem branding\");\r\n\r\n                    try {\r\n                        if (response.data.status === 'success') {\r\n                            // set the oem branding config\r\n                            oem_branding_logo_file = response.data.result.logo_file;\r\n                            oem_branding_eulas = response.data.result.eula_files;\r\n                            oem_branding_eulas_datetime = response.data.result.eula_files_datetime;\r\n                            $scope.setOEMBrandingCookiesNames();\r\n                            $scope.checkOEMBrandingCookies();\r\n                        }\r\n                    } catch(err){\r\n                    }\r\n\r\n                    $scope.continueWelcomeLogin();\r\n                },function errorCallback(response) {\r\n                    console.log(\"error getting oem branding\");\r\n                    console.log(response);\r\n                    $scope.continueWelcomeLogin();\r\n                });\r\n            };\r\n\r\n            $scope.getOEMBranding();\r\n        }\r\n    });\r\n});\r\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\r\n    \r\n    $stateProvider.state('welcome.login',{ \r\n        url:         '/welcome/login', \r\n        templateUrl: '/partials/welcome.login.ng.html?version=' + gui_version,\r\n        controller: function($scope,$state,$http,$rootScope,$timeout,$window){\r\n            authorization = {};\r\n            // hide error messages until 'submit' event\r\n            $scope.submitted = false;\r\n            // hide success message\r\n            $scope.showMessage = false;\r\n            // show go button\r\n            $scope.showGo = true;\r\n            // status message\r\n            $scope.barMessage = 'Authenticating...';\r\n            // server error message\r\n            $scope.serverErrorMessage = 'A server error occurred! Refresh page and try again!';\r\n            // method called from shakeThat directive\r\n            $scope.keyPressed = function($event) {\r\n                if($event.keyCode != 13) return;\r\n                if ($scope.login.username && $scope.login.password) $scope.login();\r\n            };\r\n\r\n            $scope.login = function() {\r\n                // hide go button and show status bar\r\n                $scope.showGo = false;\r\n\r\n                var internalAuthentication = function(firstTime) {\r\n                    $scope.authentication = { \"username\": $scope.login.username, \"password\": $scope.login.password };\r\n                    var _username = $scope.authentication.username;\r\n                    var _password = $scope.authentication.password;\r\n\r\n                    var do_auth = 'False';\r\n                    if (firstTime) {\r\n                        do_auth = 'True';\r\n                    }\r\n\r\n                    $http({\r\n                        method: 'POST',\r\n                        url: '/api/auth',\r\n                        data:  JSON.stringify({\"username\":_username,\"password\":_password, \"do_auth\": do_auth}),\r\n                        headers : {\r\n                            'Content-type' : 'application/json'\r\n                        }\r\n                    }).then(function successCallback(response) {\r\n                        //check result of login, set username in session if success\r\n                        //should not succeed for HTTP DIGEST on first call (since no Authorization header provided)\r\n                        //can be used for old style simple login\r\n                        if (response.data.status === 'success') {\r\n                            if (response.data.init_in_progress === false) {\r\n                                ////////////////////////////////\r\n                                // Authentication worked, and server initialization is done.\r\n                                ////////////////////////////////\r\n                                // done\r\n                                $scope.showGo = true;\r\n                                $scope.handleAuthenticated();\r\n                            } else {\r\n                                ////////////////////////////////\r\n                                // Authentication worked, and server initialization is not done.\r\n                                ////////////////////////////////\r\n                                // start checking after some delay (larger delay than the authentication part)\r\n                                setTimeout(function() {\r\n                                        internalAuthentication(false);\r\n                                    }, rest_check_interval_milliseconds_m);\r\n                                $scope.barMessage = 'Waiting for server setup...';\r\n                            }\r\n                        } else {\r\n                            ////////////////////////////////\r\n                            // Authentication call went through, but authentication failed.\r\n                            ////////////////////////////////\r\n                            $scope.broadcastFailure(\"welcome.loginFailed\");\r\n                        }\r\n                    }, function errorCallback(response) {\r\n                        ////////////////////////////////\r\n                        // Authentication call failed\r\n                        ////////////////////////////////\r\n                        if (response.status == 401) {\r\n                            $scope.broadcastFailure(\"welcome.loginFailed\");\r\n                        } else if (response.status === 408) {\r\n                            // request timeout\r\n                            // ignore and continue checking\r\n                            // start checking after some delay (larger delay than the init authentication part)\r\n                            setTimeout(function() {\r\n                                        internalAuthentication(false);\r\n                                    }, rest_check_interval_milliseconds_m);\r\n                            // do not change message.\r\n                        } else if (response.status === -1) {\r\n                            $scope.serverErrorMessage = 'Cannot connect to the gateway yet! Try again after page is refreshed.';\r\n                            $scope.broadcastFailure(\"welcome.loginServerError\");\r\n                            console.log(\"ERROR response status=\"+response.status);\r\n\r\n                            // refresh the web page to get the index.html from server\r\n                            setTimeout(function() {\r\n                                    $window.location.reload();\r\n                                }, 4000);\r\n                        } else {\r\n                            $scope.serverErrorMessage = 'A server error occurred! Try again after page is refreshed! ';\r\n                            $scope.broadcastFailure(\"welcome.loginServerError\");\r\n                            console.log(\"ERROR response status=\"+response.status);\r\n\r\n                            // refresh the web page to get the index.html from server\r\n                            setTimeout(function() {\r\n                                    $window.location.reload();\r\n                                }, 4000);\r\n                        }\r\n                    });\r\n                };\r\n\r\n                internalAuthentication(true);\r\n            };\r\n\r\n            $scope.submit = function() {\r\n                // show success message\r\n                $scope.showMessage = true;\r\n            };\r\n            \r\n            $scope.$on(\"welcome.loginFailed\", function(){\r\n                // show go\r\n                $scope.showGo = true;\r\n\r\n                $scope.showAuthenticationError = true;\r\n\r\n                var $animate = $('.container div div');\r\n                $animate.addClass( 'shake');\r\n                setTimeout(function() {\r\n                    $animate.removeClass('shake');\r\n                }, 100);\r\n\r\n                $scope.login.password=null;\r\n\r\n                $animate.addClass(\"invalid\");\r\n\r\n                $animate.find('input').on(\"click\", function(){\r\n                    $animate.removeClass(\"invalid\");\r\n                    $scope.showAuthenticationError = false;\r\n                });\r\n            });\r\n\r\n            $scope.$on(\"welcome.loginServerError\", function(){\r\n                // show go\r\n                $scope.showGo = true;\r\n\r\n                $scope.showServerError = true;\r\n\r\n                $timeout(function(){\r\n                    $scope.showServerError = false;\r\n                },8000);\r\n\r\n                $('.login-form').find('input').on(\"click\",\r\n                    function() {\r\n                        $scope.$apply(function () {\r\n                            $scope.showServerError = false;\r\n                        });\r\n                    }\r\n                );\r\n            });\r\n        }\r\n    });\r\n});\r\n","iotgatewayhub.factory('workerProcessRestService', ['$http', '$uibModal', '$rootScope', function($http, $uibModal, $rootScope){\r\n    var workerProcessRestService = {};\r\n\r\n    function createWorkID() {\r\n        var randomNum = Math.random();\r\n        return randomNum.toString();\r\n    }\r\n\r\n    function checkPeriodicCheckingResponseError(response) {\r\n        var report = false;\r\n        var return_message = '';\r\n\r\n        if ((response.status === -1) || (response.status === 408) || (response.status === 401)) {\r\n            report = checkResponseErrorReport();\r\n            if (report) {\r\n                if (response.status === -1) {\r\n                    return_message = 'Cannot connect to the gateway server anymore!';\r\n                } else if (response.status === 408) {\r\n                    return_message = 'The request got timeout error: http status is 408!';\r\n                } else if (response.status === 401) {\r\n                    return_message = 'The request got access denied: http status is 401!';\r\n                } else {\r\n                    return_message = '';\r\n                }\r\n            } else {\r\n                return_message = '';\r\n            }\r\n        } else {\r\n            return_message = 'Something went wrong: HTTP response status is ' + response.status;\r\n        }\r\n\r\n        // empty string means : do not report\r\n        return return_message;\r\n    }\r\n\r\n    function informGeneralError(titleMessage, descMessage, barBeforeMessage) {\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'partials/hub.inform.general.checking.inprogress.ng.html?version=' + gui_version,\r\n            animation:    true,\r\n            size: 'lg',\r\n            backdrop: modal_light_dismiss_enabled,\r\n            controller: function($scope,$state,$http,$rootScope){\r\n                $scope.title_message = titleMessage;\r\n                $scope.description_message = descMessage;\r\n                $scope.bar_before_message = barBeforeMessage;\r\n                $scope.hasError = true;\r\n\r\n                $scope.closeModal = function(){\r\n                    modalInstance.dismiss('cancel');\r\n                };\r\n            }\r\n        });\r\n    }\r\n\r\n    workerProcessRestService.informGeneralChecking = function(httpMethod, httpURL, noParameter, httpJSON, httpBody, titleMessage, descMessage, barBeforeMessage, realSuccessCallback, checkPeriod) {\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'partials/hub.inform.general.checking.inprogress.ng.html?version=' + gui_version,\r\n            animation:    true,\r\n            size: 'lg',\r\n            backdrop: modal_light_dismiss_enabled,\r\n            controller: function($scope,$state,$http,$rootScope){\r\n                console.log(\"hub controller: API call \" + httpMethod + \" \" + httpURL);\r\n\r\n                $scope.title_message = titleMessage;\r\n                $scope.description_message = descMessage;\r\n                $scope.bar_before_message = barBeforeMessage;\r\n                $scope.hasError = false;\r\n\r\n                var workID = createWorkID();\r\n\r\n                var http_call = {\r\n                    method: httpMethod\r\n                };\r\n\r\n                if (httpJSON === true) {\r\n                    // id and is_checking are inside the request body\r\n                    httpBody.id = workID;\r\n                    httpBody.is_checking = 'False';\r\n                    http_call.url = httpURL;\r\n                    http_call.headers = {'Content-type' : 'application/json'};\r\n                    http_call.data = JSON.stringify(httpBody);\r\n                } else {\r\n                    // id and is_checking are in the url directly\r\n                    if (httpMethod === 'GET') {\r\n                        if (noParameter === true) {\r\n                           http_call.url = httpURL + '?is_checking=False&id=' + workID + '&nocache=' + new Date().getTime();\r\n                        } else {\r\n                            http_call.url = httpURL + '&is_checking=False&id=' + workID + '&nocache=' + new Date().getTime();\r\n                        }\r\n                    } else {\r\n                        if (noParameter === true) {\r\n                            http_call.url = httpURL + '?is_checking=False&id=' + workID;\r\n                        } else {\r\n                            http_call.url = httpURL + '&is_checking=False&id=' + workID;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                function periodicChecking() {\r\n                    var http_call = {\r\n                        method: httpMethod\r\n                    };\r\n\r\n                    if (httpJSON === true) {\r\n                        // id and is_checking are inside the request body\r\n                        httpBody.id = workID;\r\n                        httpBody.is_checking = 'True';\r\n                        http_call.url = httpURL;\r\n                        http_call.headers = {'Content-type' : 'application/json'};\r\n                        http_call.data = JSON.stringify(httpBody);\r\n                    } else {\r\n                        // id and is_checking are in the url directly\r\n                        if (httpMethod === 'GET') {\r\n                            if (noParameter === true) {\r\n                                http_call.url = httpURL + '?is_checking=True&id=' + workID + '&nocache=' + new Date().getTime();\r\n                            } else {\r\n                                http_call.url = httpURL + '&is_checking=True&id=' + workID + '&nocache=' + new Date().getTime();\r\n                            }\r\n                        } else {\r\n                            if (noParameter === true) {\r\n                                http_call.url = httpURL + '?is_checking=True&id=' + workID;\r\n                            } else {\r\n                                http_call.url = httpURL + '&is_checking=True&id=' + workID;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    console.log(\"hub controller: API checking call \" + httpMethod + \" \" + http_call.url);\r\n                    $http(http_call).then(\r\n                        function successCheckingCallback(response) {\r\n                            if (response.data.status === 'success') {\r\n                                console.log(\"hub controller: got work results\");\r\n                                setupPeriodicChecking(false);\r\n                                realSuccessCallback(response.data);\r\n                                modalInstance.dismiss('cancel');\r\n                            } else if (response.data.status === 'untrusted') {\r\n                                console.log(\"hub controller: got work results - untrusted\");\r\n                                setupPeriodicChecking(false);\r\n                                realSuccessCallback(response.data);\r\n                                modalInstance.dismiss('cancel');\r\n                            } else {\r\n                                if (response.data.in_progress === true) {\r\n                                    // check again if needed.\r\n                                    console.log(\"hub controller: cannot check work, still in progress\");\r\n                                    setupPeriodicChecking(true);\r\n                                    setTimeout(periodicChecking, checkPeriod);\r\n                                } else {\r\n                                    console.log(\"hub controller: cannot check work, error\");\r\n                                    setupPeriodicChecking(false);\r\n                                    informGeneralError(titleMessage, descMessage, \"The operation failed! \" + response.data.message);\r\n                                    modalInstance.dismiss('cancel');\r\n                                }\r\n                            }\r\n                        }, function errorCheckingCallback(response) {\r\n                            console.log(\"hub controller: cannot check work, error\");\r\n                            var temp_error_message = checkPeriodicCheckingResponseError(response);\r\n                            if (temp_error_message) {\r\n                                setupPeriodicChecking(false);\r\n                                informGeneralError(titleMessage, descMessage, temp_error_message);\r\n                                modalInstance.dismiss('cancel');\r\n                            } else {\r\n                                // do not report, keep checking\r\n                                setupPeriodicChecking(true);\r\n                                setTimeout(periodicChecking, checkPeriod);\r\n                            }\r\n                        });\r\n                }\r\n\r\n                $http(http_call).then(\r\n                    function successCallback(response) {\r\n                        if (response.data.status === 'success') {\r\n\r\n                            // start checking after some delay\r\n                            setupPeriodicChecking(true);\r\n                            setTimeout(periodicChecking, checkPeriod);\r\n\r\n                            console.log(\"hub controller: successfully submitted work\");\r\n                        } else {\r\n                            if (response.data.in_progress === true) {\r\n                                console.log(\"hub controller: cannot submit work, other work in progress\");\r\n                                var error_message = response.data.work_type + ' (run by another user) is still in progress!';\r\n                                informGeneralError(titleMessage, descMessage, error_message);\r\n                                modalInstance.dismiss('cancel');\r\n                            } else {\r\n                                console.log(\"hub controller: cannot submit work, error\");\r\n                                informGeneralError(titleMessage, descMessage, \"The operation failed! \" + response.data.message);\r\n                                modalInstance.dismiss('cancel');\r\n                            }\r\n                        }\r\n                    },function errorCallback(response){\r\n                        console.log(\"hub controller: cannot submit work, error\");\r\n                        informGeneralError(titleMessage, descMessage, \"Something went wrong: HTTP status \" + response.status);\r\n                        modalInstance.dismiss('cancel');\r\n                    });\r\n            }\r\n        });\r\n    };\r\n\r\n    workerProcessRestService.performGeneralExecution = function(httpMethod, httpURL, noParameter, httpJSON, httpBody, passedSuccessCallback, passedErrorCallback, checkPeriod) {\r\n        var workID = createWorkID();\r\n\r\n        var http_call = {\r\n            method: httpMethod\r\n        };\r\n\r\n        if (httpJSON === true) {\r\n            // id and is_checking are inside the request body\r\n            httpBody.id = workID;\r\n            httpBody.is_checking = 'False';\r\n            http_call.url = httpURL;\r\n            http_call.headers = {'Content-type' : 'application/json'};\r\n            http_call.data = JSON.stringify(httpBody);\r\n        } else {\r\n            // id and is_checking are in the url directly\r\n            if (httpMethod === 'GET') {\r\n                if (noParameter === true) {\r\n                    http_call.url = httpURL + '?is_checking=False&id=' + workID + '&nocache=' + new Date().getTime();\r\n                } else {\r\n                    http_call.url = httpURL + '&is_checking=False&id=' + workID + '&nocache=' + new Date().getTime();\r\n                }\r\n            } else {\r\n                if (noParameter === true) {\r\n                    http_call.url = httpURL + '?is_checking=False&id=' + workID;\r\n                } else {\r\n                    http_call.url = httpURL + '&is_checking=False&id=' + workID;\r\n                }\r\n            }\r\n        }\r\n\r\n        function periodicChecking() {\r\n            var http_call = {\r\n                method: httpMethod\r\n            };\r\n\r\n            if (httpJSON === true) {\r\n                // id and is_checking are inside the request body\r\n                httpBody.id = workID;\r\n                httpBody.is_checking = 'True';\r\n                http_call.url = httpURL;\r\n                http_call.headers = {'Content-type' : 'application/json'};\r\n                http_call.data = JSON.stringify(httpBody);\r\n            } else {\r\n                // id and is_checking are in the url directly\r\n                if (httpMethod === 'GET') {\r\n                    if (noParameter === true) {\r\n                        http_call.url = httpURL + '?is_checking=True&id=' + workID + '&nocache=' + new Date().getTime();\r\n                    } else {\r\n                        http_call.url = httpURL + '&is_checking=True&id=' + workID + '&nocache=' + new Date().getTime();\r\n                    }\r\n                } else {\r\n                    if (noParameter === true) {\r\n                        http_call.url = httpURL + '?is_checking=True&id=' + workID;\r\n                    } else {\r\n                        http_call.url = httpURL + '&is_checking=True&id=' + workID;\r\n                    }\r\n                }\r\n            }\r\n\r\n            console.log(\"hub controller: API checking call \" + httpMethod + \" \" + http_call.url);\r\n            $http(http_call).then(\r\n                function successCheckingCallback(response) {\r\n                    if (response.data.status === 'success') {\r\n                        console.log(\"hub controller: got work results\");\r\n                        setupPeriodicChecking(false);\r\n                        passedSuccessCallback(response.data);\r\n                    } else if (response.data.status === 'untrusted') {\r\n                        console.log(\"hub controller: got work results - untrusted\");\r\n                        setupPeriodicChecking(false);\r\n                        passedSuccessCallback(response.data);\r\n                    } else {\r\n                        if (response.data.in_progress === true) {\r\n                            // check again if needed.\r\n                            console.log(\"hub controller: cannot check work, still in progress\");\r\n                            setupPeriodicChecking(true);\r\n                            setTimeout(periodicChecking, checkPeriod);\r\n                        } else {\r\n                            console.log(\"hub controller: cannot check work, error\");\r\n                            setupPeriodicChecking(false);\r\n                            var error_message = response.data.message;\r\n                            passedErrorCallback(error_message);\r\n                        }\r\n                    }\r\n                }, function errorCheckingCallback(response) {\r\n                    console.log(\"hub controller: cannot check work, error\");\r\n                    var temp_error_message = checkPeriodicCheckingResponseError(response);\r\n                    if (temp_error_message) {\r\n                        setupPeriodicChecking(false);\r\n                        passedErrorCallback(temp_error_message);\r\n                    } else {\r\n                        // do not report, keep checking\r\n                        setupPeriodicChecking(true);\r\n                        setTimeout(periodicChecking, checkPeriod);\r\n                    }\r\n                });\r\n        }\r\n\r\n        $http(http_call).then(\r\n            function successCallback(response) {\r\n                if (response.data.status === 'success') {\r\n\r\n                    // start checking after some delay\r\n                    setupPeriodicChecking(true);\r\n                    setTimeout(periodicChecking, checkPeriod);\r\n\r\n                    console.log(\"hub controller: successfully submitted work\");\r\n                } else {\r\n                    if (response.data.in_progress === true) {\r\n                        console.log(\"hub controller: cannot submit work, other work in progress\");\r\n                        setupPeriodicChecking(false);\r\n                        passedErrorCallback(response.data.work_type + ' (run by another user) is still in progress! Please try again later!');\r\n                    } else {\r\n                        console.log(\"hub controller: cannot submit work, error\");\r\n                        setupPeriodicChecking(false);\r\n                        passedErrorCallback(response.data.message);\r\n                    }\r\n                }\r\n            },function errorCallback(response){\r\n                console.log(\"hub controller: cannot submit work, error\");\r\n                setupPeriodicChecking(false);\r\n                passedErrorCallback(\"Something went wrong: HTTP status \" + response.status);\r\n            });\r\n    };\r\n\r\n    workerProcessRestService.performGeneralExecutionOnlySubmit = function(httpMethod, httpURL, noParameter, httpJSON, httpBody, passedSuccessCallback, passedErrorCallback) {\r\n        var workID = createWorkID();\r\n\r\n        var http_call = {\r\n            method: httpMethod\r\n        };\r\n\r\n        if (httpJSON === true) {\r\n            // id and is_checking are inside the request body\r\n            httpBody.id = workID;\r\n            httpBody.is_checking = 'False';\r\n            http_call.url = httpURL;\r\n            http_call.headers = {'Content-type' : 'application/json'};\r\n            http_call.data = JSON.stringify(httpBody);\r\n        } else {\r\n            // id and is_checking are in the url directly\r\n            if (httpMethod === 'GET') {\r\n                if (noParameter === true) {\r\n                    http_call.url = httpURL + '?is_checking=False&id=' + workID + '&nocache=' + new Date().getTime();\r\n                } else {\r\n                    http_call.url = httpURL + '&is_checking=False&id=' + workID + '&nocache=' + new Date().getTime();\r\n                }\r\n            } else {\r\n                if (noParameter === true) {\r\n                    http_call.url = httpURL + '?is_checking=False&id=' + workID;\r\n                } else {\r\n                    http_call.url = httpURL + '&is_checking=False&id=' + workID;\r\n                }\r\n            }\r\n        }\r\n\r\n        $http(http_call).then(\r\n            function successCallback(response) {\r\n                if (response.data.status === 'success') {\r\n                    setupPeriodicChecking(false);\r\n                    passedSuccessCallback(response.data);\r\n                    console.log(\"hub controller: successfully submitted work\");\r\n                } else {\r\n                    if (response.data.in_progress === true) {\r\n                        console.log(\"hub controller: cannot submit work, other work in progress\");\r\n                        setupPeriodicChecking(false);\r\n                        passedErrorCallback(response.data.work_type + ' (run by another user) is still in progress! Please try again later!');\r\n                    } else {\r\n                        console.log(\"hub controller: cannot submit work, error\");\r\n                        setupPeriodicChecking(false);\r\n                        passedErrorCallback(response.data.message);\r\n                    }\r\n                }\r\n            },function errorCallback(response){\r\n                console.log(\"hub controller: cannot submit work, error\");\r\n                setupPeriodicChecking(false);\r\n                passedErrorCallback(\"Something went wrong: HTTP status \" + response.status);\r\n            });\r\n    };\r\n\r\n    return workerProcessRestService;\r\n}]);\r\n","iotgatewayhub.config(function($stateProvider,$urlRouterProvider){\r\n    \r\n    $stateProvider.state('welcome.privacy',{\r\n        url:         '/welcome/privacy', \r\n        templateUrl: '/partials/welcome.privacy.ng.html?version=' + gui_version,\r\n        controller: function($scope,$state,$http,$rootScope,$uibModal,utilityFunctionsService){\r\n             console.log(\"welcome privacy statement #01003a\");\r\n             $scope.continueToLogin = function(){\r\n                  console.log(\"welcome agreed to privacy statement #01003b\");\r\n                  utilityFunctionsService.setCookie(\"privacy\",true,license_duration_days);\r\n                  $state.go('welcome.login');\r\n             };\r\n        }\r\n    });\r\n});","iotgatewayhub.service('httpRequestsService', function($q){\r\n\r\n    // We use service here because we need to keep track of this \"toBeAbortedPromises\" array.\r\n    // For Service, an object will be instantiated.\r\n    var toBeAbortedPromises = [];\r\n\r\n    function customTimeout() {\r\n        var newPromise = $q.defer();\r\n        toBeAbortedPromises.push(newPromise);\r\n        return newPromise.promise;\r\n    }\r\n\r\n    function abortAllRequests() {\r\n        angular.forEach(toBeAbortedPromises, function (eachPromise){\r\n            eachPromise.promise.isAbortedByUs = true;\r\n            eachPromise.resolve();\r\n        });\r\n        // clear the array, and still keep the array object\r\n        toBeAbortedPromises.length = 0;\r\n    }\r\n\r\n    function removeRequest(response) {\r\n        // Once the web request has a response, we should remove it from the tracking array.\r\n        try {\r\n            // skip is response.config.timeout is not a promise\r\n            if (typeof response.config.timeout === 'number') {\r\n                return;\r\n            } else if (response.config.timeout === undefined) {\r\n                return;\r\n            }\r\n\r\n            // try to find a match in the recorded array\r\n            var target_index = -1;\r\n            var count = 0;\r\n            angular.forEach(toBeAbortedPromises, function (eachPromise){\r\n                if (eachPromise.promise === response.config.timeout) {\r\n                    target_index = count;\r\n                }\r\n                count = count + 1;\r\n            });\r\n            if (target_index > -1) {\r\n                // found, so remove it\r\n                toBeAbortedPromises.splice(target_index, 1);\r\n            }\r\n        } catch (err) {\r\n            // ignore error\r\n        }\r\n    }\r\n\r\n    return {\r\n        customTimeout: customTimeout,\r\n        abortAllRequests: abortAllRequests,\r\n        removeRequest: removeRequest\r\n    };\r\n});\r\n\r\niotgatewayhub.factory('httpRequestsInterceptor', ['$rootScope', '$q', 'httpRequestsService', function($rootScope, $q, httpRequestsService){\r\n    return {\r\n        'request': function (config) {\r\n            //console.log('############### req s ####################');\r\n            config = config || {};\r\n            if (typeof config.url === 'string') {\r\n                if (config.url.indexOf('.ng.html') > -1) {\r\n                    // Note:  For Chrome, if there is no connection, it will immediately abort the request and returns status = -1.\r\n                    //      However, For Firefox, if there is no connection,it queues the request as pending request. For user, if the user\r\n                    //      wants to open a GUI, the GUI may appear in-responsive to the user.\r\n                    //      Therefore, we set some timeout for html request.\r\n                    //console.log('dealing with static content');\r\n                    config.timeout = html_content_timeout_milliseconds;\r\n                }\r\n            }\r\n            if (config.timeout === undefined) {\r\n              // If no specific timeout is assigned, we use our custom timeout.\r\n              //console.log('custom promise');\r\n              config.timeout = httpRequestsService.customTimeout();\r\n            }\r\n            return config;\r\n        },\r\n        //'requestError': function (rejection) {\r\n        //    console.log('############### resp f ####################');\r\n        //    console.log(rejection);\r\n        //    return $q.reject(rejection);\r\n        //},\r\n        'response': function (response) {\r\n            //console.log('############### resp s ####################');\r\n            setResponseErrorTime(false);\r\n            httpRequestsService.removeRequest(response);\r\n            return response;\r\n        },\r\n        'responseError': function (rejection) {\r\n            //console.log('############### resp f ####################');\r\n            //console.log(rejection);\r\n            if (rejection.config.timeout.isAbortedByUs) {\r\n                // In this case, this error is due to we aborting this request.... so we should not raise error again.\r\n                // return an never-resolving promise as we do not return success or error.\r\n                return $q.defer().promise;\r\n            }\r\n\r\n            httpRequestsService.removeRequest(rejection);\r\n\r\n            if ((rejection.status === -1) || (rejection.status === 401) || (rejection.status === 408)) {\r\n                setResponseErrorTime(true);\r\n            } else {\r\n                // not targeted error\r\n                setResponseErrorTime(false);\r\n            }\r\n\r\n            if (rejection.status === -1) {\r\n                // Check for IE, Firefox, and Chrome.\r\n                //\r\n                // This is due to not reaching the backend server.\r\n                // In this scenarios,\r\n                //      For all browsers, GET request should result in this right away.\r\n                //      For some browser, POST/PUT/DELETE request will result in this right away.\r\n                //      However, for some browser (Firefox, e.g.), POST/PUT/DELETE will be queued (and keep trying) until the timeout time is reached.\r\n                // We need to:\r\n                //      1. In the handler of \"Gateway_Not_Reachable\",  cancel/abort all pending/queued requests.\r\n                //      2. In uibModal.open or state (GET request with .ng.html url), we set timeout so that we can get response of status = -1.\r\n                if (start_trigger_no_connection) {\r\n                    var to_report = checkResponseErrorReport();\r\n                    if (to_report) {\r\n                        $rootScope.$broadcast(\"Gateway_Not_Reachable\");\r\n                    }\r\n                }\r\n            }\r\n\r\n            return $q.reject(rejection);\r\n        }\r\n    };\r\n}]);\r\n","iotgatewayhub.factory('utilityFunctionsService', ['$http', function($http){\r\n    var utilityFunctionsService = {};\r\n\r\n    utilityFunctionsService.isNumber = function(n) {\r\n        return !isNaN(parseFloat(n)) && isFinite(n);\r\n    };\r\n\r\n    utilityFunctionsService.pad = function(n, width, z) {\r\n        z = z || '0';\r\n        n = n + '';\r\n        return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;\r\n    };\r\n\r\n    utilityFunctionsService.parse_digest = function(_header) {\r\n        var ws = '(?:(?:\\\\r\\\\n)?[ \\\\t])+';\r\n        var token = '(?:[\\\\x21\\\\x23-\\\\x27\\\\x2A\\\\x2B\\\\x2D\\\\x2E\\\\x30-\\\\x39\\\\x3F\\\\x41-\\\\x5A\\\\x5E-\\\\x7A\\\\x7C\\\\x7E]+)';\r\n        var quotedString = '\"(?:[\\\\x00-\\\\x0B\\\\x0D-\\\\x21\\\\x23-\\\\x5B\\\\\\\\x5D-\\\\x7F]|'+ws+'|\\\\\\\\[\\\\x00-\\\\x7F])*\"';\r\n        var tokenizer = RegExp(token+'(?:=(?:'+quotedString+'|'+token+'))?', 'g');\r\n        var tokens = _header.match(tokenizer);\r\n        return tokens;\r\n    };\r\n\r\n    utilityFunctionsService.unq = function(quotedString) {\r\n        return quotedString.substr(1, quotedString.length-2).replace(/(?:(?:\\r\\n)?[ \\t])+/g, \" \");\r\n    };\r\n\r\n    utilityFunctionsService.setCookie = function(cname, cvalue, exdays) {\r\n        var d = new Date();\r\n        d.setTime(d.getTime() + (exdays*24*60*60*1000));\r\n        var expires = \"expires=\"+d.toUTCString();\r\n        document.cookie = cname + \"=\" + cvalue + \"; \" + expires;\r\n    };\r\n\r\n    utilityFunctionsService.checkNetwork = function(_successCallback,_errorCallback){\r\n        $http({\r\n            method: 'GET',\r\n            url:    '/api/proxy?request=test&nocache=' + new Date().getTime(),\r\n            cache:  false,\r\n        }).then(_successCallback,_errorCallback);\r\n    };\r\n\r\n    return utilityFunctionsService;\r\n}]);\r\n","// These are general functions used in several states.\r\niotgatewayhub.expandHub_gatewayOperations = function($scope,$http,$state,$timeout,$window) {\r\n\r\n    $scope.rebootGateway = function(_success, _error, timeout_value){\r\n        // briefly cancel the network checking so that no connection error won't pop-up.\r\n        // When we go to state.hub again, it will be rescheduled.\r\n        $scope.stopCheckingNetwork();\r\n\r\n        // We give reboot gateway a timeout, so that we will get some response back.\r\n        $http({\r\n            method: 'PUT',\r\n            url:    '/api/osc',\r\n            timeout: reboot_request_timeout_milliseconds\r\n        }).then(function successCallback(response) {\r\n            $timeout(function () {\r\n                // do not validate session so that we can show login.\r\n                do_validate_session = false;\r\n                //$window.location.href = '/';\r\n                $state.go('welcome.login');\r\n            }, timeout_value);\r\n            if(_.isFunction(_success)){ _success(response); }\r\n        }, function errorCallback(response) {\r\n            $scope.startCheckingNetwork();\r\n            if(_.isFunction(_error)){ _error(response); }\r\n        });\r\n    };\r\n\r\n    $scope.scanUSBDevices = function(){\r\n        $scope.scanning_usb = true;\r\n        console.log(\"hub controller: scanning usb devices\");\r\n        $http({\r\n            method: 'GET',\r\n            url:    '/api/usb?nocache=' + new Date().getTime()\r\n        }).then(function successCallback(response) {\r\n            $scope.usb_devices = response.data;\r\n            $scope.scanning_usb = false;\r\n            console.log(\"hub controller: scanUSBdevices found \"+$scope.usb_devices.length+\" usb devices\");\r\n        },function errorCallback(response) {\r\n            console.log(\"error scanning usb devices\");\r\n            $scope.scanning_usb = true;\r\n        });\r\n    };\r\n\r\n    $scope.logout = function(){\r\n        var _method   = \"GET\";\r\n        var _uri      = '/api/auth?nocache=' + new Date().getTime();\r\n\r\n        $http({\r\n            method: _method,\r\n            url:    _uri,\r\n            headers : {'Content-type' : 'application/json'}\r\n        }).then(function successCallback(response) {\r\n            $state.go('welcome.login');\r\n        }, function errorCallback(response) {\r\n            $state.go('welcome.login');\r\n        });\r\n    };\r\n\r\n};\r\n","// These are general functions used in several states.\r\niotgatewayhub.expandHub_openOSUpdate = function($scope,$uibModal,$http,workerProcessRestService) {\r\n\r\n    ///////////////////////////////////////\r\n    // GUI Modals\r\n    //////////////////////////////////////\r\n\r\n    $scope.enterOSCredential = function(){\r\n        console.log(\"hub entering OS credential\");\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'partials/hub.confirm.os.update.ng.html?version=' + gui_version,\r\n            animation:    true,\r\n            size: 'lg',\r\n            backdrop: modal_light_dismiss_enabled,\r\n            scope: $scope,\r\n            controller: function($scope,$state,$http,$rootScope){\r\n                $scope.do_enter_credential = true;\r\n                $scope.do_confirm_update = false;\r\n\r\n                $scope.credentials = {username: null, password: null};\r\n                $scope.cancelOSUpdate = function(){\r\n                    console.log(\"hub canceling OS credential\");\r\n                    $scope.informOSUpdate_CancelWarning();\r\n                    modalInstance.dismiss('cancel');\r\n                };\r\n\r\n                $scope.continueChecking = function(){\r\n                    $scope.checkOSUpdate($scope.credentials);\r\n                    modalInstance.dismiss('cancel');\r\n                };\r\n\r\n            }\r\n\r\n        });\r\n    };\r\n\r\n    $scope.checkOSUpdate = function(_credentials) {\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'partials/hub.inform.os.update.inprogress.ng.html?version=' + gui_version,\r\n            animation:    true,\r\n            size: 'lg',\r\n            backdrop: modal_light_dismiss_enabled,\r\n            scope: $scope,\r\n            controller: function($scope,$state,$http,$rootScope){\r\n                console.log(\"hub controller: getting osupdate 007a\");\r\n\r\n                $scope.title_message = \"OS Update: Checking in Progress\";\r\n                $scope.description_message = \"Please do not power-down the gateway. Will be auto-redirected to another page once checking is complete.\";\r\n                $scope.bar_before_message = \"Checking update availability...\";\r\n                $scope.bar_after_message = null;\r\n                $scope.error_message = null;\r\n                $scope.show_close_button = false;\r\n\r\n                // prepare for body data\r\n                if (typeof _credentials === \"undefined\") {\r\n                    content_body = {type: \"check\", request: \"rcpl\"};\r\n                } else {\r\n                    content_body = _credentials;\r\n                    content_body.type = \"check\";\r\n                    content_body.request = \"rcpl\";\r\n                }\r\n\r\n                // make the POST call\r\n                tempURL = '/api/osup';\r\n                workerProcessRestService.performGeneralExecution('POST', tempURL, false, true, content_body,\r\n                    function successCallback(data) {\r\n                        if (data.status === 'failure') {\r\n                            $scope.informOSUpdateError(data.message);\r\n                            modalInstance.dismiss('cancel');\r\n                        } else {\r\n                            $scope.foundOSUpdate = data.update;\r\n                            if($scope.foundOSUpdate){\r\n                                $scope.confirmOSUpdate(_credentials);\r\n                                modalInstance.dismiss('cancel');\r\n                            }else{\r\n                                $scope.checkOSUpdate_Packages(modalInstance);\r\n                            }\r\n                        }\r\n                    }, function errorCallback(errorMessage){\r\n                        $scope.informOSUpdateError(errorMessage);\r\n                        modalInstance.dismiss('cancel');\r\n                    }, rest_check_interval_milliseconds);\r\n            }\r\n        });\r\n    };\r\n\r\n    $scope.checkOSUpdate_Packages = function(modalInstance) {\r\n        console.log(\"hub controller: getting osupdate_package\");\r\n\r\n        // prepare for body data\r\n        content_body = {type: \"check\", request: \"package\"};\r\n\r\n        // make the POST call\r\n        tempURL = '/api/osup';\r\n        workerProcessRestService.performGeneralExecution('POST', tempURL, false, true, content_body,\r\n            function successCallback(data) {\r\n                if (data.status === 'failure') {\r\n                    $scope.informOSUpdateError(data.message);\r\n                    modalInstance.dismiss('cancel');\r\n                } else {\r\n                    $scope.foundOSUpdate_Packages = data.package_update;\r\n                    if($scope.foundOSUpdate_Packages){\r\n                        $scope.OSUpdate_Packages = data.packages;\r\n                        $scope.confirmOSUpdatePackages();\r\n                        modalInstance.dismiss('cancel');\r\n                    }else{\r\n                        $scope.informOSUpdateNotAvailable();\r\n                        modalInstance.dismiss('cancel');\r\n                    }\r\n                }\r\n            }, function errorCallback(errorMessage) {\r\n                $scope.informOSUpdateError(errorMessage);\r\n                modalInstance.dismiss('cancel');\r\n            }, rest_check_interval_milliseconds);\r\n    };\r\n\r\n    $scope.confirmOSUpdate = function(_credentials){\r\n        console.log(\"hub confirming os update\");\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'partials/hub.confirm.os.update.ng.html?version=' + gui_version,\r\n            animation:    true,\r\n            size: 'lg',\r\n            backdrop: modal_light_dismiss_enabled,\r\n            scope: $scope,\r\n            controller: function($scope,$state,$http,$rootScope){\r\n                $scope.do_enter_credential = false;\r\n                $scope.do_confirm_update = true;\r\n\r\n                $scope.cancelOSUpdate = function(){\r\n                    console.log(\"hub canceling os update\");\r\n                    $scope.informOSUpdate_CancelWarning();\r\n                    modalInstance.dismiss('cancel');\r\n                };\r\n\r\n                $scope.doOSUpdate = function(){\r\n                    $scope.showOSUpdate(_credentials);\r\n                    modalInstance.dismiss('cancel');\r\n                };\r\n            }\r\n        });\r\n    };\r\n\r\n    $scope.confirmOSUpdatePackages = function(){\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'partials/hub.confirm.os.update.package.ng.html?version=' + gui_version,\r\n            animation:    true,\r\n            size: 'lg',\r\n            backdrop: modal_light_dismiss_enabled,\r\n            scope: $scope,\r\n            controller: function($scope,$state,$http,$rootScope){\r\n\r\n                $scope.cancelOSUpdate = function(){\r\n                    $scope.informOSUpdate_CancelWarning();\r\n                    modalInstance.dismiss('cancel');\r\n                };\r\n\r\n                $scope.doOSUpdate_Packages = function(){\r\n                    $scope.showOSUpdatePackages();\r\n                    modalInstance.dismiss('cancel');\r\n                };\r\n            }\r\n        });\r\n    };\r\n\r\n    $scope.showOSUpdate = function(_credentials){\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'partials/hub.inform.os.update.inprogress.ng.html?version=' + gui_version,\r\n            animation:    true,\r\n            size: 'lg',\r\n            backdrop: modal_light_dismiss_enabled,\r\n            scope: $scope,\r\n            controller: function($scope,$state,$http,$rootScope){\r\n                $scope.title_message = \"OS Update: Installation in Progress\";\r\n                if ($scope.isQuark === true) {\r\n                    $scope.description_message = \"Please do not power-down the gateway. The OS update is in progress, downloading updates and installing onto this gateway. The update takes several hours in most network conditions.\";\r\n                } else {\r\n                    $scope.description_message = \"Please do not power-down the gateway. The OS update is in progress, downloading updates and installing onto this gateway. The update takes up to an hour in most network conditions.\";\r\n                }\r\n                $scope.bar_before_message = \"\";\r\n                $scope.bar_after_message = \"The gateway will automatically restart once update is complete.\";\r\n                $scope.error_message = null;\r\n                $scope.show_close_button = false;\r\n\r\n                console.log(\"performing os update\");\r\n\r\n                $scope.performUpdateSequence = function(){\r\n                    $scope.bar_before_message = 'Update in Progress...';\r\n                    $scope.error_message  = null;\r\n\r\n                    // prepare for body data\r\n                    content_body = _credentials;\r\n                    content_body.type = \"update_rcpl\";\r\n\r\n                    // make the POST call\r\n                    tempURL = '/api/osup';\r\n                    workerProcessRestService.performGeneralExecution('POST', tempURL, false, true, content_body,\r\n                        function successCallback(data) {\r\n                            if (data.status === 'success'){\r\n                                $scope.informOSUpdateRestart();\r\n                                modalInstance.dismiss('cancel');\r\n                            } else {\r\n                                $scope.informOSUpdateError(data.message);\r\n                                modalInstance.dismiss('cancel');\r\n                            }\r\n                        }, function errorCallback(errorMessage) {\r\n                            $scope.informOSUpdateError(errorMessage);\r\n                            modalInstance.dismiss('cancel');\r\n                        }, rest_check_interval_milliseconds_ll);\r\n                };\r\n\r\n                $scope.performUpdateSequence();\r\n            }\r\n        });\r\n    };\r\n\r\n    $scope.showOSUpdatePackages = function(){\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'partials/hub.inform.os.update.inprogress.ng.html?version=' + gui_version,\r\n            animation:    true,\r\n            size: 'lg',\r\n            backdrop: modal_light_dismiss_enabled,\r\n            scope: $scope,\r\n            controller: function($scope,$state,$http,$rootScope){\r\n                $scope.title_message = \"OS Update: Installation in Progress\";\r\n                $scope.description_message = \"Please do not power-down the gateway. The OS update is in progress, downloading updates and installing onto this gateway. The updating time depends on the number of packages that need to be updated.\";\r\n                $scope.bar_before_message = \"\";\r\n                $scope.bar_after_message = \"The gateway will automatically restart once update is complete.\";\r\n                $scope.error_message = null;\r\n                $scope.show_close_button = false;\r\n\r\n                console.log(\"hub controller: updating OS packages\");\r\n\r\n                // prepare for body data\r\n                content_body = {type: \"update_packages\"};\r\n\r\n                // make the POST call\r\n                tempURL = '/api/osup';\r\n                workerProcessRestService.performGeneralExecution('POST', tempURL, false, true, content_body,\r\n                    function successCallback(data) {\r\n                        if (data.status === 'success') {\r\n                            // so that we can get the available update count to display.\r\n                            try {\r\n                                var p_list = JSON.parse(data.p_list);\r\n                                $scope.setPackages(p_list);\r\n                            } catch(e) {\r\n                                // ignore error\r\n                            }\r\n\r\n                            $scope.informOSUpdateRestart();\r\n                            modalInstance.dismiss('cancel');\r\n                        }else{\r\n                            console.log(\"error updating OS packages.\");\r\n                            $scope.informOSUpdateError(response.data.message);\r\n                            modalInstance.dismiss('cancel');\r\n                        }\r\n                    }, function errorCallback(errorMessage) {\r\n                        $scope.informOSUpdateError(errorMessage);\r\n                        modalInstance.dismiss('cancel');\r\n                    }, rest_check_interval_milliseconds_l);\r\n            }\r\n        });\r\n    };\r\n\r\n    $scope.informOSUpdateRestart = function(){\r\n        console.log(\"inform os update restart\");\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'partials/hub.inform.os.update.end.ng.html?version=' + gui_version,\r\n            animation:    true,\r\n            size: 'lg',\r\n            backdrop: modal_light_dismiss_enabled,\r\n            scope: $scope,\r\n            controller: function($scope,$state,$http,$rootScope,$timeout){\r\n                $scope.title_message = \"OS Update: Installation Complete\";\r\n                $scope.description_message = \"\";\r\n                $scope.show_bar = true;\r\n                $scope.bar_before_message = \"Update Installed!\";\r\n                $scope.bar_after_message = \"The gateway will automatically restart in 10 seconds.\";\r\n                $scope.show_last_error = false;\r\n                $scope.show_last_normal = true;\r\n                $scope.show_close = true;\r\n                $scope.show_close_button = false;\r\n                $scope.show_warning_html = false;\r\n\r\n                $scope.closeModal = function(){\r\n                    modalInstance.dismiss('cancel');\r\n                };\r\n\r\n                $scope.rebootGateway(\r\n                    function successCallback(response) {\r\n                        console.log(\"rebooted gateway: \" + response.data.status);\r\n                        $timeout(function(){\r\n                            modalInstance.dismiss('cancel');\r\n                        }, restart_welcome_latency_milliseconds - 1000);\r\n                    }, function errorCallback(response) {\r\n                        console.log(\"gateway reboot failed\");\r\n                        $scope.bar_after_message = \"Rebooting gateway failed! Please manually restart the gateway!\";\r\n                        $scope.show_last_error = true;\r\n                        $scope.show_last_normal = false;\r\n                    }, restart_welcome_latency_milliseconds);\r\n            }\r\n        });\r\n    };\r\n\r\n    $scope.informOSUpdateError = function(_error_message){\r\n        console.log(\"inform os update error\");\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'partials/hub.inform.os.update.end.ng.html?version=' + gui_version,\r\n            animation:    true,\r\n            size: 'lg',\r\n            backdrop: modal_light_dismiss_enabled,\r\n            scope: $scope,\r\n            controller: function($scope,$state,$http,$rootScope){\r\n                $scope.title_message = \"OS Update: Installation Error\";\r\n                $scope.description_message = \"\";\r\n                $scope.show_bar = true;\r\n                $scope.bar_before_message = \"Update Failed!\";\r\n                $scope.bar_after_message = _error_message;\r\n                $scope.show_last_error = true;\r\n                $scope.show_last_normal = false;\r\n                $scope.show_close = true;\r\n                $scope.show_close_button = false;\r\n                $scope.show_warning_html = false;\r\n\r\n                $scope.closeModal = function(){\r\n                    modalInstance.dismiss('cancel');\r\n                };\r\n            }\r\n        });\r\n    };\r\n\r\n    $scope.informOSUpdateNotAvailable = function(){\r\n        console.log(\"hub confirming os update #8490a\");\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'partials/hub.inform.os.update.end.ng.html?version=' + gui_version,\r\n            animation:    true,\r\n            size: 'lg',\r\n            backdrop: modal_light_dismiss_enabled,\r\n            scope: $scope,\r\n            controller: function($scope,$state,$http,$rootScope){\r\n                $scope.title_message = \"OS Update: No Update\";\r\n                $scope.description_message = \"\";\r\n                $scope.show_bar = true;\r\n                $scope.bar_before_message = \"Update Not Available!\";\r\n                $scope.bar_after_message = \"\";\r\n                $scope.show_last_error = false;\r\n                $scope.show_last_normal = true;\r\n                $scope.show_close = false;\r\n                $scope.show_close_button = true;\r\n                $scope.show_warning_html = false;\r\n\r\n                $scope.closeModal = function(){\r\n                    modalInstance.dismiss('cancel');\r\n                };\r\n            }\r\n        });\r\n    };\r\n\r\n    $scope.informOSUpdateDone = function(){\r\n        console.log(\"inform os update done\");\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'partials/hub.inform.os.update.end.ng.html?version=' + gui_version,\r\n            animation:    true,\r\n            size: 'lg',\r\n            backdrop: modal_light_dismiss_enabled,\r\n            scope: $scope,\r\n            controller: function($scope,$state,$http,$rootScope,$timeout){\r\n                $scope.title_message = \"OS Update: Installation Complete\";\r\n                $scope.description_message = \"\";\r\n                $scope.show_bar = true;\r\n                $scope.bar_before_message = \"Update Installed!\";\r\n                $scope.bar_after_message = \"\";\r\n                $scope.show_last_error = false;\r\n                $scope.show_last_normal = true;\r\n                $scope.show_close = false;\r\n                $scope.show_close_button = true;\r\n                $scope.show_warning_html = false;\r\n\r\n                $scope.closeModal = function(){\r\n                    modalInstance.dismiss('cancel');\r\n                };\r\n            }\r\n\r\n        });\r\n    };\r\n\r\n    $scope.informOSUpdate_CancelWarning = function(){\r\n        // disable this for now\r\n        return;\r\n\r\n        console.log(\"inform os update cancel warning\");\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'partials/hub.inform.os.update.end.ng.html?version=' + gui_version,\r\n            animation:    true,\r\n            size: 'lg',\r\n            backdrop: modal_light_dismiss_enabled,\r\n            scope: $scope,\r\n            controller: function($scope,$state,$http,$rootScope,$timeout){\r\n                $scope.title_message = \"OS Update: Update Cancelled\";\r\n                $scope.description_message = '';\r\n                $scope.show_bar = false;\r\n                $scope.bar_before_message = \"\";\r\n                $scope.bar_after_message = \"\";\r\n                $scope.show_last_error = false;\r\n                $scope.show_last_normal = false;\r\n                $scope.show_close = false;\r\n                $scope.show_close_button = true;\r\n                $scope.show_warning_html = true;\r\n\r\n                $scope.closeModal = function(){\r\n                    modalInstance.dismiss('cancel');\r\n                };\r\n            }\r\n\r\n        });\r\n    };\r\n};","// These are general functions used in several states.\r\niotgatewayhub.expandHub_packages = function($scope,$state,$http,$rootScope,$uibModal,$timeout,workerProcessRestService) {\r\n\r\n    var PACKAGE_ACTIVITY_TYPE = {\r\n        INSTALL: \"INSTALL\",\r\n        UNINSTALL: \"UNINSTALL\",\r\n        UPDATE: \"UPDATE\",\r\n        UPDATE_ALL: \"UPDATE_ALL\",\r\n        SELF_UPDATE: \"SELF_UPDATE\"\r\n    };\r\n\r\n    var PACKAGE_STATE = {\r\n        INSTALLED: \"INSTALLED\",\r\n        UNINSTALLED: \"UNINSTALLED\",\r\n        UPDATED:\"UPDATED\",\r\n        UPDATE_FAILED:\"UPDATE_FAILED\"\r\n    };\r\n\r\n    // The Global State //\r\n    $scope.$on('packageActivityStart', function(opt, args){\r\n        var $s = opt.currentScope;\r\n        if(args){\r\n            var _name = args[0] ?  args[0] : '';\r\n            var _type= args[1] ?  args[1] : '';\r\n        }\r\n\r\n        $s.package_activity = true;\r\n\r\n        switch(_type){\r\n            case PACKAGE_ACTIVITY_TYPE.INSTALL:\r\n                $s.installing_package[_name] = true;\r\n                $s.installing_any_package     = true;\r\n                break;\r\n\r\n            case PACKAGE_ACTIVITY_TYPE.UNINSTALL:\r\n                $s.uninstalling_package[_name] = true;\r\n                break;\r\n\r\n            case PACKAGE_ACTIVITY_TYPE.UPDATE:\r\n                $s.updating_package[_name] = true;\r\n                break;\r\n\r\n            case PACKAGE_ACTIVITY_TYPE.SELF_UPDATE:\r\n                $s.selfUpgrading = true;\r\n                $s.updating_package[_name] = true;\r\n                break;\r\n\r\n            case PACKAGE_ACTIVITY_TYPE.UPDATE_ALL:\r\n                $s.installing_all_package_updates = true;\r\n                break;\r\n\r\n        }\r\n    });\r\n\r\n    $scope.$on('packageActivityStop', function(opt, args){\r\n        var $s = opt.currentScope;\r\n\r\n        if(args){\r\n            var _name = args[0] ?  args[0] : '';\r\n            var _type= args[1] ?  args[1] : '';\r\n        }\r\n        // manages package activity states, regardless of success/failure\r\n\r\n        $s.package_activity = false;\r\n\r\n        switch(_type){\r\n            case PACKAGE_ACTIVITY_TYPE.INSTALL:\r\n                $s.installing_package[_name] = false;\r\n                $s.installing_any_package     = false;\r\n                break;\r\n\r\n            case PACKAGE_ACTIVITY_TYPE.UNINSTALL:\r\n                $s.uninstalling_package[_name] = false;\r\n                break;\r\n\r\n            case PACKAGE_ACTIVITY_TYPE.UPDATE:\r\n                $s.updating_package[_name] = false;\r\n                break;\r\n\r\n            case PACKAGE_ACTIVITY_TYPE.SELF_UPDATE:\r\n                $s.selfUpgrading = false;\r\n                $s.updating_package[_name] = false;\r\n                break;\r\n\r\n            case PACKAGE_ACTIVITY_TYPE.UPDATE_ALL:\r\n                $s.installing_all_package_updates = false;\r\n        }\r\n    });\r\n\r\n    ///////////////////////////////////////\r\n    // Package functions - basic ops\r\n    //////////////////////////////////////\r\n\r\n    function basicInstallPackage(_name,_trust, successCallback, errorCallback) {\r\n        var _untrusted_query = \"&rpm=untrusted\";\r\n        tempURL = '/api/packages?package='+encodeURIComponent(_name)+(_trust?_untrusted_query:'');\r\n        workerProcessRestService.performGeneralExecution('POST', tempURL, false, false, null,\r\n            successCallback, errorCallback, rest_check_interval_milliseconds_m);\r\n    }\r\n\r\n    function basicUninstallPackage(_name, successCallback, errorCallback) {\r\n        tempURL = '/api/packages?package='+encodeURIComponent(_name);\r\n        workerProcessRestService.performGeneralExecution('DELETE', tempURL, false, false, null,\r\n            successCallback, errorCallback, rest_check_interval_milliseconds_m);\r\n    }\r\n\r\n    function basicUpdatePackage(_name, _trust, successCallback, errorCallback) {\r\n        var _untrusted_query = \"&rpm=untrusted\";\r\n        tempURL = '/api/packages?package='+encodeURIComponent(_name)+(_trust?_untrusted_query:'');\r\n        workerProcessRestService.performGeneralExecution('PUT', tempURL, false, false, null,\r\n            successCallback, errorCallback, rest_check_interval_milliseconds_m);\r\n    }\r\n\r\n    function basicUpdateAllPackages(_trust, successCallback, errorCallback) {\r\n        var _untrusted_query = \"&rpm=untrusted\";\r\n        tempURL = '/api/packages?package=all'+(_trust?_untrusted_query:'');\r\n        workerProcessRestService.performGeneralExecution('PUT', tempURL, false, false, null,\r\n            successCallback, errorCallback, rest_check_interval_milliseconds_l);\r\n    }\r\n\r\n    function basicSelfUpgrade(successCallback, errorCallback) {\r\n        tempURL = '/api/selfupgrade';\r\n        workerProcessRestService.performGeneralExecutionOnlySubmit('PUT', tempURL, true, false, null,\r\n            successCallback, errorCallback);\r\n    }\r\n\r\n    ///////////////////////////////////////\r\n    // Package functions\r\n    //////////////////////////////////////\r\n\r\n    $scope.checkForPackageActivity = function(){\r\n        return $scope.package_activity || $scope.installing_any_package; // true value means block IO\r\n    };\r\n\r\n    function changePackageState(_package, state, blockSetArr, message ){\r\n\r\n        // Modifies the models\r\n\r\n        switch(state){\r\n            case PACKAGE_STATE.INSTALLED:\r\n                _package.installed = true;\r\n                $scope.installed_package[_package.name] = true;\r\n                break;\r\n\r\n            case PACKAGE_STATE.UNINSTALLED:\r\n                _package.installed = false;\r\n                $scope.installed_package[_package.name]  = false;\r\n                _.remove($scope.installed, { 'name': _package.name });\r\n                if(!blockSetArr) $scope.setArrays(true);\r\n                break;\r\n\r\n            case PACKAGE_STATE.UPDATED:\r\n                $scope.updating_package[_package.name] = false;\r\n                _package.version        =_package.upgrade_version;\r\n                _package.upgrade_version= null;\r\n                $scope.updated_package[_package.name] = true;\r\n                if(!blockSetArr) $scope.setArrays(false);\r\n                break;\r\n\r\n            case PACKAGE_STATE.UPDATE_FAILED:\r\n                if (typeof message === \"undefined\") {\r\n                    update_message = '';\r\n                } else {\r\n                    update_message = message;\r\n                }\r\n                $scope.updating_package[_package.name] = false;\r\n                $scope.update_package_failed[_package.name] = true;\r\n                $scope.update_package_fail_message[_package.name] = update_message;\r\n                break;\r\n        }\r\n    }\r\n\r\n    $scope.showPackageInfo = function(_package){\r\n        tempURL = '/api/packageinfo?name='+_package.name;\r\n        workerProcessRestService.informGeneralChecking('GET', tempURL, false, false, null,\r\n            _package.name, '', 'Getting Package Information...',\r\n             function successCallback(data) {\r\n                var _details = data;\r\n                for (var attrname in _details) { _package[attrname] = _details[attrname]; }\r\n                $scope.openPackageInfoModal(_package);\r\n             }, rest_check_interval_milliseconds_m);\r\n    };\r\n\r\n    $scope.installPackage = function(_package,_success,_error,_trust){\r\n        var _name = _package.name;\r\n        $scope.message = '';\r\n\r\n        // Check for blockers\r\n        if(_package.installed){\r\n            console.log(\"hub control not installing package \"+_name+ \" because it is already installed #9033z\");\r\n            return;\r\n        }\r\n\r\n        if($scope.checkForPackageActivity()){\r\n            console.log(\"hub control not installing package \"+_name+ \" because package activity in progress #9033q\");\r\n            return;\r\n        }\r\n\r\n        // Start install\r\n        $rootScope.$broadcast('packageActivityStart', [_name, PACKAGE_ACTIVITY_TYPE.INSTALL]);\r\n        basicInstallPackage(_name, _trust,\r\n            function successCallback(data) {\r\n                $rootScope.$broadcast('packageActivityStop', [_name, PACKAGE_ACTIVITY_TYPE.INSTALL]);\r\n                if (data.status===\"success\") {\r\n                    changePackageState(_package, PACKAGE_STATE.INSTALLED);\r\n\r\n                    try {\r\n                        var p_list = JSON.parse(data.p_list);\r\n                        $scope.setPackages(p_list);\r\n                    } catch(e) {\r\n                        // ignore error\r\n                    }\r\n\r\n                    $timeout(function(){\r\n                        $scope.setArrays(true);\r\n                        if(_.isFunction(_success)){ _success(); }\r\n                    },1500);\r\n                } else if (data.status==='untrusted' && !_trust){\r\n                    //$scope.openInstallUntrustedPackageModal(_package, data.error)\r\n                    _package.confirmUntrusted = true;\r\n                } else {\r\n                    $scope.openInstallPackageErrorModal('Package Install Error', _package, data.message);\r\n                    if(_.isFunction(_error)){_error();}\r\n                }\r\n            }, function errorCallback(errorMessage) {\r\n                $rootScope.$broadcast('packageActivityStop', [_name, PACKAGE_ACTIVITY_TYPE.INSTALL]);\r\n                $scope.openInstallPackageErrorModal('Package Install Error', _package, errorMessage);\r\n                if(_.isFunction(_error)){_error();}\r\n            });\r\n    };\r\n\r\n    $scope.uninstallPackage = function(_package){\r\n        var _name = _package.name;\r\n        $scope.message = '';\r\n        if($scope.uninstalling_package[_package.name]){\r\n            return;\r\n        }\r\n\r\n        $rootScope.$broadcast('packageActivityStart', [_name, PACKAGE_ACTIVITY_TYPE.UNINSTALL]);\r\n\r\n        basicUninstallPackage(_package.name,\r\n            function successCallback(data) {\r\n                $scope.package_activity = false;\r\n                $scope.uninstalling_package[_package.name] = false;\r\n                changePackageState(_package, PACKAGE_STATE.UNINSTALLED);\r\n                $rootScope.$broadcast('packageActivityStop', [_name, PACKAGE_ACTIVITY_TYPE.UNINSTALL]);\r\n\r\n                try {\r\n                    var p_list = JSON.parse(data.p_list);\r\n                    $scope.setPackages(p_list);\r\n                } catch(e) {\r\n                    // ignore error\r\n                }\r\n\r\n            }, function errorCallback(errorMessage) {\r\n                $scope.package_activity = false;\r\n                $scope.uninstalling_package[_package.name] = false;\r\n                $rootScope.$broadcast('packageActivityStop', [_name, PACKAGE_ACTIVITY_TYPE.UNINSTALL]);\r\n                $scope.message = errorMessage;\r\n                $scope.openInstallPackageErrorModal('Package Uninstall Error', _package, errorMessage);\r\n            });\r\n    };\r\n\r\n    $scope.launchPackage = function(_name,_url){\r\n        console.log(\"launching package \"+_name+\" at url:\"+_url+\" #003v\");\r\n        //if($scope.checkForPackageActivity()){\r\n        //    return;\r\n        //}\r\n\r\n        var win = window.open(window.location.protocol+\"//\"+_url, '_blank');\r\n        win.focus();\r\n    };\r\n\r\n    $scope.updatePackage = function(_package,_success,_error,_trust){\r\n\r\n        var _name    = _package.name;\r\n        var _version = _package.upgrade_version;\r\n        if(_version===''){\r\n            console.log(\"hub control NOT updating package \"+_name+\" because upgrade_version is '' #30255z\");\r\n            return;\r\n        }\r\n\r\n        if(_package.name === 'iot-developer-hub'){\r\n            $scope.openUpdateDevHubPackageModal(_package);\r\n            return;\r\n        }\r\n\r\n        $rootScope.$broadcast('packageActivityStart', [_name, PACKAGE_ACTIVITY_TYPE.UPDATE]);\r\n\r\n        basicUpdatePackage(_name, _trust,\r\n            function successCallback(data) {\r\n                $rootScope.$broadcast('packageActivityStop', [_name, PACKAGE_ACTIVITY_TYPE.UPDATE]);\r\n                if (data.status === \"success\") {\r\n\r\n                    if ('p_info' in data) {\r\n                        var _details = data.p_info;\r\n                        for (var attrname in _details) { _package[attrname] = _details[attrname]; }\r\n                    }\r\n\r\n                    try {\r\n                        var p_list = JSON.parse(data.p_list);\r\n                        $scope.setPackages(p_list);\r\n                    } catch(e) {\r\n                        // ignore error\r\n                    }\r\n\r\n                    changePackageState(_package,PACKAGE_STATE.UPDATED);\r\n                    if (_.isFunction(_success)) {_success();}\r\n                } else if (data.status === 'untrusted' && !_trust) {\r\n                    $scope.openUpdateUntrustedPackageModal(_package,data.error,_success);\r\n                    return;\r\n                } else {\r\n                    updateFailed(_package, data.message);\r\n                }\r\n            }, function errorCallback(errorMessage) {\r\n                updateFailed(_package, errorMessage);\r\n            });\r\n\r\n        function updateFailed(_package, errorMessage){\r\n            $rootScope.$broadcast('packageActivityStop', [_name, PACKAGE_ACTIVITY_TYPE.UPDATE]);\r\n\r\n            if(_.isFunction(_error)){_error(errorMessage);}\r\n\r\n            changePackageState(_package, PACKAGE_STATE.UPDATE_FAILED, false, errorMessage);\r\n\r\n            // ui-related hacks\r\n            $scope.update_package_failed[_package.name] = true;\r\n            $scope.update_package_fail_message[_package.name] = errorMessage;\r\n            $timeout(function(){\r\n                $scope.update_package_failed[_package.name] = false;\r\n            }, linger_info_timeout_milliseconds);\r\n        }\r\n    };\r\n\r\n    $scope.updateDevHub = function(_package, _success, _error){\r\n\r\n        $rootScope.$broadcast('packageActivityStart', [_package.name, PACKAGE_ACTIVITY_TYPE.SELF_UPDATE]);\r\n\r\n        basicSelfUpgrade(\r\n            function successCallback(data) {\r\n                $rootScope.$broadcast('packageActivityStop', [_package.name, PACKAGE_ACTIVITY_TYPE.SELF_UPDATE]);\r\n                changePackageState(_package, PACKAGE_STATE.UPDATED);\r\n                if(_.isFunction(_success)){ _success();}\r\n            }, function errorCallback(errorMessage) {\r\n                $rootScope.$broadcast('packageActivityStop', [_package.name, PACKAGE_ACTIVITY_TYPE.SELF_UPDATE]);\r\n\r\n                if(_.isFunction(_error)){ _error(errorMessage);}\r\n\r\n                changePackageState(_package, PACKAGE_STATE.UPDATE_FAILED, false, errorMessage);\r\n\r\n                // ui-related hacks\r\n                $scope.update_package_failed[_package.name] = true;\r\n                $scope.update_package_fail_message[_package.name] = errorMessage;\r\n                $timeout(function(){\r\n                    $scope.update_package_failed[_package.name] = false;\r\n                }, linger_info_timeout_milliseconds);\r\n            });\r\n    };\r\n\r\n    $scope.updatePackagesIndividually = function(_trust){\r\n\r\n        console.log(\"updating packages individually\");\r\n\r\n        var selfUpgradeAvailable = null;\r\n\r\n        var packagesToUpdate = [];\r\n\r\n        $rootScope.$broadcast('packageActivityStart', [null,PACKAGE_ACTIVITY_TYPE.UPDATE_ALL]);\r\n\r\n        // Build list to update\r\n        _.forEach($scope.packages, function(_package){\r\n\r\n            if(!_package.upgrade_version) return;\r\n\r\n            if(_package.name === \"iot-developer-hub\"){\r\n                selfUpgradeAvailable = _package;\r\n            } else {\r\n                packagesToUpdate.push(_package);\r\n                //$scope.update_package_queue[_package.name] = true;\r\n            }\r\n\r\n        });\r\n\r\n        if(packagesToUpdate.length < 1){\r\n            if(selfUpgradeAvailable){\r\n                $scope.openUpdateDevHubPackageModal(selfUpgradeAvailable);\r\n            }\r\n            return;\r\n        }\r\n\r\n        var i=0;\r\n\r\n        function updateNextPackage(){\r\n            if(packagesToUpdate[i]){\r\n                console.log(\"updating packages individually: (\"+i+\")\"+ packagesToUpdate[i].name);\r\n                $scope.updatePackage(packagesToUpdate[i],\r\n                    function() {\r\n                        i+=1;\r\n                        updateNextPackage();\r\n                    }, function(errorMessage) {\r\n                        $rootScope.$broadcast('packageActivityStop', [null,PACKAGE_ACTIVITY_TYPE.UPDATE_ALL]);\r\n                        $scope.openInstallPackageErrorModal('Package Update Error', packagesToUpdate[i], errorMessage + ' Please refresh the web page to get updated packages information!');\r\n                    });\r\n                return;\r\n            }\r\n            if(selfUpgradeAvailable){\r\n                console.log(\"updating packages individually: 'iot-developer-hub', launching confirmation\");\r\n                $scope.openUpdateDevHubPackageModal(selfUpgradeAvailable);\r\n\r\n            }\r\n        }\r\n\r\n        updateNextPackage();\r\n    };\r\n\r\n    $scope.updatePackages = function(_trust){\r\n\r\n        var selfUpgradeAvailable = function(){\r\n            var devHubPackage = _.find($scope.packages, function(_p) { return _p.name === \"iot-developer-hub\"; });\r\n\r\n            if(devHubPackage && devHubPackage.upgrade_version){\r\n             return devHubPackage;\r\n            }else{\r\n                return null;\r\n            }\r\n        }();\r\n\r\n        if(selfUpgradeAvailable){\r\n            $scope.updatePackagesIndividually(_trust);\r\n            return;\r\n        }\r\n\r\n        if($scope.installing_all_package_updates || $scope.package_activity){\r\n            return;\r\n        }\r\n\r\n        $rootScope.$broadcast('packageActivityStart', [null, PACKAGE_ACTIVITY_TYPE.UPDATE_ALL]);\r\n\r\n        _.forEach($scope.packages, function(_package){\r\n\r\n            if(!_package.upgrade_version) return;\r\n\r\n            $scope.updating_package[_package.name] = true;\r\n        });\r\n\r\n        basicUpdateAllPackages(_trust,\r\n            function successCallback(data) {\r\n                $rootScope.$broadcast('packageActivityStop', [null,PACKAGE_ACTIVITY_TYPE.UPDATE_ALL]);\r\n                if (data.status === 'success') {\r\n                    for(var _p=0,_pl=$scope.packages.length;_p<_pl;_p++){\r\n                        changePackageState($scope.packages[_p], PACKAGE_STATE.UPDATED, true);\r\n                    }\r\n\r\n                    try {\r\n                        var p_list = JSON.parse(data.p_list);\r\n                        $scope.setPackages(p_list);\r\n                    } catch(e) {\r\n                        // ignore error\r\n                    }\r\n\r\n                    $scope.setArrays(false);\r\n                } else if (data.status === 'untrusted' && !_trust){\r\n                    $scope.openUpdateUntrustedPackagesModal(data.error);\r\n                    return;\r\n                } else {\r\n                    errorCallback(data.message);\r\n                }\r\n            }, errorCallback);\r\n\r\n        function errorCallback(errorMessage) {\r\n            $rootScope.$broadcast('packageActivityStop', [null,PACKAGE_ACTIVITY_TYPE.UPDATE_ALL]);\r\n            for(var _p=0,_pl=$scope.packages.length;_p<_pl;_p++){\r\n                var _packg = $scope.packages[_p];\r\n                changePackageState(_packg, PACKAGE_STATE.UPDATE_FAILED, true, errorMessage);\r\n            }\r\n\r\n            $timeout(function(){\r\n                for(var _p=0,_pl=$scope.packages.length;_p<_pl;_p++){\r\n                    var _packg = $scope.packages[_p];\r\n                    $scope.update_package_failed[_packg.name] = false;\r\n                }\r\n            }, linger_info_timeout_milliseconds);\r\n\r\n            var tempPackage = {};\r\n            tempPackage.name = 'Update Packages';\r\n            $scope.openInstallPackageErrorModal('Packages Update Error', tempPackage, errorMessage);\r\n        }\r\n    };\r\n\r\n    $scope.setPackages = function(package_list, passedSuccessCallback, passedErrorCallback){\r\n        console.log(\"hub controller: getting packages #005a\");\r\n\r\n        if ((typeof package_list === 'undefined') || (typeof package_list === 'string')) {\r\n            $http({\r\n                method : 'GET',\r\n                url    : '/api/packages?nocache=' + new Date().getTime()\r\n            }).then(\r\n                function successCallback(response) {\r\n                    $scope.packages = response.data;\r\n                    console.log(\"hub controller: found packages by API call 005b\");\r\n                    $scope.package_refresh = Number($scope.package_refresh) + 1;\r\n                    console.log(\"hub controller: setting package refresh flag 005c\");\r\n\r\n                    if(_.isFunction(passedSuccessCallback)){ passedSuccessCallback(response.data); }\r\n                },function errorCallback(response) {\r\n                    console.log(\"error getting packages 005E\");\r\n\r\n                    if(_.isFunction(passedErrorCallback)){ passedErrorCallback(response); }\r\n                });\r\n        } else {\r\n            $scope.packages = package_list;\r\n            $scope.package_refresh = Number($scope.package_refresh) + 1;\r\n        }\r\n    };\r\n\r\n    ///////////////////////////////////////\r\n    // GUI Modals\r\n    //////////////////////////////////////\r\n\r\n    $scope.openPackageInfoModal = function(_package){\r\n\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'partials/hub.package.info.ng.html?version=' + gui_version,\r\n            animation:    true,\r\n            size: 'lg',\r\n            backdrop: modal_light_dismiss_enabled,\r\n            scope: $scope,\r\n            controller: function($scope,$state,$http,$rootScope){\r\n                $scope.service_error = false;\r\n                $scope.displayed   = _package;\r\n\r\n                //$scope.statuses    = $scope.service_statuses;\r\n                $scope.running     = $scope.package_statuses[_package.name].running;\r\n\r\n                //var _state         = $scope.package_states[_package.name];\r\n                //console.log(\"hub control opening package info modal for \"+_package.name+\" with State \"+_state);\r\n\r\n                $scope.enabled     =  $scope.package_statuses[_package.name].autorun;\r\n                $scope.checkbox    = {enabled: $scope.enabled};\r\n                console.log(\"hub control opening package info modal for \"+_package.name+\" with State \"+$scope.enabled+\" \"+$scope.running);\r\n                $scope.hasupgrade  =  _package.upgrade_version;\r\n\r\n                $scope.closePackageInfo = function(){\r\n                    console.log(\"close packageinfo\");\r\n                    modalInstance.dismiss('cancel');\r\n                    $scope.installed_package = {};\r\n                };\r\n\r\n                $scope.toggleServiceState = function(_enable){\r\n                    if($scope.enabling_package[_package.name]){\r\n                        return;\r\n                    }\r\n                    $scope.enabling_package[_package.name] = true;\r\n\r\n                    var _len         = _package.service.length;\r\n                    var _action      = _enable ? \"enable\"    : \"disable\";\r\n                    console.log(\"hub service control toggling service state for \"+_package.name+\" to \"+_action+\" #5502a\");\r\n\r\n                    var _services = null;\r\n                    if(_package.service){\r\n                        _services = _package.service.join(\",\");\r\n                        if(_services){\r\n                            tempURL = '/api/sc?services=' + _services + \"&action=\" + _action;\r\n                            workerProcessRestService.performGeneralExecution('POST', tempURL, false, false, null,\r\n                                function successCallback(data) {\r\n                                    $scope.enabling_package[_package.name] = false;\r\n                                    if (data.status === 'success'){\r\n                                        if(_enable){\r\n                                            console.log(\"hub service control successfully changed service state for \"+_package.name+\" to \"+_action+\" #5502c1\");\r\n                                        }else{\r\n                                            console.log(\"hub service control successfully changed service state for \"+_package.name+\" to \"+_action+\" #5502c2\");\r\n                                        }\r\n                                        //$scope.package_statuses[_package.name].State = _enable? 'enabled' : 'disabled';\r\n                                        $scope.setArrays(true);\r\n                                    } else {\r\n                                        $scope.enabling_package[_package.name] = false;\r\n                                        $scope.service_error = true;\r\n                                        $scope.service_error_message = 'This action failed. Please try again! ' + data.message;\r\n                                        if (_enable) {\r\n                                            // enable failed.... uncheck checkbox\r\n                                            $scope.checkbox    = {enabled: false};\r\n                                        } else {\r\n                                            // disable failed.... check checkbox\r\n                                            $scope.checkbox    = {enabled: true};\r\n                                        }\r\n                                        console.log(\"hub service control failed to change service state for \"+_package.name+\" to \"+_action+\" #5502F\");\r\n\r\n                                        setTimeout(function(){\r\n                                            $scope.service_error = false;\r\n                                        }, linger_info_timeout_milliseconds);\r\n                                    }\r\n                                }, function errorCallback(errorMessage) {\r\n                                    $scope.enabling_package[_package.name] = false;\r\n                                    $scope.service_error = true;\r\n                                    $scope.service_error_message = errorMessage;\r\n                                    if (_enable) {\r\n                                        // enable failed.... uncheck checkbox\r\n                                        $scope.checkbox    = {enabled: false};\r\n                                    } else {\r\n                                        // disable failed.... check checkbox\r\n                                        $scope.checkbox    = {enabled: true};\r\n                                    }\r\n                                    console.log(\"errorCallback with \" + errorMessage);\r\n\r\n                                    setTimeout(function(){\r\n                                        $scope.service_error = false;\r\n                                    }, linger_info_timeout_milliseconds);\r\n                                }, rest_check_interval_milliseconds_s);\r\n                        }\r\n                    }\r\n                };\r\n\r\n                $scope.doUpdate = function(_displayed){\r\n                    $scope.updatePackage(_displayed, function(){\r\n                        $scope.setArrays(true);\r\n                        //refactor out\r\n                    }, function errorCallback(errorMessage){\r\n                        $scope.openInstallPackageErrorModal('Package Update Error', _displayed, errorMessage);\r\n                        $scope.setArrays(true);\r\n                        modalInstance.dismiss('cancel');\r\n                    });\r\n                };\r\n            }\r\n        });\r\n    };\r\n\r\n    $scope.openUpdateUntrustedPackagesModal = function(_message){\r\n        var modalInstance2 = $uibModal.open({\r\n            templateUrl: 'partials/hub.update.untrusted.packages.ng.html?version=' + gui_version,\r\n            animation:    true,\r\n            scope:        $scope,\r\n            size:        'lg',\r\n            backdrop: modal_light_dismiss_enabled,\r\n            controller: function($scope,$state,$http,$rootScope,$timeout){\r\n                $scope.message      = _message;\r\n                $scope.closeModal = function(){\r\n                    modalInstance2.dismiss('cancel');\r\n                };\r\n                $scope.trustToUpdate = function(){\r\n                    modalInstance2.dismiss('cancel');\r\n                    $scope.updatePackages(true);\r\n                };\r\n            }\r\n        });\r\n    };\r\n\r\n    $scope.confirmUpdatePackages = function(){\r\n        console.log(\"hub confirming update packages #9190a\");\r\n        if($scope.package_activity){\r\n            console.log(\"suppressing action: current package activity\");\r\n            return;\r\n        }\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'partials/hub.confirm.update.packages.ng.html?version=' + gui_version,\r\n            animation:    true,\r\n            size: 'lg',\r\n            backdrop: modal_light_dismiss_enabled,\r\n            scope: $scope,\r\n            controller: function($scope,$state,$http,$rootScope){\r\n\r\n                $scope.closeModal = function(){\r\n                    modalInstance.dismiss('cancel');\r\n                };\r\n\r\n                $scope.doUpdatePackages = function(){\r\n                    modalInstance.dismiss('cancel');\r\n                    $scope.updatePackages();\r\n                };\r\n            }\r\n        });\r\n    };\r\n\r\n    $scope.openUpdateDevHubPackageModal = function(_package){\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'partials/hub.confirm.update.devhub.ng.html?version=' + gui_version,\r\n            animation:    true,\r\n            size: 'lg',\r\n            backdrop: modal_light_dismiss_enabled,\r\n            scope: $scope,\r\n            controller: function($scope,$state,$http,$rootScope,$timeout, $window){\r\n                //$scope.selected_device   = null;\r\n\r\n                $rootScope.$broadcast('packageActivityStart');\r\n                $scope.selfUpgrading = false;\r\n\r\n                $scope.closeModal = function(){\r\n                    $rootScope.$broadcast('packageActivityStop');\r\n                    console.log(\"close confirm restart modal\");\r\n                    modalInstance.dismiss('cancel');\r\n                };\r\n\r\n                $scope.doSelfUpdate =  function(){\r\n                    $scope.selfUpgrading = true;\r\n                    $scope.updateDevHub(_package,\r\n                        function successCallback(){\r\n                            // stop checking so that we won't throw no network error.\r\n                            // later on, when we load state.hub, we will reschedule it.\r\n                            $scope.stopCheckingNetwork();\r\n\r\n                            $timeout(function(){\r\n                                modalInstance.dismiss('cancel');\r\n                                $state.go(\"welcome.login\");\r\n\r\n                            },5000);\r\n\r\n                            // Refresh web page to download index.html\r\n                            setTimeout(function() {\r\n                                $window.location.reload();\r\n                            }, 7000);\r\n                        },\r\n                        function errorCallback(){\r\n                            $timeout(function(){\r\n                                $scope.update_package_failed[_package.name] = false;\r\n                            }, linger_info_timeout_milliseconds);\r\n\r\n                            $scope.openInstallPackageErrorModal();\r\n\r\n                            // Assume success\r\n                            $timeout(function(){\r\n                                modalInstance.dismiss('cancel');\r\n                                $state.go(\"welcome.login\");\r\n\r\n                            }, 7000);\r\n\r\n                            // Refresh web page to download index.html\r\n                            setTimeout(function() {\r\n                                $window.location.reload();\r\n                            }, 9000);\r\n                        }\r\n                    );\r\n                };\r\n            }\r\n        });\r\n    };\r\n\r\n    $scope.startTrustedInstall = function (_package) {\r\n        _package.confirmUntrusted=false;\r\n        if($scope.checkForPackageActivity()){\r\n            return;\r\n        }\r\n        $scope.installPackage(_package, null, null, true);\r\n    };\r\n\r\n    $scope.openUpdateUntrustedPackageModal = function(_package,_message, _success){\r\n        var modalInstance2 = $uibModal.open({\r\n            templateUrl: 'partials/hub.update.untrusted.package.ng.html?version=' + gui_version,\r\n            animation:    true,\r\n            scope:        $scope,\r\n            size:        'lg',\r\n            backdrop: modal_light_dismiss_enabled,\r\n            controller: function($scope,$state,$http,$rootScope,$timeout){\r\n                $scope.installed_package[_package.name] = false;\r\n                $scope.untrusted    = _package;\r\n                $scope.message      = _message;\r\n                $scope.closeModal = function(){\r\n                    modalInstance2.dismiss('cancel');\r\n                };\r\n                $scope.trustToUpdate = function(){\r\n                    modalInstance2.dismiss('cancel');\r\n                    $scope.updatePackage(_package,  _success, null, true);\r\n                };\r\n            }\r\n        });\r\n    };\r\n\r\n    $scope.openInstallUntrustedPackageModal = function(_package,_message){\r\n        var modalInstance2 = $uibModal.open({\r\n            templateUrl: 'partials/hub.install.untrusted.package.ng.html?version=' + gui_version,\r\n            animation:    true,\r\n            scope:        $scope,\r\n            size:        'lg',\r\n            backdrop: modal_light_dismiss_enabled,\r\n            controller: function($scope,$state,$http,$rootScope,$timeout){\r\n                $scope.installed_package[_package.name] = false;\r\n                $scope.untrusted    = _package;\r\n                $scope.message      = _message;\r\n                $scope.closeModal = function(){\r\n                    modalInstance2.dismiss('cancel');\r\n                };\r\n                $scope.trustToInstall = function(){\r\n                    modalInstance2.dismiss('cancel');\r\n\r\n                    $scope.installPackage(\r\n                        _package,\r\n                        function(){\r\n                            //modalInstance2.dismiss('cancel');\r\n                        },\r\n                        function(){\r\n                            //modalInstance2.dismiss('cancel');\r\n                        },true);\r\n                };\r\n\r\n            }\r\n        });\r\n    };\r\n\r\n    $scope.openInstallPackageErrorModal = function(_title, _package, _message){\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'partials/hub.install.package.error.ng.html?version=' + gui_version,\r\n            animation:    true,\r\n            size: 'lg',\r\n            backdrop: modal_light_dismiss_enabled,\r\n            controller: function($scope,$state,$http,$rootScope,$timeout){\r\n                $scope.title = _title;\r\n                $scope.package = _package;\r\n                $scope.message = _message;\r\n                $scope.closeModal = function(){\r\n                    modalInstance.dismiss('cancel');\r\n                };\r\n            }\r\n        });\r\n    };\r\n\r\n    $scope.openServiceActivityPackageErrorModal = function(_title, _message){\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'partials/hub.service.package.error.ng.html?version=' + gui_version,\r\n            animation:    true,\r\n            size: 'lg',\r\n            backdrop: modal_light_dismiss_enabled,\r\n            controller: function($scope,$state,$http,$rootScope,$timeout){\r\n                $scope.title = _title;\r\n                $scope.message = _message;\r\n                $scope.closeModal = function(){\r\n                    modalInstance.dismiss('cancel');\r\n                };\r\n            }\r\n        });\r\n    };\r\n\r\n    $scope.openAddPackagesModal = function(){\r\n\r\n        if($scope.package_activity){\r\n            console.log(\"suppressing action: current package activity\");\r\n            return;\r\n        }\r\n\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'partials/hub.add.packages.ng.html?version=' + gui_version,\r\n            animation:    true,\r\n            scope: $scope,\r\n            size: 'lg',\r\n            backdrop: modal_light_dismiss_enabled,\r\n            controller: function($scope,$state,$http,$rootScope){\r\n\r\n                $scope.query = null;\r\n                $scope.sortType = 'name';\r\n                $scope.installed_package    = {};\r\n\r\n                $scope.closeAddPackages = function(){\r\n                    if($scope.installing_any_package) return;\r\n                    $scope.installed_package    = {};\r\n                    modalInstance.dismiss('cancel');\r\n\r\n                    console.log(\"closing add packages modal.\");\r\n                };\r\n\r\n            }\r\n        });\r\n\r\n    };\r\n};\r\n","// These are general functions used in several states.\r\niotgatewayhub.expandHub_proxy = function($scope,$http,$rootScope,$state,workerProcessRestService,utilityFunctionsService) {\r\n    $scope.settings      = {proxy: null };\r\n\r\n    $scope.proceedToNetworkCheck = function(){\r\n        $rootScope.loggedin = true;\r\n\r\n        utilityFunctionsService.checkNetwork(function(response){\r\n\r\n                function goNextState(has_network) {\r\n                    if (has_network) {\r\n                        //network is up\r\n                        $scope.connected = true;\r\n                        if($rootScope.redirectState){\r\n                            $state.go($rootScope.redirectState);\r\n                        }else{\r\n                            $state.go('hub.dashboard.sensors');\r\n                        }\r\n                    } else {\r\n                        //network is down\r\n                        $scope.connected = false;\r\n                        $state.go(\"hub.nonetwork\",{});\r\n                    }\r\n                }\r\n\r\n                $scope.startCheckingNetwork();\r\n\r\n                var _https_conn = response.data.https_conn; //should this match the window-level protocol? The spec says this value\r\n                var _ok         = _https_conn==\"True\";\r\n\r\n                goNextState(_ok);\r\n            }, function(response){\r\n                //should not occur (network being down is handled in success call with status in json)\r\n                console.log(\"error callback for test proxy settings\");\r\n            });\r\n    };\r\n\r\n    $scope.startCheckingNetwork = function(){\r\n        if (periodicCheckNetworkFunc !== null) {\r\n            clearInterval(periodicCheckNetworkFunc);\r\n        }\r\n        periodicCheckNetworkFunc = setInterval(function(){\r\n            utilityFunctionsService.checkNetwork(\r\n                function(response){\r\n                    var _https_conn = response.data.https_conn; //should this match the window-level protocol? The spec says this value\r\n                    var _ok         = _https_conn===\"True\";\r\n                    var _fail       =  simulate_network_failure && network_index++ % 2 === 0;\r\n                    if(_ok && !_fail){\r\n                        console.log(\"hub controller: check network found https network connection is UP #9200b1\");\r\n                        $scope.connected = true;\r\n                    }else{\r\n                        //network is down\r\n                        console.log(\"hub controller: check network found https network connection is DOWN #9200b2\");\r\n                        $scope.connected = false;\r\n                    }\r\n\r\n                    // set pro status\r\n                    if (response.data.pro_status.result === 'NA') {\r\n                        // cannot get the current pro status, skip.\r\n                    } else {\r\n                        $scope.pro = (response.data.pro_status.result === 'True') ;\r\n                    }\r\n\r\n                    // update package list\r\n                    if (response.data.package_list === 'NA') {\r\n                        // no package_list update\r\n                    } else {\r\n                        // cast string of array to array\r\n                        $scope.packages = JSON.parse(response.data.package_list);\r\n                        $scope.package_refresh = Number($scope.package_refresh) + 1;\r\n                    }\r\n\r\n                    // update repo list\r\n                    if (response.data.repo_list === 'NA') {\r\n                        // no repo_list update\r\n                    } else {\r\n                        // only update when repo_list has an array..\r\n                        // empty array is still an array.\r\n                        if (response.data.repo_list) {\r\n                            $scope.repositories = response.data.repo_list;\r\n                        }\r\n                    }\r\n                },\r\n                function(response){\r\n                    console.log(\"hub ERROR checking network at interval #9200E \" + response.status);\r\n                    // Do not update status if we cannot get any information.\r\n                    // $scope.connected = false;\r\n                });\r\n        },network_check_interval_milliseconds);\r\n    };\r\n\r\n    $scope.stopCheckingNetwork = function() {\r\n        if (periodicCheckNetworkFunc !== null) {\r\n            clearInterval(periodicCheckNetworkFunc);\r\n        }\r\n    };\r\n\r\n    $scope.getProxySettings = function(resultHandler){\r\n        var tempUrl = '/api/proxy?request=list';\r\n        workerProcessRestService.informGeneralChecking('GET', tempUrl, false, false, null,\r\n            'Network Settings', '', 'Retrieving Settings...',\r\n            function(data){\r\n                // success call back\r\n                $scope.proxy = data;\r\n                $scope.settings.proxy = $scope.proxy;\r\n                $scope.settings.proxy.single_url = \"\";\r\n                $scope.settings.proxy.single_port = \"\";\r\n\r\n                resultHandler();\r\n            }, rest_check_interval_milliseconds);\r\n    };\r\n\r\n    $scope.testProxySettings = function(successCallback, failCallback){\r\n        //returns success or failure. does not send settings in form. uses the ones in database.\r\n        //Nick says button should be enabled only when form is clean.\r\n        console.log(\"testing proxy settings\");\r\n        $scope.networkSettingsTest = {running:true};\r\n        utilityFunctionsService.checkNetwork(\r\n            function(response){\r\n                var _https_conn = response.data.https_conn;\r\n                var _ok         = _https_conn==\"True\";\r\n\r\n                if(_ok){\r\n                    successCallback();\r\n                    // $scope.networkSettingsTest = {running:true,status:'success'};\r\n                    //network is up\r\n                    //$state.go(\"hub.dashboard.sensors\",{});\r\n                }else{\r\n                    failCallback({success:false, message:\"Proxy settings invalid [\"+_https_conn+\"]\"});\r\n                    //$scope.networkSettingsTest = {running:true,status:'fail'};\r\n                    //network is down\r\n                    //$state.go(\"hub.nonetwork\",{});\r\n                }\r\n                console.log(\"Proxy test returned: \"+_https_conn);\r\n            },\r\n            function(response){\r\n                failCallback();\r\n                //should not occur (network being down is handled in success call with status in json)\r\n                console.log(\"error callback for test proxy settings\");\r\n            }\r\n        );\r\n    };\r\n\r\n    $scope.applyProxySettings = function(successCallback, failCallback){\r\n        //save proxy settings to backend\r\n\r\n        var _single_url  = $scope.settings.proxy.single_url;\r\n        var _single_port = $scope.settings.proxy.single_port;\r\n\r\n        var _http_url    = $scope.settings.proxy.http_url;\r\n        var _http_port   = $scope.settings.proxy.http_port;\r\n\r\n        var _https_url   = $scope.settings.proxy.https_url;\r\n        var _https_port  = $scope.settings.proxy.https_port;\r\n\r\n        var _ftp_url     = $scope.settings.proxy.ftp_url;\r\n        var _ftp_port    = $scope.settings.proxy.ftp_port;\r\n\r\n        var _socks_url   = $scope.settings.proxy.socks_url;\r\n        var _socks_port  = $scope.settings.proxy.socks_port;\r\n\r\n        var _no_proxy    = $scope.settings.proxy.no_proxy;\r\n\r\n        var tempURL = '/api/proxy'+\r\n            \"?http_url=\"+encodeURIComponent(_http_url)+\r\n            \"&http_port=\"+encodeURIComponent(_http_port)+\r\n            \"&https_url=\"+encodeURIComponent(_https_url)+\r\n            \"&https_port=\"+encodeURIComponent(_https_port)+\r\n            \"&ftp_url=\"+encodeURIComponent(_ftp_url)+\r\n            \"&ftp_port=\"+encodeURIComponent(_ftp_port)+\r\n            \"&socks_url=\"+encodeURIComponent(_socks_url)+\r\n            \"&socks_port=\"+encodeURIComponent(_socks_port)+\r\n            \"&no_proxy=\"+encodeURIComponent(_no_proxy);\r\n\r\n        workerProcessRestService.performGeneralExecution('POST', tempURL, false, false, null,\r\n            function(data) {\r\n                var _https_conn = data.https_conn;\r\n                if (_https_conn===\"True\") {\r\n                    $scope.connected = true;\r\n                    successCallback({success: true, message: \"Applied proxy settings\"});\r\n                } else {\r\n                    $scope.connected = false;\r\n                    failCallback({success: false,   message: \"Applied proxy settings, but https connection does not work under the settings. Some features will be disabled.\"});\r\n                }\r\n            }, function(errorMessage) {\r\n                failCallback({success: false, message: errorMessage});\r\n            }, rest_check_interval_milliseconds_m);\r\n    };\r\n};\r\n","// These are general functions used in several states.\r\niotgatewayhub.expandHub_pro_upgrade = function($scope,$http,$state,$uibModal,$timeout,workerProcessRestService,utilityFunctionsService) {\r\n\r\n    $scope.checkProStatus  = function(){\r\n        console.log(\"hub controller: checking pro status\");\r\n        $http({\r\n            method: 'GET',\r\n            url:    '/api/pro?nocache=' + new Date().getTime() \r\n        }).then(function successCallback(response) {\r\n            if (response.data.result === 'NA') {\r\n                // This means that the backend cannot get the pro status, so we do not update status.\r\n            } else {\r\n                $scope.pro = (response.data.result === 'True') ;\r\n            }\r\n            console.log(\"hub controller: found pro as \"+$scope.pro+\" #7223c\"+response.status);\r\n        }, function errorCallback(response) {\r\n            //this only happens for server error\r\n            console.log(\"errorCallback with HTTP status \"+response.status);\r\n        });\r\n    };\r\n\r\n    $scope.confirmOSUpgrade = function(callback){\r\n        console.log(\"hub confirming os upgrade #9033a\");\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'partials/hub.os.upgrade.1.ng.html?version=' + gui_version,\r\n            animation:    true,\r\n            size: 'lg',\r\n            backdrop: modal_light_dismiss_enabled,\r\n            scope: $scope,\r\n            controller: function($scope,$state,$http,$rootScope){\r\n\r\n                $scope.onSuppress = function(shouldSuppress) {\r\n                    if(!shouldSuppress) return;\r\n                    utilityFunctionsService.setCookie(\"upgradeMessage\",false,license_duration_days);\r\n                };\r\n\r\n                $scope.closeModal = function(){\r\n                    console.log(\"hub canceling os upgrade #9033b\");\r\n                    modalInstance.dismiss('cancel');\r\n                };\r\n\r\n                $scope.onNotNow = function(){\r\n                    console.log(\"hub canceling os upgrade via 'Not now' #9033b\");\r\n                    modalInstance.dismiss('cancel');\r\n                    if(angular.isFunction(callback))callback();\r\n                };\r\n\r\n                $scope.continueOSUpgrade = function(){\r\n                    console.log(\"hub opening os upgrade 2 #9033c\");\r\n                    console.log(\"admin tools mec status \"+$scope.mec.installed+\" #0812a\");\r\n                    if($scope.mec.enabled){\r\n                        $scope.openOSUpgradeModal1b();\r\n                        modalInstance.dismiss('cancel');\r\n                        return;\r\n                    }\r\n                    $scope.openOSUpgradeModal2();\r\n                    modalInstance.dismiss('cancel');\r\n                };\r\n            }\r\n        });\r\n    };\r\n\r\n    $scope.openOSUpgradeModal1b = function(){\r\n        console.log(\"hub confirming os upgrade #9033a\");\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'partials/hub.os.upgrade.1b.ng.html?version=' + gui_version,\r\n            animation:    true,\r\n            size: 'lg',\r\n            backdrop: modal_light_dismiss_enabled,\r\n            scope: $scope,\r\n            controller: function($scope,$state,$http,$rootScope){\r\n\r\n                $scope.closeModal = function(){\r\n                    console.log(\"hub canceling os upgrade #9033b\");\r\n                    modalInstance.dismiss('cancel');\r\n                };\r\n            }\r\n        });\r\n    };\r\n\r\n    $scope.openOSUpgradeModal2 = function(){\r\n        console.log(\"hub opening os upgrade 2 #9034a\");\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'partials/hub.os.upgrade.2.ng.html?version=' + gui_version,\r\n            animation:    true,\r\n            size: 'lg',\r\n            backdrop: modal_light_dismiss_enabled,\r\n            scope: $scope,\r\n            controller: function($scope,$state,$http,$rootScope,$timeout){\r\n\r\n                $scope.credentials   = {username: null, password: null};\r\n                $scope.error_message = null;\r\n\r\n                $scope.closeModal = function(){\r\n                    console.log(\"hub canceling os upgrade #9034b\");\r\n                    modalInstance.dismiss('cancel');\r\n                };\r\n\r\n                $scope.continueOSUpgrade = function(){\r\n                    $scope.error_message = '';\r\n                    $scope.openOSUpgradeModal3($scope.credentials.username,$scope.credentials.password);\r\n                    modalInstance.dismiss('cancel');\r\n                };\r\n            }\r\n        });\r\n    };\r\n\r\n    $scope.openOSUpgradeModal3 = function(_username,_password){\r\n        console.log(\"hub opening os upgrade 3 #9035a\");\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'partials/hub.os.upgrade.3.ng.html?version=' + gui_version,\r\n            animation:    true,\r\n            size: 'lg',\r\n            backdrop: modal_light_dismiss_enabled,\r\n            scope: $scope,\r\n            controller: function($scope,$state,$http,$rootScope){\r\n\r\n                $scope.in_pro_upgrade = true;\r\n                $scope.before_bar_message = 'Upgrade in Progress...';\r\n                $scope.button_title = 'Finish';\r\n\r\n                if ($scope.isQuark === true) {\r\n                    $scope.timeHours = 'up to one hour';\r\n                } else {\r\n                    $scope.timeHours = 'less than one hour';\r\n                }\r\n\r\n                $scope.closeModal = function(){\r\n                    modalInstance.dismiss('cancel');\r\n                };\r\n\r\n                data = {\"username\":_username,\"password\":_password};\r\n                workerProcessRestService.performGeneralExecution(\"POST\", \"/api/pro\", false, true, data,\r\n                    function successCallback(responseData) {\r\n                        $scope.in_pro_upgrade = false;\r\n                        $scope.before_bar_message = 'Upgrade Complete!';\r\n                        $scope.button_title = 'Finish';\r\n                        $scope.rebooting = false;\r\n                        $scope.rebooted  = false;\r\n\r\n                        $scope.checkProStatus();\r\n                        $scope.checkMECDetails();\r\n                    }, function errorCallback(errorMessage) {\r\n                        $scope.in_pro_upgrade = false;\r\n                        $scope.before_bar_message = 'Upgrade Failed!';\r\n                        $scope.button_title = 'Close';\r\n                        $scope.error_message = errorMessage;\r\n                    }, rest_check_interval_milliseconds_l);\r\n            }\r\n\r\n        });\r\n    };\r\n};\r\n","// These are general functions used in several states.\r\niotgatewayhub.expandHub_repositories = function($scope,$http,$state,$uibModal,workerProcessRestService) {\r\n\r\n    $scope.openCreateRepositoryModal = function(){\r\n        if($scope.package_activity){\r\n            console.log(\"suppressing action: current package activity\");\r\n            return;\r\n        }\r\n\r\n        tempURL = '/api/repository';\r\n        workerProcessRestService.informGeneralChecking('GET', tempURL, true, false, null,\r\n            'Manage Repositories', '', 'Getting repositories list...',\r\n            function successCallback(data) {\r\n                $scope.repositories = data.list;\r\n                $scope.openCreateRepositoryModal_2();\r\n            }, rest_check_interval_milliseconds);\r\n    };\r\n\r\n    $scope.openCreateRepositoryModal_2 = function(){\r\n        var modalInstance = $uibModal.open({\r\n            templateUrl: 'partials/hub.manage.repositories.ng.html?version=' + gui_version,\r\n            animation:    true,\r\n            size: 'lg',\r\n            backdrop: modal_light_dismiss_enabled,\r\n            scope: $scope,\r\n            controller: function($scope,$state,$http){\r\n\r\n                // Network\r\n                $scope.hideCancel=true;\r\n                $scope.saveText = \"Save settings\";\r\n                $scope.updated_repositories  = false;\r\n                $scope.updating_repositories = false;\r\n\r\n                $scope.removeRepository = function(_name){\r\n                    $scope.repositories = $scope.repositories.filter(function(_repo){  return _repo.name !== _name; });\r\n                };\r\n\r\n                $scope.findRepository = function(_name){\r\n                    var source = $scope.repositories;\r\n                    for (var i = 0; i < source.length; i++) {\r\n                        if (source[i].name === _name) {\r\n                            return source[i];\r\n                        }\r\n                    }\r\n                };\r\n\r\n                $scope.updateRepos = function(){\r\n                    if($scope.deleting_any_repository || $scope.updating_repositories || $scope.updated_repositories || $scope.adding_repository){\r\n                        return;\r\n                    }\r\n                    $scope.response_message      = null;\r\n                    $scope.error_message         = null;\r\n                    $scope.updating_repositories = true;\r\n                    $scope.error_message_add         = null;\r\n                    $scope.response_message_add      = null;\r\n\r\n                    tempURL = '/api/repository';\r\n                    workerProcessRestService.performGeneralExecution('PUT', tempURL, true, false, null,\r\n                        function successCallback(data) {\r\n                            $scope.updating_repositories = false;\r\n                            $scope.$emit(\"hub.unlockModal\");\r\n                            $scope.updated_repositories = true;\r\n\r\n                            try {\r\n                                var p_list = JSON.parse(data.p_list);\r\n                                $scope.setPackages(p_list);\r\n                            } catch(err) {\r\n                                // ignore error\r\n                                console.log(err.message);\r\n                            }\r\n\r\n                            $scope.reponse_message = \"The repositories were successfully updated.\";\r\n                        }, function errorCallback(errorMessage) {\r\n                            $scope.$emit(\"hub.unlockModal\");\r\n                            $scope.error_message = errorMessage;\r\n                            $scope.updating_repositories = false;\r\n                        }, rest_check_interval_milliseconds_m);\r\n\r\n                    $scope.$emit(\"hub.lockModal\", [$scope]);\r\n                };\r\n\r\n                $scope.addRepo = function(){\r\n                    if($scope.deleting_any_repository || $scope.adding_repository || $scope.updating_repositories){\r\n                        return;\r\n                    }\r\n\r\n                    $scope.adding_repository     = true;\r\n                    $scope.error_message         = null;\r\n                    $scope.error_message_add     = null;\r\n                    $scope.response_message      = null;\r\n                    $scope.response_message_add  = null;\r\n                    var _repository_name      = $scope.newRepository.name;\r\n                    var _repository_url       = $scope.newRepository.url;\r\n                    var _repository_username  = $scope.newRepository.username;\r\n                    var _repository_password  = $scope.newRepository.password;\r\n\r\n                    var _existing = $scope.findRepository(_repository_name);\r\n\r\n                    if(!_repository_name){\r\n                        $scope.error_message_add         =  \"The repository name must be specified.\";\r\n                        $scope.adding_repository     = false;\r\n                        return;\r\n                    }\r\n                    if(!_repository_url){\r\n                        $scope.error_message_add         =  \"The repository url must be specified.\";\r\n                        $scope.adding_repository     = false;\r\n                        return;\r\n                    }\r\n                    if(_existing){\r\n                        $scope.error_message_add         =  \"The repository \"+_repository_name+\" already exists.\";\r\n                        $scope.adding_repository     = false;\r\n                        return;\r\n                    }\r\n\r\n                    if(!_repository_username){\r\n                        _repository_username = \"None\"; //see API document. This is exactly what is specified.\r\n                    }\r\n                    if(!_repository_password){\r\n                        _repository_password = \"None\"; //see API document. This is exactly what is specified\r\n                    }\r\n\r\n                    //form validation---for now just checking name,url have values, and that name is unique\r\n                    //according to Nick at Intel the auth credentials (userName and password) are to be optional here\r\n\r\n                    if(_repository_name && _repository_url) {\r\n                        //console.log(\"adding repository\");\r\n                        $scope.response_message_add = \"Adding repository \"+_repository_name+\". Package list will be updated. This may take a few minutes...\";\r\n\r\n                        tempURL = '/api/repository'+\r\n                                  \"?name=\"+encodeURIComponent(_repository_name)+\r\n                                  \"&url=\"+encodeURIComponent(_repository_url)+\r\n                                  \"&username=\"+encodeURIComponent(_repository_username)+\r\n                                  \"&password=\"+encodeURIComponent(_repository_password);\r\n                        workerProcessRestService.performGeneralExecution('POST', tempURL, false, false, null,\r\n                            function successCallback(data) {\r\n                                $scope.adding_repository  = false;\r\n                                $scope.response_message_add = '';\r\n                                $scope.response_message_add = \"The repository \"+_repository_name+\" was successfully added. Package list was updated.\";\r\n                                //clear the form values and add the repo to the list\r\n                                $scope.newRepository.name = '';\r\n                                $scope.newRepository.url  = '';\r\n                                try {\r\n                                    $scope.repositories.push(_repository_name);\r\n                                } catch (err) {\r\n                                    console.log(err.message);\r\n                                }\r\n\r\n                                try {\r\n                                    var p_list = JSON.parse(data.p_list);\r\n                                    $scope.setPackages(p_list);\r\n                                } catch(err) {\r\n                                    // ignore error\r\n                                    console.log(err.message);\r\n                                }\r\n\r\n                                $scope.$emit(\"hub.unlockModal\", [$scope]);\r\n                                console.log(\"added repository \"+_repository_name);\r\n                            }, function errorCallback(errorMessage) {\r\n                                $scope.adding_repository  = false;\r\n                                $scope.response_message_add = '';\r\n                                $scope.error_message_add = errorMessage;\r\n\r\n                                $scope.$emit(\"hub.unlockModal\", [$scope]);\r\n                            }, rest_check_interval_milliseconds_m);\r\n\r\n                        $scope.$emit(\"hub.lockModal\", [$scope]);\r\n                    }\r\n\r\n                };\r\n\r\n                $scope.closeModal = function(){\r\n                    if($scope.adding_repository || $scope.updating_repositories){\r\n                        return;\r\n                    }\r\n                    modalInstance.dismiss('cancel');\r\n                };\r\n\r\n                $scope.deleteRepo = function(_repository){\r\n                    console.log(\"hub deleting repository \"+_repository+\" #4084a\");\r\n                    if($scope.deleting_any_repository || $scope.adding_repository || $scope.updating_repositories){\r\n                        return;\r\n                    }\r\n                    $scope.error_message                          = '';\r\n                    $scope.error_message_add         = null;\r\n                    $scope.response_message_add      = null;\r\n                    $scope.response_message          = null;\r\n                    $scope.deleting_repository[_repository]  = true;\r\n                    $scope.deleting_any_repository           = true;\r\n\r\n                    tempURL = '/api/repository'+\"?name=\"+encodeURIComponent(_repository);\r\n                    workerProcessRestService.performGeneralExecution('DELETE', tempURL, false, false, null,\r\n                        function successCallback(data){\r\n                            $scope.deleting_repository[_repository]  = false;\r\n                            $scope.deleting_any_repository           = false;\r\n\r\n                            try {\r\n                                var _index = $scope.repositories.indexOf(_repository);\r\n                                if (_index >= 0) {\r\n                                    $scope.repositories.splice(_index, 1);\r\n                                    // console.log($scope.repositories);\r\n                                }\r\n\r\n                            } catch(err) {\r\n                                console.log(err.message);\r\n                            }\r\n\r\n                            try {\r\n                                var p_list = JSON.parse(data.p_list);\r\n                                $scope.setPackages(p_list);\r\n                            } catch(err) {\r\n                                // ignore error\r\n                                console.log(err.message);\r\n                            }\r\n\r\n                            $scope.response_message   = \"The repository \"+_repository+\" was successfully deleted.\";\r\n                        }, function errorCallback(errorMessage) {\r\n                            $scope.deleting_repository[_repository]  = false;\r\n                            $scope.deleting_any_repository           = false;\r\n                            $scope.error_message = errorMessage;\r\n                        }, rest_check_interval_milliseconds_m);\r\n                };\r\n            }\r\n        });\r\n    };\r\n};\r\n"],"sourceRoot":"/source/"}